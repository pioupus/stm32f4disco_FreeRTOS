   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_pwr.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PWR_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	PWR_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	PWR_DeInit:
  26              	.LFB110:
  27              		.file 1 "lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c"
   1:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
   2:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
   3:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @file    stm32f4xx_pwr.c
   4:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @author  MCD Application Team
   5:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @version V1.0.0
   6:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @date    30-September-2011
   7:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief   This file provides firmware functions to manage the following 
   8:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:           
   9:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Backup Domain Access
  10:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - PVD configuration
  11:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - WakeUp pin configuration
  12:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Main and Backup Regulators configuration
  13:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - FLASH Power Down configuration
  14:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Low Power modes configuration
  15:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Flags management
  16:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *               
  17:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  18:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @attention
  19:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  20:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  21:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  22:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  23:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  24:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  25:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  26:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  27:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  28:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  29:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */ 
  30:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  31:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Includes ------------------------------------------------------------------*/
  32:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_pwr.h"
  33:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_rcc.h"
  34:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  35:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  36:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  37:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
  38:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  39:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR 
  40:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief PWR driver modules
  41:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  42:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */ 
  43:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  44:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  45:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private define ------------------------------------------------------------*/
  46:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --------- PWR registers bit address in the alias region ---------- */
  47:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  48:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  49:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CR Register ---*/
  50:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  51:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of DBP bit */
  52:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_OFFSET                (PWR_OFFSET + 0x00)
  53:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define DBP_BitNumber            0x08
  54:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
  55:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  56:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PVDE bit */
  57:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PVDE_BitNumber           0x04
  58:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
  59:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  60:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of FPDS bit */
  61:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define FPDS_BitNumber           0x09
  62:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_FPDS_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (FPDS_BitNumber * 4))
  63:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  64:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PMODE bit */
  65:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PMODE_BitNumber           0x0E
  66:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PMODE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PMODE_BitNumber * 4))
  67:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  68:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  69:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CSR Register ---*/
  70:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  71:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of EWUP bit */
  72:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
  73:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define EWUP_BitNumber           0x08
  74:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
  75:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  76:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of BRE bit */
  77:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define BRE_BitNumber            0x09
  78:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_BRE_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (BRE_BitNumber * 4))
  79:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  80:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
  81:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  82:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* CR register bit mask */
  83:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
  84:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
  85:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  86:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private macro -------------------------------------------------------------*/
  87:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private variables ---------------------------------------------------------*/
  88:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  89:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private functions ---------------------------------------------------------*/
  90:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  91:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Private_Functions
  92:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  93:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
  94:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  95:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group1 Backup Domain Access function 
  96:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Backup Domain Access function  
  97:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
  98:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
  99:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 100:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                             Backup Domain Access function 
 101:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 102:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 103:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   After reset, the backup domain (RTC registers, RTC backup data 
 104:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   registers and backup SRAM) is protected against possible unwanted 
 105:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   write accesses. 
 106:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   To enable access to the RTC Domain and RTC registers, proceed as follows:
 107:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Enable the Power Controller (PWR) APB1 interface clock using the
 108:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       RCC_APB1PeriphClockCmd() function.
 109:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
 110:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 111:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 112:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 113:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 114:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 115:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 116:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
 117:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 118:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 119:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 120:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_DeInit(void)
 121:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  28              		.loc 1 121 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
 122:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  40              		.loc 1 122 0
  41 0004 4FF08050 		mov	r0, #268435456
  42 0008 0121     		movs	r1, #1
  43 000a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 123:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  44              		.loc 1 123 0
  45 000e 4FF08050 		mov	r0, #268435456
  46 0012 0021     		movs	r1, #0
  47 0014 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 124:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
  48              		.loc 1 124 0
  49 0018 80BD     		pop	{r7, pc}
  50              		.cfi_endproc
  51              	.LFE110:
  53 001a 00BF     		.section	.rodata
  54              		.align	2
  55              	.LC0:
  56 0000 6C69622F 		.ascii	"lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_p"
  56      63686970 
  56      2F53544D 
  56      33324634 
  56      78785F53 
  57 0033 77722E63 		.ascii	"wr.c\000"
  57      00
  58              		.section	.text.PWR_BackupAccessCmd,"ax",%progbits
  59              		.align	2
  60              		.global	PWR_BackupAccessCmd
  61              		.thumb
  62              		.thumb_func
  64              	PWR_BackupAccessCmd:
  65              	.LFB111:
 125:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 126:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 127:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables access to the backup domain (RTC registers, RTC 
 128:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         backup data registers and backup SRAM).
 129:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 130:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         Backup Domain Access should be kept enabled.
 131:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the access to the backup domain.
 132:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 133:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 134:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 135:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 136:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  66              		.loc 1 136 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 8
  69              		@ frame_needed = 1, uses_anonymous_args = 0
  70 0000 80B5     		push	{r7, lr}
  71              	.LCFI2:
  72              		.cfi_def_cfa_offset 8
  73              		.cfi_offset 7, -8
  74              		.cfi_offset 14, -4
  75 0002 82B0     		sub	sp, sp, #8
  76              	.LCFI3:
  77              		.cfi_def_cfa_offset 16
  78 0004 00AF     		add	r7, sp, #0
  79              	.LCFI4:
  80              		.cfi_def_cfa_register 7
  81 0006 0346     		mov	r3, r0
  82 0008 FB71     		strb	r3, [r7, #7]
 137:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 138:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
  83              		.loc 1 138 0
  84 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  85 000c 002B     		cmp	r3, #0
  86 000e 09D0     		beq	.L3
  87              		.loc 1 138 0 is_stmt 0 discriminator 1
  88 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  89 0012 012B     		cmp	r3, #1
  90 0014 06D0     		beq	.L3
  91 0016 40F20000 		movw	r0, #:lower16:.LC0
  92 001a C0F20000 		movt	r0, #:upper16:.LC0
  93 001e 8A21     		movs	r1, #138
  94 0020 FFF7FEFF 		bl	assert_failed
  95              	.L3:
 139:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 140:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
  96              		.loc 1 140 0 is_stmt 1
  97 0024 2023     		movs	r3, #32
  98 0026 C4F20E23 		movt	r3, 16910
  99 002a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 100 002c 1A60     		str	r2, [r3]
 141:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 101              		.loc 1 141 0
 102 002e 0837     		adds	r7, r7, #8
 103 0030 BD46     		mov	sp, r7
 104              		@ sp needed
 105 0032 80BD     		pop	{r7, pc}
 106              		.cfi_endproc
 107              	.LFE111:
 109              		.section	.text.PWR_PVDLevelConfig,"ax",%progbits
 110              		.align	2
 111              		.global	PWR_PVDLevelConfig
 112              		.thumb
 113              		.thumb_func
 115              	PWR_PVDLevelConfig:
 116              	.LFB112:
 142:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 143:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 144:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 145:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 146:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 147:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group2 PVD configuration functions
 148:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   PVD configuration functions 
 149:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 150:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 151:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 152:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                            PVD configuration functions
 153:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 154:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 155:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The PVD is used to monitor the VDD power supply by comparing it to a threshold
 156:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 157:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - A PVDO flag is available to indicate if VDD/VDDA is higher or lower than the 
 158:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    PVD threshold. This event is internally connected to the EXTI line16
 159:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and can generate an interrupt if enabled through the EXTI registers.
 160:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The PVD is stopped in Standby mode.
 161:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 162:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 163:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 164:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 165:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 166:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 167:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 168:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 169:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 170:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_0: PVD detection level set to 2.0V
 171:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_1: PVD detection level set to 2.2V
 172:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_2: PVD detection level set to 2.3V
 173:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_3: PVD detection level set to 2.5V
 174:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_4: PVD detection level set to 2.7V
 175:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_5: PVD detection level set to 2.8V
 176:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_6: PVD detection level set to 2.9V
 177:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_7: PVD detection level set to 3.0V
 178:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   Refer to the electrical characteristics of you device datasheet for more details. 
 179:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 180:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 181:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 182:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 117              		.loc 1 182 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 16
 120              		@ frame_needed = 1, uses_anonymous_args = 0
 121 0000 80B5     		push	{r7, lr}
 122              	.LCFI5:
 123              		.cfi_def_cfa_offset 8
 124              		.cfi_offset 7, -8
 125              		.cfi_offset 14, -4
 126 0002 84B0     		sub	sp, sp, #16
 127              	.LCFI6:
 128              		.cfi_def_cfa_offset 24
 129 0004 00AF     		add	r7, sp, #0
 130              	.LCFI7:
 131              		.cfi_def_cfa_register 7
 132 0006 7860     		str	r0, [r7, #4]
 183:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 133              		.loc 1 183 0
 134 0008 0023     		movs	r3, #0
 135 000a FB60     		str	r3, [r7, #12]
 184:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 185:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 186:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 136              		.loc 1 186 0
 137 000c 7B68     		ldr	r3, [r7, #4]
 138 000e 002B     		cmp	r3, #0
 139 0010 1BD0     		beq	.L5
 140              		.loc 1 186 0 is_stmt 0 discriminator 1
 141 0012 7B68     		ldr	r3, [r7, #4]
 142 0014 202B     		cmp	r3, #32
 143 0016 18D0     		beq	.L5
 144 0018 7B68     		ldr	r3, [r7, #4]
 145 001a 402B     		cmp	r3, #64
 146 001c 15D0     		beq	.L5
 147 001e 7B68     		ldr	r3, [r7, #4]
 148 0020 602B     		cmp	r3, #96
 149 0022 12D0     		beq	.L5
 150 0024 7B68     		ldr	r3, [r7, #4]
 151 0026 802B     		cmp	r3, #128
 152 0028 0FD0     		beq	.L5
 153 002a 7B68     		ldr	r3, [r7, #4]
 154 002c A02B     		cmp	r3, #160
 155 002e 0CD0     		beq	.L5
 156 0030 7B68     		ldr	r3, [r7, #4]
 157 0032 C02B     		cmp	r3, #192
 158 0034 09D0     		beq	.L5
 159 0036 7B68     		ldr	r3, [r7, #4]
 160 0038 E02B     		cmp	r3, #224
 161 003a 06D0     		beq	.L5
 162 003c 40F20000 		movw	r0, #:lower16:.LC0
 163 0040 C0F20000 		movt	r0, #:upper16:.LC0
 164 0044 BA21     		movs	r1, #186
 165 0046 FFF7FEFF 		bl	assert_failed
 166              	.L5:
 187:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 188:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 167              		.loc 1 188 0 is_stmt 1
 168 004a 4FF4E043 		mov	r3, #28672
 169 004e C4F20003 		movt	r3, 16384
 170 0052 1B68     		ldr	r3, [r3]
 171 0054 FB60     		str	r3, [r7, #12]
 189:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 190:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PLS[7:5] bits */
 191:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_PLS_MASK;
 172              		.loc 1 191 0
 173 0056 FB68     		ldr	r3, [r7, #12]
 174 0058 23F0E003 		bic	r3, r3, #224
 175 005c FB60     		str	r3, [r7, #12]
 192:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 193:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 194:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_PVDLevel;
 176              		.loc 1 194 0
 177 005e FA68     		ldr	r2, [r7, #12]
 178 0060 7B68     		ldr	r3, [r7, #4]
 179 0062 1343     		orrs	r3, r3, r2
 180 0064 FB60     		str	r3, [r7, #12]
 195:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 196:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 197:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 181              		.loc 1 197 0
 182 0066 4FF4E043 		mov	r3, #28672
 183 006a C4F20003 		movt	r3, 16384
 184 006e FA68     		ldr	r2, [r7, #12]
 185 0070 1A60     		str	r2, [r3]
 198:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 186              		.loc 1 198 0
 187 0072 1037     		adds	r7, r7, #16
 188 0074 BD46     		mov	sp, r7
 189              		@ sp needed
 190 0076 80BD     		pop	{r7, pc}
 191              		.cfi_endproc
 192              	.LFE112:
 194              		.section	.text.PWR_PVDCmd,"ax",%progbits
 195              		.align	2
 196              		.global	PWR_PVDCmd
 197              		.thumb
 198              		.thumb_func
 200              	PWR_PVDCmd:
 201              	.LFB113:
 199:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 200:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 201:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 202:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the PVD.
 203:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 204:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 205:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 206:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 207:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 202              		.loc 1 207 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 8
 205              		@ frame_needed = 1, uses_anonymous_args = 0
 206 0000 80B5     		push	{r7, lr}
 207              	.LCFI8:
 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 7, -8
 210              		.cfi_offset 14, -4
 211 0002 82B0     		sub	sp, sp, #8
 212              	.LCFI9:
 213              		.cfi_def_cfa_offset 16
 214 0004 00AF     		add	r7, sp, #0
 215              	.LCFI10:
 216              		.cfi_def_cfa_register 7
 217 0006 0346     		mov	r3, r0
 218 0008 FB71     		strb	r3, [r7, #7]
 208:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 209:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 219              		.loc 1 209 0
 220 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 221 000c 002B     		cmp	r3, #0
 222 000e 09D0     		beq	.L7
 223              		.loc 1 209 0 is_stmt 0 discriminator 1
 224 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 225 0012 012B     		cmp	r3, #1
 226 0014 06D0     		beq	.L7
 227 0016 40F20000 		movw	r0, #:lower16:.LC0
 228 001a C0F20000 		movt	r0, #:upper16:.LC0
 229 001e D121     		movs	r1, #209
 230 0020 FFF7FEFF 		bl	assert_failed
 231              	.L7:
 210:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 211:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 232              		.loc 1 211 0 is_stmt 1
 233 0024 1023     		movs	r3, #16
 234 0026 C4F20E23 		movt	r3, 16910
 235 002a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 236 002c 1A60     		str	r2, [r3]
 212:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 237              		.loc 1 212 0
 238 002e 0837     		adds	r7, r7, #8
 239 0030 BD46     		mov	sp, r7
 240              		@ sp needed
 241 0032 80BD     		pop	{r7, pc}
 242              		.cfi_endproc
 243              	.LFE113:
 245              		.section	.text.PWR_WakeUpPinCmd,"ax",%progbits
 246              		.align	2
 247              		.global	PWR_WakeUpPinCmd
 248              		.thumb
 249              		.thumb_func
 251              	PWR_WakeUpPinCmd:
 252              	.LFB114:
 213:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 214:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 215:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 216:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 217:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 218:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group3 WakeUp pin configuration functions
 219:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   WakeUp pin configuration functions 
 220:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 221:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 222:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 223:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     WakeUp pin configuration functions
 224:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 225:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 226:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - WakeUp pin is used to wakeup the system from Standby mode. This pin is 
 227:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    forced in input pull down configuration and is active on rising edges.
 228:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - There is only one WakeUp pin: WakeUp Pin 1 on PA.00.
 229:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 230:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 231:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 232:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 233:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 234:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 235:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 236:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 237:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 238:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 239:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 240:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_WakeUpPinCmd(FunctionalState NewState)
 241:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 253              		.loc 1 241 0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 8
 256              		@ frame_needed = 1, uses_anonymous_args = 0
 257 0000 80B5     		push	{r7, lr}
 258              	.LCFI11:
 259              		.cfi_def_cfa_offset 8
 260              		.cfi_offset 7, -8
 261              		.cfi_offset 14, -4
 262 0002 82B0     		sub	sp, sp, #8
 263              	.LCFI12:
 264              		.cfi_def_cfa_offset 16
 265 0004 00AF     		add	r7, sp, #0
 266              	.LCFI13:
 267              		.cfi_def_cfa_register 7
 268 0006 0346     		mov	r3, r0
 269 0008 FB71     		strb	r3, [r7, #7]
 242:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */  
 243:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 270              		.loc 1 243 0
 271 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 272 000c 002B     		cmp	r3, #0
 273 000e 09D0     		beq	.L9
 274              		.loc 1 243 0 is_stmt 0 discriminator 1
 275 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 276 0012 012B     		cmp	r3, #1
 277 0014 06D0     		beq	.L9
 278 0016 40F20000 		movw	r0, #:lower16:.LC0
 279 001a C0F20000 		movt	r0, #:upper16:.LC0
 280 001e F321     		movs	r1, #243
 281 0020 FFF7FEFF 		bl	assert_failed
 282              	.L9:
 244:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 245:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 283              		.loc 1 245 0 is_stmt 1
 284 0024 A023     		movs	r3, #160
 285 0026 C4F20E23 		movt	r3, 16910
 286 002a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 287 002c 1A60     		str	r2, [r3]
 246:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 288              		.loc 1 246 0
 289 002e 0837     		adds	r7, r7, #8
 290 0030 BD46     		mov	sp, r7
 291              		@ sp needed
 292 0032 80BD     		pop	{r7, pc}
 293              		.cfi_endproc
 294              	.LFE114:
 296              		.section	.text.PWR_BackupRegulatorCmd,"ax",%progbits
 297              		.align	2
 298              		.global	PWR_BackupRegulatorCmd
 299              		.thumb
 300              		.thumb_func
 302              	PWR_BackupRegulatorCmd:
 303              	.LFB115:
 247:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 248:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 249:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 250:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 251:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 252:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group4 Main and Backup Regulators configuration functions
 253:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Main and Backup Regulators configuration functions 
 254:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 255:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 256:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 257:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     Main and Backup Regulators configuration functions
 258:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 259:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 260:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The backup domain includes 4 Kbytes of backup SRAM accessible only from the 
 261:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    CPU, and address in 32-bit, 16-bit or 8-bit mode. Its content is retained 
 262:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    even in Standby or VBAT mode when the low power backup regulator is enabled. 
 263:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    It can be considered as an internal EEPROM when VBAT is always present.
 264:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    You can use the PWR_BackupRegulatorCmd() function to enable the low power
 265:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    backup regulator and use the PWR_GetFlagStatus(PWR_FLAG_BRR) to check if it is
 266:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ready or not. 
 267:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 268:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - When the backup domain is supplied by VDD (analog switch connected to VDD) 
 269:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the backup SRAM is powered from VDD which replaces the VBAT power supply to 
 270:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    save battery life.
 271:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 272:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The backup SRAM is not mass erased by an tamper event. It is read protected 
 273:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    to prevent confidential data, such as cryptographic private key, from being 
 274:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    accessed. The backup SRAM can be erased only through the Flash interface when
 275:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    a protection level change from level 1 to level 0 is requested. 
 276:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Refer to the description of Read protection (RDP) in the Flash programming manual.
 277:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 278:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The main internal regulator can be configured to have a tradeoff between performance
 279:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and power consumption when the device does not operate at the maximum frequency. 
 280:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    This is done through PWR_MainRegulatorModeConfig() function which configure VOS bit
 281:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    in PWR_CR register: 
 282:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - When this bit is set (Regulator voltage output Scale 1 mode selected) the System
 283:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         frequency can go up to 168 MHz. 
 284:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - When this bit is reset (Regulator voltage output Scale 2 mode selected) the System
 285:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         frequency can go up to 144 MHz. 
 286:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Refer to the datasheets for more details.
 287:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            
 288:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 289:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 290:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 291:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 292:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 293:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Backup Regulator.
 294:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Backup Regulator.
 295:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 296:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 297:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 298:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupRegulatorCmd(FunctionalState NewState)
 299:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 304              		.loc 1 299 0
 305              		.cfi_startproc
 306              		@ args = 0, pretend = 0, frame = 8
 307              		@ frame_needed = 1, uses_anonymous_args = 0
 308 0000 80B5     		push	{r7, lr}
 309              	.LCFI14:
 310              		.cfi_def_cfa_offset 8
 311              		.cfi_offset 7, -8
 312              		.cfi_offset 14, -4
 313 0002 82B0     		sub	sp, sp, #8
 314              	.LCFI15:
 315              		.cfi_def_cfa_offset 16
 316 0004 00AF     		add	r7, sp, #0
 317              	.LCFI16:
 318              		.cfi_def_cfa_register 7
 319 0006 0346     		mov	r3, r0
 320 0008 FB71     		strb	r3, [r7, #7]
 300:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 301:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 321              		.loc 1 301 0
 322 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 323 000c 002B     		cmp	r3, #0
 324 000e 0AD0     		beq	.L11
 325              		.loc 1 301 0 is_stmt 0 discriminator 1
 326 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 327 0012 012B     		cmp	r3, #1
 328 0014 07D0     		beq	.L11
 329 0016 40F20000 		movw	r0, #:lower16:.LC0
 330 001a C0F20000 		movt	r0, #:upper16:.LC0
 331 001e 40F22D11 		movw	r1, #301
 332 0022 FFF7FEFF 		bl	assert_failed
 333              	.L11:
 302:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 303:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 334              		.loc 1 303 0 is_stmt 1
 335 0026 A423     		movs	r3, #164
 336 0028 C4F20E23 		movt	r3, 16910
 337 002c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 338 002e 1A60     		str	r2, [r3]
 304:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 339              		.loc 1 304 0
 340 0030 0837     		adds	r7, r7, #8
 341 0032 BD46     		mov	sp, r7
 342              		@ sp needed
 343 0034 80BD     		pop	{r7, pc}
 344              		.cfi_endproc
 345              	.LFE115:
 347 0036 00BF     		.section	.text.PWR_MainRegulatorModeConfig,"ax",%progbits
 348              		.align	2
 349              		.global	PWR_MainRegulatorModeConfig
 350              		.thumb
 351              		.thumb_func
 353              	PWR_MainRegulatorModeConfig:
 354              	.LFB116:
 305:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 306:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 307:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Configures the main internal regulator output voltage.
 308:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator_Voltage: specifies the regulator output voltage to achieve
 309:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         a tradeoff between performance and power consumption when the device does
 310:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         not operate at the maximum frequency (refer to the datasheets for more details).
 311:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 312:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale1: Regulator voltage output Scale 1 mode, 
 313:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 168 MHz. 
 314:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale2: Regulator voltage output Scale 2 mode, 
 315:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 144 MHz.    
 316:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 317:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 318:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
 319:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 355              		.loc 1 319 0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 8
 358              		@ frame_needed = 1, uses_anonymous_args = 0
 359 0000 80B5     		push	{r7, lr}
 360              	.LCFI17:
 361              		.cfi_def_cfa_offset 8
 362              		.cfi_offset 7, -8
 363              		.cfi_offset 14, -4
 364 0002 82B0     		sub	sp, sp, #8
 365              	.LCFI18:
 366              		.cfi_def_cfa_offset 16
 367 0004 00AF     		add	r7, sp, #0
 368              	.LCFI19:
 369              		.cfi_def_cfa_register 7
 370 0006 7860     		str	r0, [r7, #4]
 320:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 321:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));
 371              		.loc 1 321 0
 372 0008 7B68     		ldr	r3, [r7, #4]
 373 000a B3F5804F 		cmp	r3, #16384
 374 000e 0AD0     		beq	.L13
 375              		.loc 1 321 0 is_stmt 0 discriminator 1
 376 0010 7B68     		ldr	r3, [r7, #4]
 377 0012 002B     		cmp	r3, #0
 378 0014 07D0     		beq	.L13
 379 0016 40F20000 		movw	r0, #:lower16:.LC0
 380 001a C0F20000 		movt	r0, #:upper16:.LC0
 381 001e 40F24111 		movw	r1, #321
 382 0022 FFF7FEFF 		bl	assert_failed
 383              	.L13:
 322:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 323:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
 384              		.loc 1 323 0 is_stmt 1
 385 0026 7B68     		ldr	r3, [r7, #4]
 386 0028 002B     		cmp	r3, #0
 387 002a 0CD1     		bne	.L14
 324:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 325:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 388              		.loc 1 325 0
 389 002c 4FF4E043 		mov	r3, #28672
 390 0030 C4F20003 		movt	r3, 16384
 391 0034 4FF4E042 		mov	r2, #28672
 392 0038 C4F20002 		movt	r2, 16384
 393 003c 1268     		ldr	r2, [r2]
 394 003e 22F48042 		bic	r2, r2, #16384
 395 0042 1A60     		str	r2, [r3]
 396 0044 0BE0     		b	.L12
 397              	.L14:
 326:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 327:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 328:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {    
 329:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR |= PWR_Regulator_Voltage_Scale1;
 398              		.loc 1 329 0
 399 0046 4FF4E043 		mov	r3, #28672
 400 004a C4F20003 		movt	r3, 16384
 401 004e 4FF4E042 		mov	r2, #28672
 402 0052 C4F20002 		movt	r2, 16384
 403 0056 1268     		ldr	r2, [r2]
 404 0058 42F48042 		orr	r2, r2, #16384
 405 005c 1A60     		str	r2, [r3]
 406              	.L12:
 330:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 331:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 407              		.loc 1 331 0
 408 005e 0837     		adds	r7, r7, #8
 409 0060 BD46     		mov	sp, r7
 410              		@ sp needed
 411 0062 80BD     		pop	{r7, pc}
 412              		.cfi_endproc
 413              	.LFE116:
 415              		.section	.text.PWR_FlashPowerDownCmd,"ax",%progbits
 416              		.align	2
 417              		.global	PWR_FlashPowerDownCmd
 418              		.thumb
 419              		.thumb_func
 421              	PWR_FlashPowerDownCmd:
 422              	.LFB117:
 332:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 333:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 334:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 335:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 336:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 337:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group5 FLASH Power Down configuration functions
 338:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   FLASH Power Down configuration functions 
 339:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 340:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 341:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 342:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            FLASH Power Down configuration functions
 343:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 344:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 345:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - By setting the FPDS bit in the PWR_CR register by using the PWR_FlashPowerDownCmd()
 346:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    function, the Flash memory also enters power down mode when the device enters 
 347:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Stop mode. When the Flash memory is in power down mode, an additional startup 
 348:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    delay is incurred when waking up from Stop mode.
 349:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 350:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 351:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 352:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 353:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 354:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 355:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Flash Power Down in STOP mode.
 356:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Flash power mode.
 357:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 358:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 359:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 360:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_FlashPowerDownCmd(FunctionalState NewState)
 361:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 423              		.loc 1 361 0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 8
 426              		@ frame_needed = 1, uses_anonymous_args = 0
 427 0000 80B5     		push	{r7, lr}
 428              	.LCFI20:
 429              		.cfi_def_cfa_offset 8
 430              		.cfi_offset 7, -8
 431              		.cfi_offset 14, -4
 432 0002 82B0     		sub	sp, sp, #8
 433              	.LCFI21:
 434              		.cfi_def_cfa_offset 16
 435 0004 00AF     		add	r7, sp, #0
 436              	.LCFI22:
 437              		.cfi_def_cfa_register 7
 438 0006 0346     		mov	r3, r0
 439 0008 FB71     		strb	r3, [r7, #7]
 362:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 363:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 440              		.loc 1 363 0
 441 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 442 000c 002B     		cmp	r3, #0
 443 000e 0AD0     		beq	.L17
 444              		.loc 1 363 0 is_stmt 0 discriminator 1
 445 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 446 0012 012B     		cmp	r3, #1
 447 0014 07D0     		beq	.L17
 448 0016 40F20000 		movw	r0, #:lower16:.LC0
 449 001a C0F20000 		movt	r0, #:upper16:.LC0
 450 001e 40F26B11 		movw	r1, #363
 451 0022 FFF7FEFF 		bl	assert_failed
 452              	.L17:
 364:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 365:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 453              		.loc 1 365 0 is_stmt 1
 454 0026 2423     		movs	r3, #36
 455 0028 C4F20E23 		movt	r3, 16910
 456 002c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 457 002e 1A60     		str	r2, [r3]
 366:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 458              		.loc 1 366 0
 459 0030 0837     		adds	r7, r7, #8
 460 0032 BD46     		mov	sp, r7
 461              		@ sp needed
 462 0034 80BD     		pop	{r7, pc}
 463              		.cfi_endproc
 464              	.LFE117:
 466 0036 00BF     		.section	.text.PWR_EnterSTOPMode,"ax",%progbits
 467              		.align	2
 468              		.global	PWR_EnterSTOPMode
 469              		.thumb
 470              		.thumb_func
 472              	PWR_EnterSTOPMode:
 473              	.LFB118:
 367:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 368:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 369:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 370:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 371:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 372:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group6 Low Power modes configuration functions
 373:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Low Power modes configuration functions 
 374:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 375:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 376:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 377:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     Low Power modes configuration functions
 378:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 379:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 380:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   The devices feature 3 low-power modes:
 381:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Sleep mode: Cortex-M4 core stopped, peripherals kept running.
 382:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Stop mode: all clocks are stopped, regulator running, regulator in low power mode
 383:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Standby mode: 1.2V domain powered off.
 384:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 385:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Sleep mode
 386:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ===========
 387:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 388:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Sleep mode is entered by using the __WFI() or __WFE() functions.
 389:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 390:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - Any peripheral interrupt acknowledged by the nested vectored interrupt 
 391:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         controller (NVIC) can wake up the device from Sleep mode.
 392:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 393:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Stop mode
 394:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ==========
 395:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    In Stop mode, all clocks in the 1.2V domain are stopped, the PLL, the HSI,
 396:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and the HSE RC oscillators are disabled. Internal SRAM and register contents 
 397:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    are preserved.
 398:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The voltage regulator can be configured either in normal or low-power mode.
 399:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    To minimize the consumption In Stop mode, FLASH can be powered off before 
 400:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    entering the Stop mode. It can be switched on again by software after exiting 
 401:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the Stop mode using the PWR_FlashPowerDownCmd() function. 
 402:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 403:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 404:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Stop mode is entered using the PWR_EnterSTOPMode(PWR_Regulator_LowPower,) 
 405:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         function with regulator in LowPower or with Regulator ON.
 406:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 407:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 408:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 409:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Standby mode
 410:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ============
 411:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The Standby mode allows to achieve the lowest power consumption. It is based 
 412:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    on the Cortex-M4 deepsleep mode, with the voltage regulator disabled. 
 413:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The 1.2V domain is consequently powered off. The PLL, the HSI oscillator and 
 414:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the HSE oscillator are also switched off. SRAM and register contents are lost 
 415:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    except for the RTC registers, RTC backup registers, backup SRAM and Standby 
 416:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    circuitry.
 417:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 418:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The voltage regulator is OFF.
 419:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 420:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 421:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Standby mode is entered using the PWR_EnterSTANDBYMode() function.
 422:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 423:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
 424:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         tamper event, time-stamp event, external reset in NRST pin, IWDG reset.              
 425:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 426:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Auto-wakeup (AWU) from low-power mode
 427:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    =====================================
 428:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
 429:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Wakeup event, a tamper event, a time-stamp event, or a comparator event, 
 430:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    without depending on an external interrupt (Auto-wakeup mode).
 431:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 432:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - RTC auto-wakeup (AWU) from the Stop mode
 433:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      ----------------------------------------
 434:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      
 435:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC alarm event, it is necessary to:
 436:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 17 to be sensitive to rising edges (Interrupt 
 437:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 438:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 439:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 440:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          and RTC_AlarmCmd() functions.
 441:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 442:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        is necessary to:
 443:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 21 to be sensitive to rising edges (Interrupt 
 444:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 445:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 446:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          function
 447:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to detect the tamper or time stamp event using the
 448:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 449:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          functions.
 450:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC WakeUp event, it is necessary to:
 451:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 22 to be sensitive to rising edges (Interrupt 
 452:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 453:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 454:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
 455:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 456:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 457:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - RTC auto-wakeup (AWU) from the Standby mode
 458:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      -------------------------------------------
 459:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC alarm event, it is necessary to:
 460:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 461:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 462:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          and RTC_AlarmCmd() functions.
 463:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC Tamper or time stamp event, it 
 464:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        is necessary to:
 465:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 466:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          function
 467:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to detect the tamper or time stamp event using the
 468:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 469:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          functions.
 470:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC WakeUp event, it is necessary to:
 471:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 472:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
 473:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 474:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 475:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 476:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 477:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 478:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 479:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 480:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STOP mode.
 481:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *   
 482:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 483:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 484:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 485:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 486:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 487:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 488:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         is higher although the startup time is reduced.           
 489:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *     
 490:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 491:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 492:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_ON: STOP mode with regulator ON
 493:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
 494:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 495:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 496:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 497:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 498:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 499:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 500:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 501:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 474              		.loc 1 501 0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 16
 477              		@ frame_needed = 1, uses_anonymous_args = 0
 478 0000 80B5     		push	{r7, lr}
 479              	.LCFI23:
 480              		.cfi_def_cfa_offset 8
 481              		.cfi_offset 7, -8
 482              		.cfi_offset 14, -4
 483 0002 84B0     		sub	sp, sp, #16
 484              	.LCFI24:
 485              		.cfi_def_cfa_offset 24
 486 0004 00AF     		add	r7, sp, #0
 487              	.LCFI25:
 488              		.cfi_def_cfa_register 7
 489 0006 7860     		str	r0, [r7, #4]
 490 0008 0B46     		mov	r3, r1
 491 000a FB70     		strb	r3, [r7, #3]
 502:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 492              		.loc 1 502 0
 493 000c 0023     		movs	r3, #0
 494 000e FB60     		str	r3, [r7, #12]
 503:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 504:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 505:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 495              		.loc 1 505 0
 496 0010 7B68     		ldr	r3, [r7, #4]
 497 0012 002B     		cmp	r3, #0
 498 0014 0AD0     		beq	.L19
 499              		.loc 1 505 0 is_stmt 0 discriminator 1
 500 0016 7B68     		ldr	r3, [r7, #4]
 501 0018 012B     		cmp	r3, #1
 502 001a 07D0     		beq	.L19
 503 001c 40F20000 		movw	r0, #:lower16:.LC0
 504 0020 C0F20000 		movt	r0, #:upper16:.LC0
 505 0024 40F2F911 		movw	r1, #505
 506 0028 FFF7FEFF 		bl	assert_failed
 507              	.L19:
 506:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 508              		.loc 1 506 0 is_stmt 1
 509 002c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 510 002e 012B     		cmp	r3, #1
 511 0030 0AD0     		beq	.L20
 512              		.loc 1 506 0 is_stmt 0 discriminator 1
 513 0032 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 514 0034 022B     		cmp	r3, #2
 515 0036 07D0     		beq	.L20
 516 0038 40F20000 		movw	r0, #:lower16:.LC0
 517 003c C0F20000 		movt	r0, #:upper16:.LC0
 518 0040 4FF4FD71 		mov	r1, #506
 519 0044 FFF7FEFF 		bl	assert_failed
 520              	.L20:
 507:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 508:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 509:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 521              		.loc 1 509 0 is_stmt 1
 522 0048 4FF4E043 		mov	r3, #28672
 523 004c C4F20003 		movt	r3, 16384
 524 0050 1B68     		ldr	r3, [r3]
 525 0052 FB60     		str	r3, [r7, #12]
 510:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PDDS and LPDSR bits */
 511:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_DS_MASK;
 526              		.loc 1 511 0
 527 0054 FB68     		ldr	r3, [r7, #12]
 528 0056 23F00303 		bic	r3, r3, #3
 529 005a FB60     		str	r3, [r7, #12]
 512:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 513:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set LPDSR bit according to PWR_Regulator value */
 514:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator;
 530              		.loc 1 514 0
 531 005c FA68     		ldr	r2, [r7, #12]
 532 005e 7B68     		ldr	r3, [r7, #4]
 533 0060 1343     		orrs	r3, r3, r2
 534 0062 FB60     		str	r3, [r7, #12]
 515:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 516:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 517:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 535              		.loc 1 517 0
 536 0064 4FF4E043 		mov	r3, #28672
 537 0068 C4F20003 		movt	r3, 16384
 538 006c FA68     		ldr	r2, [r7, #12]
 539 006e 1A60     		str	r2, [r3]
 518:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 519:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 520:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 540              		.loc 1 520 0
 541 0070 4FF46D43 		mov	r3, #60672
 542 0074 CEF20003 		movt	r3, 57344
 543 0078 4FF46D42 		mov	r2, #60672
 544 007c CEF20002 		movt	r2, 57344
 545 0080 1269     		ldr	r2, [r2, #16]
 546 0082 42F00402 		orr	r2, r2, #4
 547 0086 1A61     		str	r2, [r3, #16]
 521:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 522:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 523:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 548              		.loc 1 523 0
 549 0088 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 550 008a 012B     		cmp	r3, #1
 551 008c 01D1     		bne	.L21
 552              	.LBB8:
 553              	.LBB9:
 554              		.file 2 "lib/chip/CMSIS/Include/core_cmInstr.h"
   1:lib/chip/CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:lib/chip/CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:lib/chip/CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:lib/chip/CMSIS/Include/core_cmInstr.h ****  * @version  V2.10
   5:lib/chip/CMSIS/Include/core_cmInstr.h ****  * @date     19. July 2011
   6:lib/chip/CMSIS/Include/core_cmInstr.h ****  *
   7:lib/chip/CMSIS/Include/core_cmInstr.h ****  * @note
   8:lib/chip/CMSIS/Include/core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:lib/chip/CMSIS/Include/core_cmInstr.h ****  *
  10:lib/chip/CMSIS/Include/core_cmInstr.h ****  * @par
  11:lib/chip/CMSIS/Include/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:lib/chip/CMSIS/Include/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:lib/chip/CMSIS/Include/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:lib/chip/CMSIS/Include/core_cmInstr.h ****  *
  15:lib/chip/CMSIS/Include/core_cmInstr.h ****  * @par
  16:lib/chip/CMSIS/Include/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:lib/chip/CMSIS/Include/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:lib/chip/CMSIS/Include/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:lib/chip/CMSIS/Include/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:lib/chip/CMSIS/Include/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:lib/chip/CMSIS/Include/core_cmInstr.h ****  *
  22:lib/chip/CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  23:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  24:lib/chip/CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  27:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  28:lib/chip/CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:lib/chip/CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  31:lib/chip/CMSIS/Include/core_cmInstr.h ****   @{
  32:lib/chip/CMSIS/Include/core_cmInstr.h **** */
  33:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  34:lib/chip/CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:lib/chip/CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  36:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  37:lib/chip/CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:lib/chip/CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:lib/chip/CMSIS/Include/core_cmInstr.h **** #endif
  40:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  41:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  42:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  43:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  44:lib/chip/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
  46:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  47:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  48:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  49:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  51:lib/chip/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:lib/chip/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  53:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
  54:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  55:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  56:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  57:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  58:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  59:lib/chip/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:lib/chip/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
  62:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  63:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  64:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  65:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  66:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  67:lib/chip/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
  69:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  70:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  71:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  72:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  74:lib/chip/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:lib/chip/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:lib/chip/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
  78:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  80:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  81:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  83:lib/chip/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:lib/chip/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
  86:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  88:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  89:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  91:lib/chip/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:lib/chip/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
  94:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  96:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  97:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:lib/chip/CMSIS/Include/core_cmInstr.h **** 
  99:lib/chip/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 101:lib/chip/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:lib/chip/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 103:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
 104:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 105:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 106:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 107:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 109:lib/chip/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 111:lib/chip/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:lib/chip/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 113:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
 114:lib/chip/CMSIS/Include/core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:lib/chip/CMSIS/Include/core_cmInstr.h **** {
 116:lib/chip/CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 117:lib/chip/CMSIS/Include/core_cmInstr.h ****   bx lr
 118:lib/chip/CMSIS/Include/core_cmInstr.h **** }
 119:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 120:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 121:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 123:lib/chip/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 125:lib/chip/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:lib/chip/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 127:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
 128:lib/chip/CMSIS/Include/core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:lib/chip/CMSIS/Include/core_cmInstr.h **** {
 130:lib/chip/CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 131:lib/chip/CMSIS/Include/core_cmInstr.h ****   bx lr
 132:lib/chip/CMSIS/Include/core_cmInstr.h **** }
 133:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 134:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 135:lib/chip/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 137:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 139:lib/chip/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 141:lib/chip/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:lib/chip/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 143:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
 144:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __RBIT                            __rbit
 145:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 146:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 147:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 149:lib/chip/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 151:lib/chip/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:lib/chip/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
 154:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 156:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 157:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 159:lib/chip/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 161:lib/chip/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:lib/chip/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
 164:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 166:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 167:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 169:lib/chip/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 171:lib/chip/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:lib/chip/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
 174:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 176:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 177:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 179:lib/chip/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 181:lib/chip/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 182:lib/chip/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:lib/chip/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 184:lib/chip/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 185:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
 186:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 188:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 189:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 191:lib/chip/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 193:lib/chip/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 194:lib/chip/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:lib/chip/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 196:lib/chip/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 197:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
 198:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 200:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 201:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 203:lib/chip/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 205:lib/chip/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 206:lib/chip/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:lib/chip/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 208:lib/chip/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 209:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
 210:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 212:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 213:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 215:lib/chip/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 217:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
 218:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 219:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 220:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 221:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 222:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 223:lib/chip/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 224:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 225:lib/chip/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:lib/chip/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:lib/chip/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 228:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
 229:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 230:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 231:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 232:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 234:lib/chip/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 235:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 236:lib/chip/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:lib/chip/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:lib/chip/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 239:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
 240:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 241:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 242:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 243:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 244:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 245:lib/chip/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 247:lib/chip/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:lib/chip/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 249:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
 250:lib/chip/CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz 
 251:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 252:lib/chip/CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 254:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 255:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 256:lib/chip/CMSIS/Include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:lib/chip/CMSIS/Include/core_cmInstr.h **** /* IAR iccarm specific functions */
 258:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 259:lib/chip/CMSIS/Include/core_cmInstr.h **** #include <cmsis_iar.h>
 260:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 261:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 262:lib/chip/CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:lib/chip/CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 264:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 265:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 266:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 267:lib/chip/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
 269:lib/chip/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:lib/chip/CMSIS/Include/core_cmInstr.h **** {
 271:lib/chip/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 272:lib/chip/CMSIS/Include/core_cmInstr.h **** }
 273:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 274:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 275:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 277:lib/chip/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:lib/chip/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 279:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
 280:lib/chip/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:lib/chip/CMSIS/Include/core_cmInstr.h **** {
 282:lib/chip/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 555              		.loc 2 282 0
 556              	@ 282 "lib/chip/CMSIS/Include/core_cmInstr.h" 1
 557 008e 30BF     		wfi
 558              	@ 0 "" 2
 559              		.thumb
 560              	.LBE9:
 561              	.LBE8:
 562 0090 00E0     		b	.L22
 563              	.L21:
 564              	.LBB10:
 565              	.LBB11:
 283:lib/chip/CMSIS/Include/core_cmInstr.h **** }
 284:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 285:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 286:lib/chip/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 287:lib/chip/CMSIS/Include/core_cmInstr.h **** 
 288:lib/chip/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:lib/chip/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:lib/chip/CMSIS/Include/core_cmInstr.h ****  */
 291:lib/chip/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:lib/chip/CMSIS/Include/core_cmInstr.h **** {
 293:lib/chip/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 566              		.loc 2 293 0
 567              	@ 293 "lib/chip/CMSIS/Include/core_cmInstr.h" 1
 568 0092 20BF     		wfe
 569              	@ 0 "" 2
 570              		.thumb
 571              	.L22:
 572              	.LBE11:
 573              	.LBE10:
 524:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {   
 525:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Interrupt */
 526:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFI();
 527:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 528:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 529:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 530:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Event */
 531:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFE();
 532:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 533:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 534:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 574              		.loc 1 534 0
 575 0094 4FF46D43 		mov	r3, #60672
 576 0098 CEF20003 		movt	r3, 57344
 577 009c 4FF46D42 		mov	r2, #60672
 578 00a0 CEF20002 		movt	r2, 57344
 579 00a4 1269     		ldr	r2, [r2, #16]
 580 00a6 22F00402 		bic	r2, r2, #4
 581 00aa 1A61     		str	r2, [r3, #16]
 535:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 582              		.loc 1 535 0
 583 00ac 1037     		adds	r7, r7, #16
 584 00ae BD46     		mov	sp, r7
 585              		@ sp needed
 586 00b0 80BD     		pop	{r7, pc}
 587              		.cfi_endproc
 588              	.LFE118:
 590 00b2 00BF     		.section	.text.PWR_EnterSTANDBYMode,"ax",%progbits
 591              		.align	2
 592              		.global	PWR_EnterSTANDBYMode
 593              		.thumb
 594              		.thumb_func
 596              	PWR_EnterSTANDBYMode:
 597              	.LFB119:
 536:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 537:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 538:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STANDBY mode.
 539:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Standby mode, all I/O pins are high impedance except for:
 540:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - Reset pad (still available) 
 541:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC 
 542:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 543:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
 544:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - WKUP pin 1 (PA0) if enabled.       
 545:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 546:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 547:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 548:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTANDBYMode(void)
 549:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 598              		.loc 1 549 0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 0
 601              		@ frame_needed = 1, uses_anonymous_args = 0
 602              		@ link register save eliminated.
 603 0000 80B4     		push	{r7}
 604              	.LCFI26:
 605              		.cfi_def_cfa_offset 4
 606              		.cfi_offset 7, -4
 607 0002 00AF     		add	r7, sp, #0
 608              	.LCFI27:
 609              		.cfi_def_cfa_register 7
 550:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear Wakeup flag */
 551:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_CWUF;
 610              		.loc 1 551 0
 611 0004 4FF4E043 		mov	r3, #28672
 612 0008 C4F20003 		movt	r3, 16384
 613 000c 4FF4E042 		mov	r2, #28672
 614 0010 C4F20002 		movt	r2, 16384
 615 0014 1268     		ldr	r2, [r2]
 616 0016 42F00402 		orr	r2, r2, #4
 617 001a 1A60     		str	r2, [r3]
 552:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 553:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STANDBY mode */
 554:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 618              		.loc 1 554 0
 619 001c 4FF4E043 		mov	r3, #28672
 620 0020 C4F20003 		movt	r3, 16384
 621 0024 4FF4E042 		mov	r2, #28672
 622 0028 C4F20002 		movt	r2, 16384
 623 002c 1268     		ldr	r2, [r2]
 624 002e 42F00202 		orr	r2, r2, #2
 625 0032 1A60     		str	r2, [r3]
 555:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 556:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 557:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 626              		.loc 1 557 0
 627 0034 4FF46D43 		mov	r3, #60672
 628 0038 CEF20003 		movt	r3, 57344
 629 003c 4FF46D42 		mov	r2, #60672
 630 0040 CEF20002 		movt	r2, 57344
 631 0044 1269     		ldr	r2, [r2, #16]
 632 0046 42F00402 		orr	r2, r2, #4
 633 004a 1A61     		str	r2, [r3, #16]
 634              	.LBB12:
 635              	.LBB13:
 282:lib/chip/CMSIS/Include/core_cmInstr.h **** }
 636              		.loc 2 282 0
 637              	@ 282 "lib/chip/CMSIS/Include/core_cmInstr.h" 1
 638 004c 30BF     		wfi
 639              	@ 0 "" 2
 640              		.thumb
 641              	.LBE13:
 642              	.LBE12:
 558:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 559:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* This option is used to ensure that store operations are completed */
 560:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined ( __CC_ARM   )
 561:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __force_stores();
 562:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif
 563:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Request Wait For Interrupt */
 564:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __WFI();
 565:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 643              		.loc 1 565 0
 644 004e BD46     		mov	sp, r7
 645              		@ sp needed
 646 0050 5DF8047B 		ldr	r7, [sp], #4
 647 0054 7047     		bx	lr
 648              		.cfi_endproc
 649              	.LFE119:
 651 0056 00BF     		.section	.text.PWR_GetFlagStatus,"ax",%progbits
 652              		.align	2
 653              		.global	PWR_GetFlagStatus
 654              		.thumb
 655              		.thumb_func
 657              	PWR_GetFlagStatus:
 658              	.LFB120:
 566:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 567:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 568:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 569:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 570:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 571:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group7 Flags management functions
 572:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Flags management functions 
 573:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 574:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 575:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 576:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                            Flags management functions
 577:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 578:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 579:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 580:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 581:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 582:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 583:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 584:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 585:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 586:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 587:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag. This flag indicates that a wakeup event 
 588:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  was received from the WKUP pin or from the RTC alarm (Alarm A 
 589:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or Alarm B), RTC Tamper event, RTC TimeStamp event or RTC Wakeup.
 590:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  An additional wakeup event is detected if the WKUP pin is enabled 
 591:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  (by setting the EWUP bit) when the WKUP pin level is already high.  
 592:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag. This flag indicates that the system was
 593:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  resumed from StandBy mode.    
 594:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD is enabled 
 595:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  by the PWR_PVDCmd() function. The PVD is stopped by Standby mode 
 596:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  For this reason, this bit is equal to 0 after Standby or reset
 597:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  until the PVDE bit is set.
 598:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_BRR: Backup regulator ready flag. This bit is not reset 
 599:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  when the device wakes up from Standby mode or by a system reset 
 600:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or power reset.  
 601:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_VOSRDY: This flag indicates that the Regulator voltage 
 602:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                 scaling output selection is ready. 
 603:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 604:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 605:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 606:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 659              		.loc 1 606 0
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 16
 662              		@ frame_needed = 1, uses_anonymous_args = 0
 663 0000 80B5     		push	{r7, lr}
 664              	.LCFI28:
 665              		.cfi_def_cfa_offset 8
 666              		.cfi_offset 7, -8
 667              		.cfi_offset 14, -4
 668 0002 84B0     		sub	sp, sp, #16
 669              	.LCFI29:
 670              		.cfi_def_cfa_offset 24
 671 0004 00AF     		add	r7, sp, #0
 672              	.LCFI30:
 673              		.cfi_def_cfa_register 7
 674 0006 7860     		str	r0, [r7, #4]
 607:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   FlagStatus bitstatus = RESET;
 675              		.loc 1 607 0
 676 0008 0023     		movs	r3, #0
 677 000a FB73     		strb	r3, [r7, #15]
 608:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 609:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 610:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 678              		.loc 1 610 0
 679 000c 7B68     		ldr	r3, [r7, #4]
 680 000e 012B     		cmp	r3, #1
 681 0010 14D0     		beq	.L25
 682              		.loc 1 610 0 is_stmt 0 discriminator 1
 683 0012 7B68     		ldr	r3, [r7, #4]
 684 0014 022B     		cmp	r3, #2
 685 0016 11D0     		beq	.L25
 686 0018 7B68     		ldr	r3, [r7, #4]
 687 001a 042B     		cmp	r3, #4
 688 001c 0ED0     		beq	.L25
 689 001e 7B68     		ldr	r3, [r7, #4]
 690 0020 082B     		cmp	r3, #8
 691 0022 0BD0     		beq	.L25
 692 0024 7B68     		ldr	r3, [r7, #4]
 693 0026 B3F5804F 		cmp	r3, #16384
 694 002a 07D0     		beq	.L25
 695 002c 40F20000 		movw	r0, #:lower16:.LC0
 696 0030 C0F20000 		movt	r0, #:upper16:.LC0
 697 0034 40F26221 		movw	r1, #610
 698 0038 FFF7FEFF 		bl	assert_failed
 699              	.L25:
 611:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 612:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 700              		.loc 1 612 0 is_stmt 1
 701 003c 4FF4E043 		mov	r3, #28672
 702 0040 C4F20003 		movt	r3, 16384
 703 0044 5A68     		ldr	r2, [r3, #4]
 704 0046 7B68     		ldr	r3, [r7, #4]
 705 0048 1340     		ands	r3, r3, r2
 706 004a 002B     		cmp	r3, #0
 707 004c 02D0     		beq	.L26
 613:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 614:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = SET;
 708              		.loc 1 614 0
 709 004e 0123     		movs	r3, #1
 710 0050 FB73     		strb	r3, [r7, #15]
 711 0052 01E0     		b	.L27
 712              	.L26:
 615:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 616:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 617:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 618:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = RESET;
 713              		.loc 1 618 0
 714 0054 0023     		movs	r3, #0
 715 0056 FB73     		strb	r3, [r7, #15]
 716              	.L27:
 619:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 620:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Return the flag status */
 621:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   return bitstatus;
 717              		.loc 1 621 0
 718 0058 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 622:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 719              		.loc 1 622 0
 720 005a 1846     		mov	r0, r3
 721 005c 1037     		adds	r7, r7, #16
 722 005e BD46     		mov	sp, r7
 723              		@ sp needed
 724 0060 80BD     		pop	{r7, pc}
 725              		.cfi_endproc
 726              	.LFE120:
 728 0062 00BF     		.section	.text.PWR_ClearFlag,"ax",%progbits
 729              		.align	2
 730              		.global	PWR_ClearFlag
 731              		.thumb
 732              		.thumb_func
 734              	PWR_ClearFlag:
 735              	.LFB121:
 623:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 624:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 625:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Clears the PWR's pending flags.
 626:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
 627:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 628:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag
 629:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag
 630:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 631:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 632:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
 633:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 736              		.loc 1 633 0
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 8
 739              		@ frame_needed = 1, uses_anonymous_args = 0
 740 0000 80B5     		push	{r7, lr}
 741              	.LCFI31:
 742              		.cfi_def_cfa_offset 8
 743              		.cfi_offset 7, -8
 744              		.cfi_offset 14, -4
 745 0002 82B0     		sub	sp, sp, #8
 746              	.LCFI32:
 747              		.cfi_def_cfa_offset 16
 748 0004 00AF     		add	r7, sp, #0
 749              	.LCFI33:
 750              		.cfi_def_cfa_register 7
 751 0006 7860     		str	r0, [r7, #4]
 634:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 635:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 752              		.loc 1 635 0
 753 0008 7B68     		ldr	r3, [r7, #4]
 754 000a 012B     		cmp	r3, #1
 755 000c 0AD0     		beq	.L30
 756              		.loc 1 635 0 is_stmt 0 discriminator 1
 757 000e 7B68     		ldr	r3, [r7, #4]
 758 0010 022B     		cmp	r3, #2
 759 0012 07D0     		beq	.L30
 760 0014 40F20000 		movw	r0, #:lower16:.LC0
 761 0018 C0F20000 		movt	r0, #:upper16:.LC0
 762 001c 40F27B21 		movw	r1, #635
 763 0020 FFF7FEFF 		bl	assert_failed
 764              	.L30:
 636:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          
 637:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
 765              		.loc 1 637 0 is_stmt 1
 766 0024 4FF4E043 		mov	r3, #28672
 767 0028 C4F20003 		movt	r3, 16384
 768 002c 4FF4E042 		mov	r2, #28672
 769 0030 C4F20002 		movt	r2, 16384
 770 0034 1168     		ldr	r1, [r2]
 771 0036 7A68     		ldr	r2, [r7, #4]
 772 0038 9200     		lsls	r2, r2, #2
 773 003a 0A43     		orrs	r2, r2, r1
 774 003c 1A60     		str	r2, [r3]
 638:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 775              		.loc 1 638 0
 776 003e 0837     		adds	r7, r7, #8
 777 0040 BD46     		mov	sp, r7
 778              		@ sp needed
 779 0042 80BD     		pop	{r7, pc}
 780              		.cfi_endproc
 781              	.LFE121:
 783              		.text
 784              	.Letext0:
 785              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 786              		.file 4 "/usr/include/newlib/stdint.h"
 787              		.file 5 "lib/chip/CMSIS/Include/core_cm4.h"
 788              		.file 6 "lib/chip/CMSIS/ST/STM32F4xx/Include/stm32f4xx.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_pwr.c
     /tmp/cciz9aV3.s:20     .text.PWR_DeInit:00000000 $t
     /tmp/cciz9aV3.s:25     .text.PWR_DeInit:00000000 PWR_DeInit
     /tmp/cciz9aV3.s:54     .rodata:00000000 $d
     /tmp/cciz9aV3.s:55     .rodata:00000000 .LC0
     /tmp/cciz9aV3.s:59     .text.PWR_BackupAccessCmd:00000000 $t
     /tmp/cciz9aV3.s:64     .text.PWR_BackupAccessCmd:00000000 PWR_BackupAccessCmd
     /tmp/cciz9aV3.s:110    .text.PWR_PVDLevelConfig:00000000 $t
     /tmp/cciz9aV3.s:115    .text.PWR_PVDLevelConfig:00000000 PWR_PVDLevelConfig
     /tmp/cciz9aV3.s:195    .text.PWR_PVDCmd:00000000 $t
     /tmp/cciz9aV3.s:200    .text.PWR_PVDCmd:00000000 PWR_PVDCmd
     /tmp/cciz9aV3.s:246    .text.PWR_WakeUpPinCmd:00000000 $t
     /tmp/cciz9aV3.s:251    .text.PWR_WakeUpPinCmd:00000000 PWR_WakeUpPinCmd
     /tmp/cciz9aV3.s:297    .text.PWR_BackupRegulatorCmd:00000000 $t
     /tmp/cciz9aV3.s:302    .text.PWR_BackupRegulatorCmd:00000000 PWR_BackupRegulatorCmd
     /tmp/cciz9aV3.s:348    .text.PWR_MainRegulatorModeConfig:00000000 $t
     /tmp/cciz9aV3.s:353    .text.PWR_MainRegulatorModeConfig:00000000 PWR_MainRegulatorModeConfig
     /tmp/cciz9aV3.s:416    .text.PWR_FlashPowerDownCmd:00000000 $t
     /tmp/cciz9aV3.s:421    .text.PWR_FlashPowerDownCmd:00000000 PWR_FlashPowerDownCmd
     /tmp/cciz9aV3.s:467    .text.PWR_EnterSTOPMode:00000000 $t
     /tmp/cciz9aV3.s:472    .text.PWR_EnterSTOPMode:00000000 PWR_EnterSTOPMode
     /tmp/cciz9aV3.s:591    .text.PWR_EnterSTANDBYMode:00000000 $t
     /tmp/cciz9aV3.s:596    .text.PWR_EnterSTANDBYMode:00000000 PWR_EnterSTANDBYMode
     /tmp/cciz9aV3.s:652    .text.PWR_GetFlagStatus:00000000 $t
     /tmp/cciz9aV3.s:657    .text.PWR_GetFlagStatus:00000000 PWR_GetFlagStatus
     /tmp/cciz9aV3.s:729    .text.PWR_ClearFlag:00000000 $t
     /tmp/cciz9aV3.s:734    .text.PWR_ClearFlag:00000000 PWR_ClearFlag
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
assert_failed
