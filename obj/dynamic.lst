   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"dynamic.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.xContinuousIncrementHandle,"aw",%nobits
  20              		.align	2
  23              	xContinuousIncrementHandle:
  24 0000 00000000 		.space	4
  25              		.section	.bss.xLimitedIncrementHandle,"aw",%nobits
  26              		.align	2
  29              	xLimitedIncrementHandle:
  30 0000 00000000 		.space	4
  31              		.section	.bss.ulCounter,"aw",%nobits
  32              		.align	2
  35              	ulCounter:
  36 0000 00000000 		.space	4
  37              		.section	.bss.usCheckVariable,"aw",%nobits
  38              		.align	1
  41              	usCheckVariable:
  42 0000 0000     		.space	2
  43              		.section	.bss.xSuspendedQueueSendError,"aw",%nobits
  44              		.align	2
  47              	xSuspendedQueueSendError:
  48 0000 00000000 		.space	4
  49              		.section	.bss.xSuspendedQueueReceiveError,"aw",%nobits
  50              		.align	2
  53              	xSuspendedQueueReceiveError:
  54 0000 00000000 		.space	4
  55              		.comm	xSuspendedTestQueue,4,4
  56              		.section	.bss.ulExpectedValue,"aw",%nobits
  57              		.align	2
  60              	ulExpectedValue:
  61 0000 00000000 		.space	4
  62              		.section	.rodata
  63              		.align	2
  64              	.LC0:
  65 0000 53757370 		.ascii	"Suspended_Test_Queue\000"
  65      656E6465 
  65      645F5465 
  65      73745F51 
  65      75657565 
  66 0015 000000   		.align	2
  67              	.LC1:
  68 0018 434E545F 		.ascii	"CNT_INC\000"
  68      494E4300 
  69              		.align	2
  70              	.LC2:
  71 0020 4C494D5F 		.ascii	"LIM_INC\000"
  71      494E4300 
  72              		.align	2
  73              	.LC3:
  74 0028 435F4354 		.ascii	"C_CTRL\000"
  74      524C00
  75 002f 00       		.align	2
  76              	.LC4:
  77 0030 53555350 		.ascii	"SUSP_TX\000"
  77      5F545800 
  78              		.align	2
  79              	.LC5:
  80 0038 53555350 		.ascii	"SUSP_RX\000"
  80      5F525800 
  81              		.section	.text.vStartDynamicPriorityTasks,"ax",%progbits
  82              		.align	2
  83              		.global	vStartDynamicPriorityTasks
  84              		.thumb
  85              		.thumb_func
  87              	vStartDynamicPriorityTasks:
  88              	.LFB1:
  89              		.file 1 "lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c"
   1:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*
   2:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     FreeRTOS V8.1.2 - Copyright (C) 2014 Real Time Engineers Ltd.
   3:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     All rights reserved
   4:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
   5:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
   7:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     ***************************************************************************
   8:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *                                                                       *
   9:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    platform software that has become a de facto standard.             *
  12:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *                                                                       *
  13:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *                                                                       *
  17:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    Thank you!                                                         *
  18:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *                                                                       *
  19:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     ***************************************************************************
  20:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  21:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     This file is part of the FreeRTOS distribution.
  22:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  23:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  27:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  28:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  29:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  30:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  31:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  32:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     link: http://www.freertos.org/a00114.html
  36:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  37:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     1 tab == 4 spaces!
  38:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  39:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     ***************************************************************************
  40:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *                                                                       *
  41:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    not run, what could be wrong?"                                     *
  43:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *                                                                       *
  44:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****      *                                                                       *
  46:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     ***************************************************************************
  47:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  48:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     license and Real Time Engineers Ltd. contact details.
  50:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  51:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  55:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     licenses offer ticketed support, indemnification and middleware.
  58:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  59:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     engineered and independently SIL3 certified version for use in safety and
  61:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     mission critical applications that require provable dependability.
  62:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  63:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****     1 tab == 4 spaces!
  64:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** */
  65:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
  66:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*
  67:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * The first test creates three tasks - two counter tasks (one continuous count
  68:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * and one limited count) and one controller.  A "count" variable is shared
  69:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * between all three tasks.  The two counter tasks should never be in a "ready"
  70:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * state at the same time.  The controller task runs at the same priority as
  71:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * the continuous count task, and at a lower priority than the limited count
  72:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * task.
  73:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  *
  74:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * One counter task loops indefinitely, incrementing the shared count variable
  75:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * on each iteration.  To ensure it has exclusive access to the variable it
  76:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * raises its priority above that of the controller task before each
  77:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * increment, lowering it again to its original priority before starting the
  78:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * next iteration.
  79:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  *
  80:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * The other counter task increments the shared count variable on each
  81:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * iteration of its loop until the count has reached a limit of 0xff - at
  82:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * which point it suspends itself.  It will not start a new loop until the
  83:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * controller task has made it "ready" again by calling vTaskResume().
  84:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * This second counter task operates at a higher priority than controller
  85:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * task so does not need to worry about mutual exclusion of the counter
  86:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * variable.
  87:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  *
  88:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * The controller task is in two sections.  The first section controls and
  89:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * monitors the continuous count task.  When this section is operational the
  90:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * limited count task is suspended.  Likewise, the second section controls
  91:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * and monitors the limited count task.  When this section is operational the
  92:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * continuous count task is suspended.
  93:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  *
  94:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * In the first section the controller task first takes a copy of the shared
  95:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * count variable.  To ensure mutual exclusion on the count variable it
  96:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * suspends the continuous count task, resuming it again when the copy has been
  97:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * taken.  The controller task then sleeps for a fixed period - during which
  98:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * the continuous count task will execute and increment the shared variable.
  99:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * When the controller task wakes it checks that the continuous count task
 100:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * has executed by comparing the copy of the shared variable with its current
 101:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * value.  This time, to ensure mutual exclusion, the scheduler itself is
 102:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * suspended with a call to vTaskSuspendAll ().  This is for demonstration
 103:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * purposes only and is not a recommended technique due to its inefficiency.
 104:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  *
 105:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * After a fixed number of iterations the controller task suspends the
 106:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * continuous count task, and moves on to its second section.
 107:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  *
 108:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * At the start of the second section the shared variable is cleared to zero.
 109:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * The limited count task is then woken from its suspension by a call to
 110:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * vTaskResume ().  As this counter task operates at a higher priority than
 111:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * the controller task the controller task should not run again until the
 112:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * shared variable has been counted up to the limited value causing the counter
 113:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * task to suspend itself.  The next line after vTaskResume () is therefore
 114:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * a check on the shared variable to ensure everything is as expected.
 115:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  *
 116:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  *
 117:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * The second test consists of a couple of very simple tasks that post onto a
 118:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * queue while the scheduler is suspended.  This test was added to test parts
 119:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * of the scheduler not exercised by the first test.
 120:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  *
 121:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  */
 122:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 123:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** #include <stdlib.h>
 124:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 125:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Scheduler include files. */
 126:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** #include "FreeRTOS.h"
 127:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** #include "task.h"
 128:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** #include "semphr.h"
 129:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 130:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Demo app include files. */
 131:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** #include "dynamic.h"
 132:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 133:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Function that implements the "limited count" task as described above. */
 134:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vLimitedIncrementTask, pvParameters );
 135:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 136:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Function that implements the "continuous count" task as described above. */
 137:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vContinuousIncrementTask, pvParameters );
 138:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 139:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Function that implements the controller task as described above. */
 140:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vCounterControlTask, pvParameters );
 141:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 142:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vQueueReceiveWhenSuspendedTask, pvParameters );
 143:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vQueueSendWhenSuspendedTask, pvParameters );
 144:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 145:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Demo task specific constants. */
 146:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** #define priSTACK_SIZE				( configMINIMAL_STACK_SIZE )
 147:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** #define priSLEEP_TIME				( ( TickType_t ) 128 / portTICK_PERIOD_MS )
 148:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** #define priLOOPS					( 5 )
 149:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** #define priMAX_COUNT				( ( uint32_t ) 0xff )
 150:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** #define priNO_BLOCK					( ( TickType_t ) 0 )
 151:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** #define priSUSPENDED_QUEUE_LENGTH	( 1 )
 152:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 153:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 154:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 155:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Handles to the two counter tasks.  These could be passed in as parameters
 156:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** to the controller task to prevent them having to be file scope. */
 157:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** static TaskHandle_t xContinuousIncrementHandle, xLimitedIncrementHandle;
 158:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 159:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* The shared counter variable.  This is passed in as a parameter to the two
 160:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** counter variables for demonstration purposes. */
 161:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** static volatile uint32_t ulCounter;
 162:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 163:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Variables used to check that the tasks are still operating without error.
 164:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** Each complete iteration of the controller task increments this variable
 165:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** provided no errors have been found.  The variable maintaining the same value
 166:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** is therefore indication of an error. */
 167:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** static volatile uint16_t usCheckVariable = ( uint16_t ) 0;
 168:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** static volatile BaseType_t xSuspendedQueueSendError = pdFALSE;
 169:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** static volatile BaseType_t xSuspendedQueueReceiveError = pdFALSE;
 170:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 171:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Queue used by the second test. */
 172:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** QueueHandle_t xSuspendedTestQueue;
 173:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 174:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* The value the queue receive task expects to receive next.  This is file
 175:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** scope so xAreDynamicPriorityTasksStillRunning() can ensure it is still
 176:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** incrementing. */
 177:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** static uint32_t ulExpectedValue = ( uint32_t ) 0;
 178:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 179:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 180:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*
 181:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * Start the three tasks as described at the top of the file.
 182:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * Note that the limited count task is given a higher priority.
 183:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  */
 184:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** void vStartDynamicPriorityTasks( void )
 185:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
  90              		.loc 1 185 0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 1, uses_anonymous_args = 0
  94 0000 80B5     		push	{r7, lr}
  95              	.LCFI0:
  96              		.cfi_def_cfa_offset 8
  97              		.cfi_offset 7, -8
  98              		.cfi_offset 14, -4
  99 0002 84B0     		sub	sp, sp, #16
 100              	.LCFI1:
 101              		.cfi_def_cfa_offset 24
 102 0004 04AF     		add	r7, sp, #16
 103              	.LCFI2:
 104              		.cfi_def_cfa 7, 8
 186:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( uint32_t ) );
 105              		.loc 1 186 0
 106 0006 0120     		movs	r0, #1
 107 0008 0421     		movs	r1, #4
 108 000a 0022     		movs	r2, #0
 109 000c FFF7FEFF 		bl	xQueueGenericCreate
 110 0010 0246     		mov	r2, r0
 111 0012 40F20003 		movw	r3, #:lower16:xSuspendedTestQueue
 112 0016 C0F20003 		movt	r3, #:upper16:xSuspendedTestQueue
 113 001a 1A60     		str	r2, [r3]
 187:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 188:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
 189:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	in use.  The queue registry is provided as a means for kernel aware
 190:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	debuggers to locate queues and has no purpose if a kernel aware debugger
 191:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	is not being used.  The call to vQueueAddToRegistry() will be removed
 192:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
 193:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	defined to be less than 1. */
 194:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	vQueueAddToRegistry( xSuspendedTestQueue, "Suspended_Test_Queue" );
 114              		.loc 1 194 0
 115 001c 40F20003 		movw	r3, #:lower16:xSuspendedTestQueue
 116 0020 C0F20003 		movt	r3, #:upper16:xSuspendedTestQueue
 117 0024 1B68     		ldr	r3, [r3]
 118 0026 1846     		mov	r0, r3
 119 0028 40F20001 		movw	r1, #:lower16:.LC0
 120 002c C0F20001 		movt	r1, #:upper16:.LC0
 121 0030 FFF7FEFF 		bl	vQueueAddToRegistry
 195:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 196:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xTaskCreate( vContinuousIncrementTask, "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PR
 122              		.loc 1 196 0
 123 0034 0023     		movs	r3, #0
 124 0036 0093     		str	r3, [sp]
 125 0038 40F20003 		movw	r3, #:lower16:xContinuousIncrementHandle
 126 003c C0F20003 		movt	r3, #:upper16:xContinuousIncrementHandle
 127 0040 0193     		str	r3, [sp, #4]
 128 0042 0023     		movs	r3, #0
 129 0044 0293     		str	r3, [sp, #8]
 130 0046 0023     		movs	r3, #0
 131 0048 0393     		str	r3, [sp, #12]
 132 004a 40F20000 		movw	r0, #:lower16:vContinuousIncrementTask
 133 004e C0F20000 		movt	r0, #:upper16:vContinuousIncrementTask
 134 0052 40F20001 		movw	r1, #:lower16:.LC1
 135 0056 C0F20001 		movt	r1, #:upper16:.LC1
 136 005a 8222     		movs	r2, #130
 137 005c 40F20003 		movw	r3, #:lower16:ulCounter
 138 0060 C0F20003 		movt	r3, #:upper16:ulCounter
 139 0064 FFF7FEFF 		bl	xTaskGenericCreate
 197:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xTaskCreate( vLimitedIncrementTask, "LIM_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIOR
 140              		.loc 1 197 0
 141 0068 0123     		movs	r3, #1
 142 006a 0093     		str	r3, [sp]
 143 006c 40F20003 		movw	r3, #:lower16:xLimitedIncrementHandle
 144 0070 C0F20003 		movt	r3, #:upper16:xLimitedIncrementHandle
 145 0074 0193     		str	r3, [sp, #4]
 146 0076 0023     		movs	r3, #0
 147 0078 0293     		str	r3, [sp, #8]
 148 007a 0023     		movs	r3, #0
 149 007c 0393     		str	r3, [sp, #12]
 150 007e 40F20000 		movw	r0, #:lower16:vLimitedIncrementTask
 151 0082 C0F20000 		movt	r0, #:upper16:vLimitedIncrementTask
 152 0086 40F20001 		movw	r1, #:lower16:.LC2
 153 008a C0F20001 		movt	r1, #:upper16:.LC2
 154 008e 8222     		movs	r2, #130
 155 0090 40F20003 		movw	r3, #:lower16:ulCounter
 156 0094 C0F20003 		movt	r3, #:upper16:ulCounter
 157 0098 FFF7FEFF 		bl	xTaskGenericCreate
 198:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xTaskCreate( vCounterControlTask, "C_CTRL", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 158              		.loc 1 198 0
 159 009c 0023     		movs	r3, #0
 160 009e 0093     		str	r3, [sp]
 161 00a0 0023     		movs	r3, #0
 162 00a2 0193     		str	r3, [sp, #4]
 163 00a4 0023     		movs	r3, #0
 164 00a6 0293     		str	r3, [sp, #8]
 165 00a8 0023     		movs	r3, #0
 166 00aa 0393     		str	r3, [sp, #12]
 167 00ac 40F20000 		movw	r0, #:lower16:vCounterControlTask
 168 00b0 C0F20000 		movt	r0, #:upper16:vCounterControlTask
 169 00b4 40F20001 		movw	r1, #:lower16:.LC3
 170 00b8 C0F20001 		movt	r1, #:upper16:.LC3
 171 00bc 8222     		movs	r2, #130
 172 00be 0023     		movs	r3, #0
 173 00c0 FFF7FEFF 		bl	xTaskGenericCreate
 199:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xTaskCreate( vQueueSendWhenSuspendedTask, "SUSP_TX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL )
 174              		.loc 1 199 0
 175 00c4 0023     		movs	r3, #0
 176 00c6 0093     		str	r3, [sp]
 177 00c8 0023     		movs	r3, #0
 178 00ca 0193     		str	r3, [sp, #4]
 179 00cc 0023     		movs	r3, #0
 180 00ce 0293     		str	r3, [sp, #8]
 181 00d0 0023     		movs	r3, #0
 182 00d2 0393     		str	r3, [sp, #12]
 183 00d4 40F20000 		movw	r0, #:lower16:vQueueSendWhenSuspendedTask
 184 00d8 C0F20000 		movt	r0, #:upper16:vQueueSendWhenSuspendedTask
 185 00dc 40F20001 		movw	r1, #:lower16:.LC4
 186 00e0 C0F20001 		movt	r1, #:upper16:.LC4
 187 00e4 8222     		movs	r2, #130
 188 00e6 0023     		movs	r3, #0
 189 00e8 FFF7FEFF 		bl	xTaskGenericCreate
 200:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	xTaskCreate( vQueueReceiveWhenSuspendedTask, "SUSP_RX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NUL
 190              		.loc 1 200 0
 191 00ec 0023     		movs	r3, #0
 192 00ee 0093     		str	r3, [sp]
 193 00f0 0023     		movs	r3, #0
 194 00f2 0193     		str	r3, [sp, #4]
 195 00f4 0023     		movs	r3, #0
 196 00f6 0293     		str	r3, [sp, #8]
 197 00f8 0023     		movs	r3, #0
 198 00fa 0393     		str	r3, [sp, #12]
 199 00fc 40F20000 		movw	r0, #:lower16:vQueueReceiveWhenSuspendedTask
 200 0100 C0F20000 		movt	r0, #:upper16:vQueueReceiveWhenSuspendedTask
 201 0104 40F20001 		movw	r1, #:lower16:.LC5
 202 0108 C0F20001 		movt	r1, #:upper16:.LC5
 203 010c 8222     		movs	r2, #130
 204 010e 0023     		movs	r3, #0
 205 0110 FFF7FEFF 		bl	xTaskGenericCreate
 201:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** }
 206              		.loc 1 201 0
 207 0114 BD46     		mov	sp, r7
 208              		@ sp needed
 209 0116 80BD     		pop	{r7, pc}
 210              		.cfi_endproc
 211              	.LFE1:
 213              		.section	.text.vLimitedIncrementTask,"ax",%progbits
 214              		.align	2
 215              		.thumb
 216              		.thumb_func
 218              	vLimitedIncrementTask:
 219              	.LFB2:
 202:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 203:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 204:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*
 205:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * Just loops around incrementing the shared variable until the limit has been
 206:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * reached.  Once the limit has been reached it suspends itself.
 207:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  */
 208:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION( vLimitedIncrementTask, pvParameters )
 209:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 220              		.loc 1 209 0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 16
 223              		@ frame_needed = 1, uses_anonymous_args = 0
 224 0000 80B5     		push	{r7, lr}
 225              	.LCFI3:
 226              		.cfi_def_cfa_offset 8
 227              		.cfi_offset 7, -8
 228              		.cfi_offset 14, -4
 229 0002 84B0     		sub	sp, sp, #16
 230              	.LCFI4:
 231              		.cfi_def_cfa_offset 24
 232 0004 00AF     		add	r7, sp, #0
 233              	.LCFI5:
 234              		.cfi_def_cfa_register 7
 235 0006 7860     		str	r0, [r7, #4]
 210:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** uint32_t *pulCounter;
 211:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 212:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	/* Take a pointer to the shared variable from the parameters passed into
 213:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	the task. */
 214:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	pulCounter = ( uint32_t * ) pvParameters;
 236              		.loc 1 214 0
 237 0008 7B68     		ldr	r3, [r7, #4]
 238 000a FB60     		str	r3, [r7, #12]
 215:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 216:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	/* This will run before the control task, so the first thing it does is
 217:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	suspend - the control task will resume it when ready. */
 218:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	vTaskSuspend( NULL );
 239              		.loc 1 218 0
 240 000c 0020     		movs	r0, #0
 241 000e FFF7FEFF 		bl	vTaskSuspend
 242              	.L4:
 219:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 220:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	for( ;; )
 221:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	{
 222:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Just count up to a value then suspend. */
 223:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		( *pulCounter )++;
 243              		.loc 1 223 0
 244 0012 FB68     		ldr	r3, [r7, #12]
 245 0014 1B68     		ldr	r3, [r3]
 246 0016 5A1C     		adds	r2, r3, #1
 247 0018 FB68     		ldr	r3, [r7, #12]
 248 001a 1A60     		str	r2, [r3]
 224:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 225:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		if( *pulCounter >= priMAX_COUNT )
 249              		.loc 1 225 0
 250 001c FB68     		ldr	r3, [r7, #12]
 251 001e 1B68     		ldr	r3, [r3]
 252 0020 FE2B     		cmp	r3, #254
 253 0022 03D9     		bls	.L3
 226:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 227:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspend( NULL );
 254              		.loc 1 227 0
 255 0024 0020     		movs	r0, #0
 256 0026 FFF7FEFF 		bl	vTaskSuspend
 228:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		}
 229:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	}
 257              		.loc 1 229 0
 258 002a F2E7     		b	.L4
 259              	.L3:
 260 002c F1E7     		b	.L4
 261              		.cfi_endproc
 262              	.LFE2:
 264 002e 00BF     		.section	.text.vContinuousIncrementTask,"ax",%progbits
 265              		.align	2
 266              		.thumb
 267              		.thumb_func
 269              	vContinuousIncrementTask:
 270              	.LFB3:
 230:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** }
 231:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 232:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 233:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*
 234:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * Just keep counting the shared variable up.  The control task will suspend
 235:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * this task when it wants.
 236:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  */
 237:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION( vContinuousIncrementTask, pvParameters )
 238:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 271              		.loc 1 238 0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 16
 274              		@ frame_needed = 1, uses_anonymous_args = 0
 275 0000 80B5     		push	{r7, lr}
 276              	.LCFI6:
 277              		.cfi_def_cfa_offset 8
 278              		.cfi_offset 7, -8
 279              		.cfi_offset 14, -4
 280 0002 84B0     		sub	sp, sp, #16
 281              	.LCFI7:
 282              		.cfi_def_cfa_offset 24
 283 0004 00AF     		add	r7, sp, #0
 284              	.LCFI8:
 285              		.cfi_def_cfa_register 7
 286 0006 7860     		str	r0, [r7, #4]
 239:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** volatile uint32_t *pulCounter;
 240:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** UBaseType_t uxOurPriority;
 241:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 242:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	/* Take a pointer to the shared variable from the parameters passed into
 243:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	the task. */
 244:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	pulCounter = ( uint32_t * ) pvParameters;
 287              		.loc 1 244 0
 288 0008 7B68     		ldr	r3, [r7, #4]
 289 000a FB60     		str	r3, [r7, #12]
 245:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 246:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	/* Query our priority so we can raise it when exclusive access to the
 247:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	shared variable is required. */
 248:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	uxOurPriority = uxTaskPriorityGet( NULL );
 290              		.loc 1 248 0
 291 000c 0020     		movs	r0, #0
 292 000e FFF7FEFF 		bl	uxTaskPriorityGet
 293 0012 B860     		str	r0, [r7, #8]
 294              	.L10:
 249:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 250:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	for( ;; )
 251:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	{
 252:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Raise the priority above the controller task to ensure a context
 253:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		switch does not occur while the variable is being accessed. */
 254:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskPrioritySet( NULL, uxOurPriority + 1 );
 295              		.loc 1 254 0
 296 0014 BB68     		ldr	r3, [r7, #8]
 297 0016 0133     		adds	r3, r3, #1
 298 0018 0020     		movs	r0, #0
 299 001a 1946     		mov	r1, r3
 300 001c FFF7FEFF 		bl	vTaskPrioritySet
 255:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 256:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			configASSERT( ( uxTaskPriorityGet( NULL ) == ( uxOurPriority + 1 ) ) );
 301              		.loc 1 256 0
 302 0020 0020     		movs	r0, #0
 303 0022 FFF7FEFF 		bl	uxTaskPriorityGet
 304 0026 0246     		mov	r2, r0
 305 0028 BB68     		ldr	r3, [r7, #8]
 306 002a 0133     		adds	r3, r3, #1
 307 002c 9A42     		cmp	r2, r3
 308 002e 02D0     		beq	.L6
 309              		.loc 1 256 0 is_stmt 0 discriminator 1
 310 0030 FFF7FEFF 		bl	ulPortSetInterruptMask
 311              	.L7:
 312 0034 FEE7     		b	.L7
 313              	.L6:
 257:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			( *pulCounter )++;
 314              		.loc 1 257 0 is_stmt 1
 315 0036 FB68     		ldr	r3, [r7, #12]
 316 0038 1B68     		ldr	r3, [r3]
 317 003a 5A1C     		adds	r2, r3, #1
 318 003c FB68     		ldr	r3, [r7, #12]
 319 003e 1A60     		str	r2, [r3]
 258:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		}
 259:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskPrioritySet( NULL, uxOurPriority );
 320              		.loc 1 259 0
 321 0040 0020     		movs	r0, #0
 322 0042 B968     		ldr	r1, [r7, #8]
 323 0044 FFF7FEFF 		bl	vTaskPrioritySet
 260:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 261:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		#if( configUSE_PREEMPTION == 0 )
 262:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			taskYIELD();
 263:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		#endif
 264:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 265:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		configASSERT( ( uxTaskPriorityGet( NULL ) == uxOurPriority ) );
 324              		.loc 1 265 0
 325 0048 0020     		movs	r0, #0
 326 004a FFF7FEFF 		bl	uxTaskPriorityGet
 327 004e 0246     		mov	r2, r0
 328 0050 BB68     		ldr	r3, [r7, #8]
 329 0052 9A42     		cmp	r2, r3
 330 0054 02D0     		beq	.L8
 331              		.loc 1 265 0 is_stmt 0 discriminator 1
 332 0056 FFF7FEFF 		bl	ulPortSetInterruptMask
 333              	.L9:
 334 005a FEE7     		b	.L9
 335              	.L8:
 266:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	}
 336              		.loc 1 266 0 is_stmt 1
 337 005c DAE7     		b	.L10
 338              		.cfi_endproc
 339              	.LFE3:
 341 005e 00BF     		.section	.text.vCounterControlTask,"ax",%progbits
 342              		.align	2
 343              		.thumb
 344              		.thumb_func
 346              	vCounterControlTask:
 347              	.LFB4:
 267:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** }
 268:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 269:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 270:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*
 271:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  * Controller task as described above.
 272:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c ****  */
 273:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION( vCounterControlTask, pvParameters )
 274:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 348              		.loc 1 274 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 16
 351              		@ frame_needed = 1, uses_anonymous_args = 0
 352 0000 80B5     		push	{r7, lr}
 353              	.LCFI9:
 354              		.cfi_def_cfa_offset 8
 355              		.cfi_offset 7, -8
 356              		.cfi_offset 14, -4
 357 0002 84B0     		sub	sp, sp, #16
 358              	.LCFI10:
 359              		.cfi_def_cfa_offset 24
 360 0004 00AF     		add	r7, sp, #0
 361              	.LCFI11:
 362              		.cfi_def_cfa_register 7
 363 0006 7860     		str	r0, [r7, #4]
 275:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** uint32_t ulLastCounter;
 276:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** short sLoops;
 277:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** short sError = pdFALSE;
 364              		.loc 1 277 0
 365 0008 0023     		movs	r3, #0
 366 000a BB81     		strh	r3, [r7, #12]	@ movhi
 367              	.L17:
 278:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 279:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	/* Just to stop warning messages. */
 280:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	( void ) pvParameters;
 281:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 282:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	for( ;; )
 283:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	{
 284:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Start with the counter at zero. */
 285:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		ulCounter = ( uint32_t ) 0;
 368              		.loc 1 285 0
 369 000c 40F20003 		movw	r3, #:lower16:ulCounter
 370 0010 C0F20003 		movt	r3, #:upper16:ulCounter
 371 0014 0022     		movs	r2, #0
 372 0016 1A60     		str	r2, [r3]
 286:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 287:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* First section : */
 288:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 289:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Check the continuous count task is running. */
 290:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 373              		.loc 1 290 0
 374 0018 0023     		movs	r3, #0
 375 001a FB81     		strh	r3, [r7, #14]	@ movhi
 376 001c 29E0     		b	.L12
 377              	.L14:
 291:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 292:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			/* Suspend the continuous count task so we can take a mirror of the
 293:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			shared variable without risk of corruption.  This is not really
 294:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			needed as the other task raises its priority above this task's
 295:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			priority. */
 296:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspend( xContinuousIncrementHandle );
 378              		.loc 1 296 0
 379 001e 40F20003 		movw	r3, #:lower16:xContinuousIncrementHandle
 380 0022 C0F20003 		movt	r3, #:upper16:xContinuousIncrementHandle
 381 0026 1B68     		ldr	r3, [r3]
 382 0028 1846     		mov	r0, r3
 383 002a FFF7FEFF 		bl	vTaskSuspend
 297:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			{
 298:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				#if( INCLUDE_eTaskGetState == 1 )
 299:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				{
 300:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 					configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eSuspended );
 301:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				}
 302:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				#endif /* INCLUDE_eTaskGetState */
 303:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 304:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				ulLastCounter = ulCounter;
 384              		.loc 1 304 0
 385 002e 40F20003 		movw	r3, #:lower16:ulCounter
 386 0032 C0F20003 		movt	r3, #:upper16:ulCounter
 387 0036 1B68     		ldr	r3, [r3]
 388 0038 BB60     		str	r3, [r7, #8]
 305:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			}
 306:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskResume( xContinuousIncrementHandle );
 389              		.loc 1 306 0
 390 003a 40F20003 		movw	r3, #:lower16:xContinuousIncrementHandle
 391 003e C0F20003 		movt	r3, #:upper16:xContinuousIncrementHandle
 392 0042 1B68     		ldr	r3, [r3]
 393 0044 1846     		mov	r0, r3
 394 0046 FFF7FEFF 		bl	vTaskResume
 307:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 308:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			#if( configUSE_PREEMPTION == 0 )
 309:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				taskYIELD();
 310:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			#endif
 311:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 312:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			#if( INCLUDE_eTaskGetState == 1 )
 313:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			{
 314:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eReady );
 315:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			}
 316:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			#endif /* INCLUDE_eTaskGetState */
 317:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 318:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			/* Now delay to ensure the other task has processor time. */
 319:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskDelay( priSLEEP_TIME );
 395              		.loc 1 319 0
 396 004a 8020     		movs	r0, #128
 397 004c FFF7FEFF 		bl	vTaskDelay
 320:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 321:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			/* Check the shared variable again.  This time to ensure mutual
 322:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			exclusion the whole scheduler will be locked.  This is just for
 323:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			demo purposes! */
 324:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspendAll();
 398              		.loc 1 324 0
 399 0050 FFF7FEFF 		bl	vTaskSuspendAll
 325:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			{
 326:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				if( ulLastCounter == ulCounter )
 400              		.loc 1 326 0
 401 0054 40F20003 		movw	r3, #:lower16:ulCounter
 402 0058 C0F20003 		movt	r3, #:upper16:ulCounter
 403 005c 1B68     		ldr	r3, [r3]
 404 005e BA68     		ldr	r2, [r7, #8]
 405 0060 9A42     		cmp	r2, r3
 406 0062 01D1     		bne	.L13
 327:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				{
 328:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 					/* The shared variable has not changed.  There is a problem
 329:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 					with the continuous count task so flag an error. */
 330:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 					sError = pdTRUE;
 407              		.loc 1 330 0
 408 0064 0123     		movs	r3, #1
 409 0066 BB81     		strh	r3, [r7, #12]	@ movhi
 410              	.L13:
 331:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				}
 332:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			}
 333:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			xTaskResumeAll();
 411              		.loc 1 333 0
 412 0068 FFF7FEFF 		bl	xTaskResumeAll
 290:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 413              		.loc 1 290 0
 414 006c FB89     		ldrh	r3, [r7, #14]
 415 006e 0133     		adds	r3, r3, #1
 416 0070 FB81     		strh	r3, [r7, #14]	@ movhi
 417              	.L12:
 290:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 418              		.loc 1 290 0 is_stmt 0 discriminator 1
 419 0072 B7F90E30 		ldrsh	r3, [r7, #14]
 420 0076 042B     		cmp	r3, #4
 421 0078 D1DD     		ble	.L14
 334:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		}
 335:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 336:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Second section: */
 337:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 338:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Suspend the continuous counter task so it stops accessing the shared
 339:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		variable. */
 340:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskSuspend( xContinuousIncrementHandle );
 422              		.loc 1 340 0 is_stmt 1
 423 007a 40F20003 		movw	r3, #:lower16:xContinuousIncrementHandle
 424 007e C0F20003 		movt	r3, #:upper16:xContinuousIncrementHandle
 425 0082 1B68     		ldr	r3, [r3]
 426 0084 1846     		mov	r0, r3
 427 0086 FFF7FEFF 		bl	vTaskSuspend
 341:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 342:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Reset the variable. */
 343:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		ulCounter = ( uint32_t ) 0;
 428              		.loc 1 343 0
 429 008a 40F20003 		movw	r3, #:lower16:ulCounter
 430 008e C0F20003 		movt	r3, #:upper16:ulCounter
 431 0092 0022     		movs	r2, #0
 432 0094 1A60     		str	r2, [r3]
 344:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 345:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		#if( INCLUDE_eTaskGetState == 1 )
 346:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 347:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			configASSERT( eTaskGetState( xLimitedIncrementHandle ) == eSuspended );
 348:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		}
 349:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		#endif /* INCLUDE_eTaskGetState */
 350:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 351:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Resume the limited count task which has a higher priority than us.
 352:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		We should therefore not return from this call until the limited count
 353:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		task has suspended itself with a known value in the counter variable. */
 354:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskResume( xLimitedIncrementHandle );
 433              		.loc 1 354 0
 434 0096 40F20003 		movw	r3, #:lower16:xLimitedIncrementHandle
 435 009a C0F20003 		movt	r3, #:upper16:xLimitedIncrementHandle
 436 009e 1B68     		ldr	r3, [r3]
 437 00a0 1846     		mov	r0, r3
 438 00a2 FFF7FEFF 		bl	vTaskResume
 355:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 356:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		#if( configUSE_PREEMPTION == 0 )
 357:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			taskYIELD();
 358:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		#endif
 359:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 360:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* This task should not run again until xLimitedIncrementHandle has
 361:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		suspended itself. */
 362:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		#if( INCLUDE_eTaskGetState == 1 )
 363:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 364:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			configASSERT( eTaskGetState( xLimitedIncrementHandle ) == eSuspended );
 365:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		}
 366:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		#endif /* INCLUDE_eTaskGetState */
 367:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 368:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Does the counter variable have the expected value? */
 369:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		if( ulCounter != priMAX_COUNT )
 439              		.loc 1 369 0
 440 00a6 40F20003 		movw	r3, #:lower16:ulCounter
 441 00aa C0F20003 		movt	r3, #:upper16:ulCounter
 442 00ae 1B68     		ldr	r3, [r3]
 443 00b0 FF2B     		cmp	r3, #255
 444 00b2 01D0     		beq	.L15
 370:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 371:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			sError = pdTRUE;
 445              		.loc 1 371 0
 446 00b4 0123     		movs	r3, #1
 447 00b6 BB81     		strh	r3, [r7, #12]	@ movhi
 448              	.L15:
 372:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		}
 373:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 374:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		if( sError == pdFALSE )
 449              		.loc 1 374 0
 450 00b8 B7F90C30 		ldrsh	r3, [r7, #12]
 451 00bc 002B     		cmp	r3, #0
 452 00be 10D1     		bne	.L16
 375:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 376:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			/* If no errors have occurred then increment the check variable. */
 377:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			portENTER_CRITICAL();
 453              		.loc 1 377 0
 454 00c0 FFF7FEFF 		bl	vPortEnterCritical
 378:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				usCheckVariable++;
 455              		.loc 1 378 0
 456 00c4 40F20003 		movw	r3, #:lower16:usCheckVariable
 457 00c8 C0F20003 		movt	r3, #:upper16:usCheckVariable
 458 00cc 1B88     		ldrh	r3, [r3]	@ movhi
 459 00ce 9BB2     		uxth	r3, r3
 460 00d0 0133     		adds	r3, r3, #1
 461 00d2 9AB2     		uxth	r2, r3
 462 00d4 40F20003 		movw	r3, #:lower16:usCheckVariable
 463 00d8 C0F20003 		movt	r3, #:upper16:usCheckVariable
 464 00dc 1A80     		strh	r2, [r3]	@ movhi
 379:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			portEXIT_CRITICAL();
 465              		.loc 1 379 0
 466 00de FFF7FEFF 		bl	vPortExitCritical
 467              	.L16:
 380:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		}
 381:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 382:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* Resume the continuous count task and do it all again. */
 383:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskResume( xContinuousIncrementHandle );
 468              		.loc 1 383 0
 469 00e2 40F20003 		movw	r3, #:lower16:xContinuousIncrementHandle
 470 00e6 C0F20003 		movt	r3, #:upper16:xContinuousIncrementHandle
 471 00ea 1B68     		ldr	r3, [r3]
 472 00ec 1846     		mov	r0, r3
 473 00ee FFF7FEFF 		bl	vTaskResume
 384:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 385:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		#if( configUSE_PREEMPTION == 0 )
 386:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			taskYIELD();
 387:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		#endif
 388:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	}
 474              		.loc 1 388 0
 475 00f2 8BE7     		b	.L17
 476              		.cfi_endproc
 477              	.LFE4:
 479              		.section	.text.vQueueSendWhenSuspendedTask,"ax",%progbits
 480              		.align	2
 481              		.thumb
 482              		.thumb_func
 484              	vQueueSendWhenSuspendedTask:
 485              	.LFB5:
 389:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** }
 390:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 391:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 392:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION( vQueueSendWhenSuspendedTask, pvParameters )
 393:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 486              		.loc 1 393 0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 8
 489              		@ frame_needed = 1, uses_anonymous_args = 0
 490 0000 80B5     		push	{r7, lr}
 491              	.LCFI12:
 492              		.cfi_def_cfa_offset 8
 493              		.cfi_offset 7, -8
 494              		.cfi_offset 14, -4
 495 0002 82B0     		sub	sp, sp, #8
 496              	.LCFI13:
 497              		.cfi_def_cfa_offset 16
 498 0004 00AF     		add	r7, sp, #0
 499              	.LCFI14:
 500              		.cfi_def_cfa_register 7
 501 0006 7860     		str	r0, [r7, #4]
 502              	.L20:
 394:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** static uint32_t ulValueToSend = ( uint32_t ) 0;
 395:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 396:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	/* Just to stop warning messages. */
 397:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	( void ) pvParameters;
 398:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 399:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	for( ;; )
 400:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	{
 401:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskSuspendAll();
 503              		.loc 1 401 0
 504 0008 FFF7FEFF 		bl	vTaskSuspendAll
 402:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 403:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			/* We must not block while the scheduler is suspended! */
 404:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
 505              		.loc 1 404 0
 506 000c 40F20003 		movw	r3, #:lower16:xSuspendedTestQueue
 507 0010 C0F20003 		movt	r3, #:upper16:xSuspendedTestQueue
 508 0014 1B68     		ldr	r3, [r3]
 509 0016 1846     		mov	r0, r3
 510 0018 40F20001 		movw	r1, #:lower16:ulValueToSend.5057
 511 001c C0F20001 		movt	r1, #:upper16:ulValueToSend.5057
 512 0020 0022     		movs	r2, #0
 513 0022 0023     		movs	r3, #0
 514 0024 FFF7FEFF 		bl	xQueueGenericSend
 515 0028 0346     		mov	r3, r0
 516 002a 012B     		cmp	r3, #1
 517 002c 05D0     		beq	.L19
 405:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			{
 406:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				xSuspendedQueueSendError = pdTRUE;
 518              		.loc 1 406 0
 519 002e 40F20003 		movw	r3, #:lower16:xSuspendedQueueSendError
 520 0032 C0F20003 		movt	r3, #:upper16:xSuspendedQueueSendError
 521 0036 0122     		movs	r2, #1
 522 0038 1A60     		str	r2, [r3]
 523              	.L19:
 407:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			}
 408:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		}
 409:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		xTaskResumeAll();
 524              		.loc 1 409 0
 525 003a FFF7FEFF 		bl	xTaskResumeAll
 410:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 411:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		vTaskDelay( priSLEEP_TIME );
 526              		.loc 1 411 0
 527 003e 8020     		movs	r0, #128
 528 0040 FFF7FEFF 		bl	vTaskDelay
 412:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 413:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		++ulValueToSend;
 529              		.loc 1 413 0
 530 0044 40F20003 		movw	r3, #:lower16:ulValueToSend.5057
 531 0048 C0F20003 		movt	r3, #:upper16:ulValueToSend.5057
 532 004c 1B68     		ldr	r3, [r3]
 533 004e 5A1C     		adds	r2, r3, #1
 534 0050 40F20003 		movw	r3, #:lower16:ulValueToSend.5057
 535 0054 C0F20003 		movt	r3, #:upper16:ulValueToSend.5057
 536 0058 1A60     		str	r2, [r3]
 414:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	}
 537              		.loc 1 414 0
 538 005a D5E7     		b	.L20
 539              		.cfi_endproc
 540              	.LFE5:
 542              		.section	.text.vQueueReceiveWhenSuspendedTask,"ax",%progbits
 543              		.align	2
 544              		.thumb
 545              		.thumb_func
 547              	vQueueReceiveWhenSuspendedTask:
 548              	.LFB6:
 415:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** }
 416:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 417:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 418:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** static portTASK_FUNCTION( vQueueReceiveWhenSuspendedTask, pvParameters )
 419:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 549              		.loc 1 419 0
 550              		.cfi_startproc
 551              		@ args = 0, pretend = 0, frame = 16
 552              		@ frame_needed = 1, uses_anonymous_args = 0
 553 0000 80B5     		push	{r7, lr}
 554              	.LCFI15:
 555              		.cfi_def_cfa_offset 8
 556              		.cfi_offset 7, -8
 557              		.cfi_offset 14, -4
 558 0002 84B0     		sub	sp, sp, #16
 559              	.LCFI16:
 560              		.cfi_def_cfa_offset 24
 561 0004 00AF     		add	r7, sp, #0
 562              	.LCFI17:
 563              		.cfi_def_cfa_register 7
 564 0006 7860     		str	r0, [r7, #4]
 565              	.L23:
 420:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** uint32_t ulReceivedValue;
 421:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** BaseType_t xGotValue;
 422:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 423:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	/* Just to stop warning messages. */
 424:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	( void ) pvParameters;
 425:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 426:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	for( ;; )
 427:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	{
 428:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		do
 429:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 430:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			/* Suspending the scheduler here is fairly pointless and
 431:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			undesirable for a normal application.  It is done here purely
 432:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			to test the scheduler.  The inner xTaskResumeAll() should
 433:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			never return pdTRUE as the scheduler is still locked by the
 434:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			outer call. */
 435:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			vTaskSuspendAll();
 566              		.loc 1 435 0
 567 0008 FFF7FEFF 		bl	vTaskSuspendAll
 436:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			{
 437:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				vTaskSuspendAll();
 568              		.loc 1 437 0
 569 000c FFF7FEFF 		bl	vTaskSuspendAll
 438:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				{
 439:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
 570              		.loc 1 439 0
 571 0010 40F20003 		movw	r3, #:lower16:xSuspendedTestQueue
 572 0014 C0F20003 		movt	r3, #:upper16:xSuspendedTestQueue
 573 0018 1A68     		ldr	r2, [r3]
 574 001a 07F10803 		add	r3, r7, #8
 575 001e 1046     		mov	r0, r2
 576 0020 1946     		mov	r1, r3
 577 0022 0022     		movs	r2, #0
 578 0024 0023     		movs	r3, #0
 579 0026 FFF7FEFF 		bl	xQueueGenericReceive
 580 002a F860     		str	r0, [r7, #12]
 440:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				}
 441:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				if( xTaskResumeAll() != pdFALSE )
 581              		.loc 1 441 0
 582 002c FFF7FEFF 		bl	xTaskResumeAll
 583 0030 0346     		mov	r3, r0
 584 0032 002B     		cmp	r3, #0
 585 0034 05D0     		beq	.L22
 442:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				{
 443:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 					xSuspendedQueueReceiveError = pdTRUE;
 586              		.loc 1 443 0
 587 0036 40F20003 		movw	r3, #:lower16:xSuspendedQueueReceiveError
 588 003a C0F20003 		movt	r3, #:upper16:xSuspendedQueueReceiveError
 589 003e 0122     		movs	r2, #1
 590 0040 1A60     		str	r2, [r3]
 591              	.L22:
 444:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				}
 445:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			}
 446:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			xTaskResumeAll();
 592              		.loc 1 446 0
 593 0042 FFF7FEFF 		bl	xTaskResumeAll
 447:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 448:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			#if configUSE_PREEMPTION == 0
 449:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			{
 450:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 				taskYIELD();
 451:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			}
 452:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			#endif
 453:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 454:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		} while( xGotValue == pdFALSE );
 594              		.loc 1 454 0
 595 0046 FB68     		ldr	r3, [r7, #12]
 596 0048 002B     		cmp	r3, #0
 597 004a DDD0     		beq	.L23
 455:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 456:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		if( ulReceivedValue != ulExpectedValue )
 598              		.loc 1 456 0
 599 004c BA68     		ldr	r2, [r7, #8]
 600 004e 40F20003 		movw	r3, #:lower16:ulExpectedValue
 601 0052 C0F20003 		movt	r3, #:upper16:ulExpectedValue
 602 0056 1B68     		ldr	r3, [r3]
 603 0058 9A42     		cmp	r2, r3
 604 005a 05D0     		beq	.L24
 457:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 458:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			xSuspendedQueueReceiveError = pdTRUE;
 605              		.loc 1 458 0
 606 005c 40F20003 		movw	r3, #:lower16:xSuspendedQueueReceiveError
 607 0060 C0F20003 		movt	r3, #:upper16:xSuspendedQueueReceiveError
 608 0064 0122     		movs	r2, #1
 609 0066 1A60     		str	r2, [r3]
 610              	.L24:
 459:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		}
 460:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 461:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		if( xSuspendedQueueReceiveError != pdTRUE )
 611              		.loc 1 461 0
 612 0068 40F20003 		movw	r3, #:lower16:xSuspendedQueueReceiveError
 613 006c C0F20003 		movt	r3, #:upper16:xSuspendedQueueReceiveError
 614 0070 1B68     		ldr	r3, [r3]
 615 0072 012B     		cmp	r3, #1
 616 0074 0BD0     		beq	.L25
 462:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		{
 463:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			/* Only increment the variable if an error has not occurred.  This
 464:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			allows xAreDynamicPriorityTasksStillRunning() to check for stalled
 465:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			tasks as well as explicit errors. */
 466:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 			++ulExpectedValue;
 617              		.loc 1 466 0
 618 0076 40F20003 		movw	r3, #:lower16:ulExpectedValue
 619 007a C0F20003 		movt	r3, #:upper16:ulExpectedValue
 620 007e 1B68     		ldr	r3, [r3]
 621 0080 5A1C     		adds	r2, r3, #1
 622 0082 40F20003 		movw	r3, #:lower16:ulExpectedValue
 623 0086 C0F20003 		movt	r3, #:upper16:ulExpectedValue
 624 008a 1A60     		str	r2, [r3]
 467:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		}
 468:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	}
 625              		.loc 1 468 0
 626 008c BCE7     		b	.L23
 627              	.L25:
 628 008e BBE7     		b	.L23
 629              		.cfi_endproc
 630              	.LFE6:
 632              		.section	.text.xAreDynamicPriorityTasksStillRunning,"ax",%progbits
 633              		.align	2
 634              		.global	xAreDynamicPriorityTasksStillRunning
 635              		.thumb
 636              		.thumb_func
 638              	xAreDynamicPriorityTasksStillRunning:
 639              	.LFB7:
 469:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** }
 470:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 471:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 472:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Called to check that all the created tasks are still running without error. */
 473:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** BaseType_t xAreDynamicPriorityTasksStillRunning( void )
 474:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** {
 640              		.loc 1 474 0
 641              		.cfi_startproc
 642              		@ args = 0, pretend = 0, frame = 8
 643              		@ frame_needed = 1, uses_anonymous_args = 0
 644              		@ link register save eliminated.
 645 0000 80B4     		push	{r7}
 646              	.LCFI18:
 647              		.cfi_def_cfa_offset 4
 648              		.cfi_offset 7, -4
 649 0002 83B0     		sub	sp, sp, #12
 650              	.LCFI19:
 651              		.cfi_def_cfa_offset 16
 652 0004 00AF     		add	r7, sp, #0
 653              	.LCFI20:
 654              		.cfi_def_cfa_register 7
 475:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** /* Keep a history of the check variables so we know if it has been incremented
 476:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** since the last call. */
 477:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** static uint16_t usLastTaskCheck = ( uint16_t ) 0;
 478:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** static uint32_t ulLastExpectedValue = ( uint32_t ) 0U;
 479:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** BaseType_t xReturn = pdTRUE;
 655              		.loc 1 479 0
 656 0006 0123     		movs	r3, #1
 657 0008 7B60     		str	r3, [r7, #4]
 480:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 481:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	/* Check the tasks are still running by ensuring the check variable
 482:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	is still incrementing. */
 483:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 484:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	if( usCheckVariable == usLastTaskCheck )
 658              		.loc 1 484 0
 659 000a 40F20003 		movw	r3, #:lower16:usCheckVariable
 660 000e C0F20003 		movt	r3, #:upper16:usCheckVariable
 661 0012 1B88     		ldrh	r3, [r3]	@ movhi
 662 0014 9AB2     		uxth	r2, r3
 663 0016 40F20003 		movw	r3, #:lower16:usLastTaskCheck.5070
 664 001a C0F20003 		movt	r3, #:upper16:usLastTaskCheck.5070
 665 001e 1B88     		ldrh	r3, [r3]
 666 0020 9A42     		cmp	r2, r3
 667 0022 01D1     		bne	.L27
 485:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	{
 486:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* The check has not incremented so an error exists. */
 487:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		xReturn = pdFALSE;
 668              		.loc 1 487 0
 669 0024 0023     		movs	r3, #0
 670 0026 7B60     		str	r3, [r7, #4]
 671              	.L27:
 488:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	}
 489:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 490:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	if( ulExpectedValue == ulLastExpectedValue )
 672              		.loc 1 490 0
 673 0028 40F20003 		movw	r3, #:lower16:ulExpectedValue
 674 002c C0F20003 		movt	r3, #:upper16:ulExpectedValue
 675 0030 1A68     		ldr	r2, [r3]
 676 0032 40F20003 		movw	r3, #:lower16:ulLastExpectedValue.5071
 677 0036 C0F20003 		movt	r3, #:upper16:ulLastExpectedValue.5071
 678 003a 1B68     		ldr	r3, [r3]
 679 003c 9A42     		cmp	r2, r3
 680 003e 01D1     		bne	.L28
 491:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	{
 492:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		/* The value being received by the queue receive task has not
 493:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		incremented so an error exists. */
 494:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		xReturn = pdFALSE;
 681              		.loc 1 494 0
 682 0040 0023     		movs	r3, #0
 683 0042 7B60     		str	r3, [r7, #4]
 684              	.L28:
 495:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	}
 496:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 497:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	if( xSuspendedQueueSendError == pdTRUE )
 685              		.loc 1 497 0
 686 0044 40F20003 		movw	r3, #:lower16:xSuspendedQueueSendError
 687 0048 C0F20003 		movt	r3, #:upper16:xSuspendedQueueSendError
 688 004c 1B68     		ldr	r3, [r3]
 689 004e 012B     		cmp	r3, #1
 690 0050 01D1     		bne	.L29
 498:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	{
 499:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		xReturn = pdFALSE;
 691              		.loc 1 499 0
 692 0052 0023     		movs	r3, #0
 693 0054 7B60     		str	r3, [r7, #4]
 694              	.L29:
 500:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	}
 501:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 502:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	if( xSuspendedQueueReceiveError == pdTRUE )
 695              		.loc 1 502 0
 696 0056 40F20003 		movw	r3, #:lower16:xSuspendedQueueReceiveError
 697 005a C0F20003 		movt	r3, #:upper16:xSuspendedQueueReceiveError
 698 005e 1B68     		ldr	r3, [r3]
 699 0060 012B     		cmp	r3, #1
 700 0062 01D1     		bne	.L30
 503:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	{
 504:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 		xReturn = pdFALSE;
 701              		.loc 1 504 0
 702 0064 0023     		movs	r3, #0
 703 0066 7B60     		str	r3, [r7, #4]
 704              	.L30:
 505:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	}
 506:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 507:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	usLastTaskCheck = usCheckVariable;
 705              		.loc 1 507 0
 706 0068 40F20003 		movw	r3, #:lower16:usCheckVariable
 707 006c C0F20003 		movt	r3, #:upper16:usCheckVariable
 708 0070 1B88     		ldrh	r3, [r3]	@ movhi
 709 0072 9AB2     		uxth	r2, r3
 710 0074 40F20003 		movw	r3, #:lower16:usLastTaskCheck.5070
 711 0078 C0F20003 		movt	r3, #:upper16:usLastTaskCheck.5070
 712 007c 1A80     		strh	r2, [r3]	@ movhi
 508:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	ulLastExpectedValue = ulExpectedValue;
 713              		.loc 1 508 0
 714 007e 40F20003 		movw	r3, #:lower16:ulExpectedValue
 715 0082 C0F20003 		movt	r3, #:upper16:ulExpectedValue
 716 0086 1A68     		ldr	r2, [r3]
 717 0088 40F20003 		movw	r3, #:lower16:ulLastExpectedValue.5071
 718 008c C0F20003 		movt	r3, #:upper16:ulLastExpectedValue.5071
 719 0090 1A60     		str	r2, [r3]
 509:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 
 510:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** 	return xReturn;
 720              		.loc 1 510 0
 721 0092 7B68     		ldr	r3, [r7, #4]
 511:lib/FreeRTOSV8.1.2/FreeRTOS/Demo/Common/Minimal/dynamic.c **** }
 722              		.loc 1 511 0
 723 0094 1846     		mov	r0, r3
 724 0096 0C37     		adds	r7, r7, #12
 725 0098 BD46     		mov	sp, r7
 726              		@ sp needed
 727 009a 5DF8047B 		ldr	r7, [sp], #4
 728 009e 7047     		bx	lr
 729              		.cfi_endproc
 730              	.LFE7:
 732              		.section	.bss.ulValueToSend.5057,"aw",%nobits
 733              		.align	2
 736              	ulValueToSend.5057:
 737 0000 00000000 		.space	4
 738              		.section	.bss.usLastTaskCheck.5070,"aw",%nobits
 739              		.align	1
 742              	usLastTaskCheck.5070:
 743 0000 0000     		.space	2
 744              		.section	.bss.ulLastExpectedValue.5071,"aw",%nobits
 745              		.align	2
 748              	ulLastExpectedValue.5071:
 749 0000 00000000 		.space	4
 750              		.text
 751              	.Letext0:
 752              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 753              		.file 3 "/usr/include/newlib/stdint.h"
 754              		.file 4 "lib/FreeRTOSV8.1.2/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 755              		.file 5 "lib/FreeRTOSV8.1.2/FreeRTOS/Source/include/task.h"
 756              		.file 6 "lib/FreeRTOSV8.1.2/FreeRTOS/Source/include/queue.h"
DEFINED SYMBOLS
                            *ABS*:00000000 dynamic.c
     /tmp/ccvAGep1.s:20     .bss.xContinuousIncrementHandle:00000000 $d
     /tmp/ccvAGep1.s:23     .bss.xContinuousIncrementHandle:00000000 xContinuousIncrementHandle
     /tmp/ccvAGep1.s:26     .bss.xLimitedIncrementHandle:00000000 $d
     /tmp/ccvAGep1.s:29     .bss.xLimitedIncrementHandle:00000000 xLimitedIncrementHandle
     /tmp/ccvAGep1.s:32     .bss.ulCounter:00000000 $d
     /tmp/ccvAGep1.s:35     .bss.ulCounter:00000000 ulCounter
     /tmp/ccvAGep1.s:38     .bss.usCheckVariable:00000000 $d
     /tmp/ccvAGep1.s:41     .bss.usCheckVariable:00000000 usCheckVariable
     /tmp/ccvAGep1.s:44     .bss.xSuspendedQueueSendError:00000000 $d
     /tmp/ccvAGep1.s:47     .bss.xSuspendedQueueSendError:00000000 xSuspendedQueueSendError
     /tmp/ccvAGep1.s:50     .bss.xSuspendedQueueReceiveError:00000000 $d
     /tmp/ccvAGep1.s:53     .bss.xSuspendedQueueReceiveError:00000000 xSuspendedQueueReceiveError
                            *COM*:00000004 xSuspendedTestQueue
     /tmp/ccvAGep1.s:57     .bss.ulExpectedValue:00000000 $d
     /tmp/ccvAGep1.s:60     .bss.ulExpectedValue:00000000 ulExpectedValue
     /tmp/ccvAGep1.s:63     .rodata:00000000 $d
     /tmp/ccvAGep1.s:64     .rodata:00000000 .LC0
     /tmp/ccvAGep1.s:67     .rodata:00000018 .LC1
     /tmp/ccvAGep1.s:70     .rodata:00000020 .LC2
     /tmp/ccvAGep1.s:73     .rodata:00000028 .LC3
     /tmp/ccvAGep1.s:76     .rodata:00000030 .LC4
     /tmp/ccvAGep1.s:79     .rodata:00000038 .LC5
     /tmp/ccvAGep1.s:82     .text.vStartDynamicPriorityTasks:00000000 $t
     /tmp/ccvAGep1.s:87     .text.vStartDynamicPriorityTasks:00000000 vStartDynamicPriorityTasks
     /tmp/ccvAGep1.s:269    .text.vContinuousIncrementTask:00000000 vContinuousIncrementTask
     /tmp/ccvAGep1.s:218    .text.vLimitedIncrementTask:00000000 vLimitedIncrementTask
     /tmp/ccvAGep1.s:346    .text.vCounterControlTask:00000000 vCounterControlTask
     /tmp/ccvAGep1.s:484    .text.vQueueSendWhenSuspendedTask:00000000 vQueueSendWhenSuspendedTask
     /tmp/ccvAGep1.s:547    .text.vQueueReceiveWhenSuspendedTask:00000000 vQueueReceiveWhenSuspendedTask
     /tmp/ccvAGep1.s:214    .text.vLimitedIncrementTask:00000000 $t
     /tmp/ccvAGep1.s:265    .text.vContinuousIncrementTask:00000000 $t
     /tmp/ccvAGep1.s:342    .text.vCounterControlTask:00000000 $t
     /tmp/ccvAGep1.s:480    .text.vQueueSendWhenSuspendedTask:00000000 $t
     /tmp/ccvAGep1.s:736    .bss.ulValueToSend.5057:00000000 ulValueToSend.5057
     /tmp/ccvAGep1.s:543    .text.vQueueReceiveWhenSuspendedTask:00000000 $t
     /tmp/ccvAGep1.s:633    .text.xAreDynamicPriorityTasksStillRunning:00000000 $t
     /tmp/ccvAGep1.s:638    .text.xAreDynamicPriorityTasksStillRunning:00000000 xAreDynamicPriorityTasksStillRunning
     /tmp/ccvAGep1.s:742    .bss.usLastTaskCheck.5070:00000000 usLastTaskCheck.5070
     /tmp/ccvAGep1.s:748    .bss.ulLastExpectedValue.5071:00000000 ulLastExpectedValue.5071
     /tmp/ccvAGep1.s:733    .bss.ulValueToSend.5057:00000000 $d
     /tmp/ccvAGep1.s:739    .bss.usLastTaskCheck.5070:00000000 $d
     /tmp/ccvAGep1.s:745    .bss.ulLastExpectedValue.5071:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xQueueGenericCreate
vQueueAddToRegistry
xTaskGenericCreate
vTaskSuspend
uxTaskPriorityGet
vTaskPrioritySet
ulPortSetInterruptMask
vTaskResume
vTaskDelay
vTaskSuspendAll
xTaskResumeAll
vPortEnterCritical
vPortExitCritical
xQueueGenericSend
xQueueGenericReceive
