
obj/STM32F4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007570  08000188  08000188  00008188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  080076f8  080076f8  0000f6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08007700  08007700  0000f700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000448  20000000  08007704  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00012ee0  20000448  08007b4c  00010448  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  20013328  0801aa2c  00010448  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY
  8 .comment      0000001f  00000000  00000000  00010476  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000aa18  00000000  00000000  00010495  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002a17  00000000  00000000  0001aead  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e7b  00000000  00000000  0001d8c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c58  00000000  00000000  00021740  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009d0  00000000  00000000  00022398  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000054f8  00000000  00000000  00022d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000488c  00000000  00000000  00028260  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002340  00000000  00000000  0002caec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	b508      	push	{r3, lr}
 800018a:	f240 4048 	movw	r0, #1096	; 0x448
 800018e:	4b07      	ldr	r3, [pc, #28]	; (80001ac <deregister_tm_clones+0x24>)
 8000190:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000194:	1a1b      	subs	r3, r3, r0
 8000196:	2b06      	cmp	r3, #6
 8000198:	d800      	bhi.n	800019c <deregister_tm_clones+0x14>
 800019a:	bd08      	pop	{r3, pc}
 800019c:	f240 0300 	movw	r3, #0
 80001a0:	f2c0 0300 	movt	r3, #0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d0f8      	beq.n	800019a <deregister_tm_clones+0x12>
 80001a8:	4798      	blx	r3
 80001aa:	e7f6      	b.n	800019a <deregister_tm_clones+0x12>
 80001ac:	2000044b 	.word	0x2000044b

080001b0 <register_tm_clones>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	f240 4048 	movw	r0, #1096	; 0x448
 80001b6:	f240 4348 	movw	r3, #1096	; 0x448
 80001ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001be:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001c2:	1a1b      	subs	r3, r3, r0
 80001c4:	109b      	asrs	r3, r3, #2
 80001c6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80001ca:	1059      	asrs	r1, r3, #1
 80001cc:	d100      	bne.n	80001d0 <register_tm_clones+0x20>
 80001ce:	bd08      	pop	{r3, pc}
 80001d0:	f240 0200 	movw	r2, #0
 80001d4:	f2c0 0200 	movt	r2, #0
 80001d8:	2a00      	cmp	r2, #0
 80001da:	d0f8      	beq.n	80001ce <register_tm_clones+0x1e>
 80001dc:	4790      	blx	r2
 80001de:	e7f6      	b.n	80001ce <register_tm_clones+0x1e>

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	f240 4448 	movw	r4, #1096	; 0x448
 80001e6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80001ea:	7823      	ldrb	r3, [r4, #0]
 80001ec:	b973      	cbnz	r3, 800020c <__do_global_dtors_aux+0x2c>
 80001ee:	f7ff ffcb 	bl	8000188 <deregister_tm_clones>
 80001f2:	f240 0300 	movw	r3, #0
 80001f6:	f2c0 0300 	movt	r3, #0
 80001fa:	b12b      	cbz	r3, 8000208 <__do_global_dtors_aux+0x28>
 80001fc:	f247 60e0 	movw	r0, #30432	; 0x76e0
 8000200:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000204:	f3af 8000 	nop.w
 8000208:	2301      	movs	r3, #1
 800020a:	7023      	strb	r3, [r4, #0]
 800020c:	bd10      	pop	{r4, pc}
 800020e:	bf00      	nop

08000210 <frame_dummy>:
 8000210:	b508      	push	{r3, lr}
 8000212:	f240 0300 	movw	r3, #0
 8000216:	f2c0 0300 	movt	r3, #0
 800021a:	b14b      	cbz	r3, 8000230 <frame_dummy+0x20>
 800021c:	f247 60e0 	movw	r0, #30432	; 0x76e0
 8000220:	f240 414c 	movw	r1, #1100	; 0x44c
 8000224:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000228:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800022c:	f3af 8000 	nop.w
 8000230:	f240 4048 	movw	r0, #1096	; 0x448
 8000234:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000238:	6803      	ldr	r3, [r0, #0]
 800023a:	b12b      	cbz	r3, 8000248 <frame_dummy+0x38>
 800023c:	f240 0300 	movw	r3, #0
 8000240:	f2c0 0300 	movt	r3, #0
 8000244:	b103      	cbz	r3, 8000248 <frame_dummy+0x38>
 8000246:	4798      	blx	r3
 8000248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800024c:	e7b0      	b.n	80001b0 <register_tm_clones>
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800038e:	f1a4 0401 	sub.w	r4, r4, #1
 8000392:	d1e9      	bne.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f092 0f00 	teq	r2, #0
 800053a:	bf14      	ite	ne
 800053c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000550:	e720      	b.n	8000394 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aedc 	beq.w	8000342 <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6c1      	b.n	8000342 <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <memcpy>:
 8000af4:	4684      	mov	ip, r0
 8000af6:	ea41 0300 	orr.w	r3, r1, r0
 8000afa:	f013 0303 	ands.w	r3, r3, #3
 8000afe:	d16d      	bne.n	8000bdc <memcpy+0xe8>
 8000b00:	3a40      	subs	r2, #64	; 0x40
 8000b02:	d341      	bcc.n	8000b88 <memcpy+0x94>
 8000b04:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b08:	f840 3b04 	str.w	r3, [r0], #4
 8000b0c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b10:	f840 3b04 	str.w	r3, [r0], #4
 8000b14:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b18:	f840 3b04 	str.w	r3, [r0], #4
 8000b1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b20:	f840 3b04 	str.w	r3, [r0], #4
 8000b24:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b28:	f840 3b04 	str.w	r3, [r0], #4
 8000b2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b30:	f840 3b04 	str.w	r3, [r0], #4
 8000b34:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b38:	f840 3b04 	str.w	r3, [r0], #4
 8000b3c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b40:	f840 3b04 	str.w	r3, [r0], #4
 8000b44:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b48:	f840 3b04 	str.w	r3, [r0], #4
 8000b4c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b50:	f840 3b04 	str.w	r3, [r0], #4
 8000b54:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b58:	f840 3b04 	str.w	r3, [r0], #4
 8000b5c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b60:	f840 3b04 	str.w	r3, [r0], #4
 8000b64:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b68:	f840 3b04 	str.w	r3, [r0], #4
 8000b6c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b70:	f840 3b04 	str.w	r3, [r0], #4
 8000b74:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b78:	f840 3b04 	str.w	r3, [r0], #4
 8000b7c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b80:	f840 3b04 	str.w	r3, [r0], #4
 8000b84:	3a40      	subs	r2, #64	; 0x40
 8000b86:	d2bd      	bcs.n	8000b04 <memcpy+0x10>
 8000b88:	3230      	adds	r2, #48	; 0x30
 8000b8a:	d311      	bcc.n	8000bb0 <memcpy+0xbc>
 8000b8c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b90:	f840 3b04 	str.w	r3, [r0], #4
 8000b94:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b98:	f840 3b04 	str.w	r3, [r0], #4
 8000b9c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ba0:	f840 3b04 	str.w	r3, [r0], #4
 8000ba4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ba8:	f840 3b04 	str.w	r3, [r0], #4
 8000bac:	3a10      	subs	r2, #16
 8000bae:	d2ed      	bcs.n	8000b8c <memcpy+0x98>
 8000bb0:	320c      	adds	r2, #12
 8000bb2:	d305      	bcc.n	8000bc0 <memcpy+0xcc>
 8000bb4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000bb8:	f840 3b04 	str.w	r3, [r0], #4
 8000bbc:	3a04      	subs	r2, #4
 8000bbe:	d2f9      	bcs.n	8000bb4 <memcpy+0xc0>
 8000bc0:	3204      	adds	r2, #4
 8000bc2:	d008      	beq.n	8000bd6 <memcpy+0xe2>
 8000bc4:	07d2      	lsls	r2, r2, #31
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000bcc:	f800 3b01 	strbne.w	r3, [r0], #1
 8000bd0:	d301      	bcc.n	8000bd6 <memcpy+0xe2>
 8000bd2:	880b      	ldrh	r3, [r1, #0]
 8000bd4:	8003      	strh	r3, [r0, #0]
 8000bd6:	4660      	mov	r0, ip
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	2a08      	cmp	r2, #8
 8000bde:	d313      	bcc.n	8000c08 <memcpy+0x114>
 8000be0:	078b      	lsls	r3, r1, #30
 8000be2:	d08d      	beq.n	8000b00 <memcpy+0xc>
 8000be4:	f010 0303 	ands.w	r3, r0, #3
 8000be8:	d08a      	beq.n	8000b00 <memcpy+0xc>
 8000bea:	f1c3 0304 	rsb	r3, r3, #4
 8000bee:	1ad2      	subs	r2, r2, r3
 8000bf0:	07db      	lsls	r3, r3, #31
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000bf8:	f800 3b01 	strbne.w	r3, [r0], #1
 8000bfc:	d380      	bcc.n	8000b00 <memcpy+0xc>
 8000bfe:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000c02:	f820 3b02 	strh.w	r3, [r0], #2
 8000c06:	e77b      	b.n	8000b00 <memcpy+0xc>
 8000c08:	3a04      	subs	r2, #4
 8000c0a:	d3d9      	bcc.n	8000bc0 <memcpy+0xcc>
 8000c0c:	3a01      	subs	r2, #1
 8000c0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c12:	f800 3b01 	strb.w	r3, [r0], #1
 8000c16:	d2f9      	bcs.n	8000c0c <memcpy+0x118>
 8000c18:	780b      	ldrb	r3, [r1, #0]
 8000c1a:	7003      	strb	r3, [r0, #0]
 8000c1c:	784b      	ldrb	r3, [r1, #1]
 8000c1e:	7043      	strb	r3, [r0, #1]
 8000c20:	788b      	ldrb	r3, [r1, #2]
 8000c22:	7083      	strb	r3, [r0, #2]
 8000c24:	4660      	mov	r0, ip
 8000c26:	4770      	bx	lr

08000c28 <NVIC_SetPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for set pending
 */
static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 8000c32:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000c36:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000c3a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000c3e:	0952      	lsrs	r2, r2, #5
 8000c40:	79f9      	ldrb	r1, [r7, #7]
 8000c42:	f001 011f 	and.w	r1, r1, #31
 8000c46:	2001      	movs	r0, #1
 8000c48:	fa00 f101 	lsl.w	r1, r0, r1
 8000c4c:	3240      	adds	r2, #64	; 0x40
 8000c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <main>:
volatile unsigned long ulButtonPressCounts = 0UL;

/*-----------------------------------------------------------*/

int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	/* Configure the hardware ready to run the test. */
	prvSetupHardware();
 8000c60:	f000 f8d4 	bl	8000e0c <prvSetupHardware>
	/* Start standard demo/test application flash tasks.  See the comments at
	the top of this file.  The LED flash tasks are always created.  The other
	tasks are only created if mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to
	0 (at the top of this file).  See the comments at the top of this file for
	more information. */
	vStartLEDFlashTasks( mainFLASH_TASK_PRIORITY );
 8000c64:	2001      	movs	r0, #1
 8000c66:	f004 faff 	bl	8005268 <vStartLEDFlashTasks>

	/* The following function will only create more tasks and timers if
	mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to 0 (at the top of this
	file).  See the comments at the top of this file for more information. */
	prvOptionallyCreateComprehensveTestApplication();
 8000c6a:	f000 f963 	bl	8000f34 <prvOptionallyCreateComprehensveTestApplication>

	/* Start the scheduler. */
	vTaskStartScheduler();
 8000c6e:	f000 ff93 	bl	8001b98 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 8000c72:	e7fe      	b.n	8000c72 <main+0x16>

08000c74 <prvCheckTimerCallback>:


/*-----------------------------------------------------------*/

static void prvCheckTimerCallback( xTimerHandle xTimer )
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af02      	add	r7, sp, #8
 8000c7a:	6078      	str	r0, [r7, #4]
static long lChangedTimerPeriodAlready = pdFALSE;
static unsigned long ulLastRegTest1Value = 0, ulLastRegTest2Value = 0;
long lErrorFound = pdFALSE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]

	/* Check all the demo tasks (other than the flash tasks) to ensure
	that they are all still running, and that none have detected an error. */

	if( xAreMathsTaskStillRunning() != pdTRUE )
 8000c80:	f004 fdda 	bl	8005838 <xAreMathsTaskStillRunning>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d001      	beq.n	8000c8e <prvCheckTimerCallback+0x1a>
	{
		lErrorFound = pdTRUE;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	60fb      	str	r3, [r7, #12]
	}

	if( xAreIntegerMathsTaskStillRunning() != pdTRUE )
 8000c8e:	f005 fb01 	bl	8006294 <xAreIntegerMathsTaskStillRunning>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d001      	beq.n	8000c9c <prvCheckTimerCallback+0x28>
	{
		lErrorFound = pdTRUE;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
	}

	if( xAreDynamicPriorityTasksStillRunning() != pdTRUE )
 8000c9c:	f004 fa94 	bl	80051c8 <xAreDynamicPriorityTasksStillRunning>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d001      	beq.n	8000caa <prvCheckTimerCallback+0x36>
	{
		lErrorFound = pdTRUE;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
	}

	if( xAreBlockingQueuesStillRunning() != pdTRUE )
 8000caa:	f003 fb0d 	bl	80042c8 <xAreBlockingQueuesStillRunning>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d001      	beq.n	8000cb8 <prvCheckTimerCallback+0x44>
	{
		lErrorFound = pdTRUE;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
	}

	if ( xAreBlockTimeTestTasksStillRunning() != pdTRUE )
 8000cb8:	f003 fe34 	bl	8004924 <xAreBlockTimeTestTasksStillRunning>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d001      	beq.n	8000cc6 <prvCheckTimerCallback+0x52>
	{
		lErrorFound = pdTRUE;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	60fb      	str	r3, [r7, #12]
	}

	if ( xAreGenericQueueTasksStillRunning() != pdTRUE )
 8000cc6:	f005 fa39 	bl	800613c <xAreGenericQueueTasksStillRunning>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d001      	beq.n	8000cd4 <prvCheckTimerCallback+0x60>
	{
		lErrorFound = pdTRUE;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
	}

	if ( xAreRecursiveMutexTasksStillRunning() != pdTRUE )
 8000cd4:	f005 fdbc 	bl	8006850 <xAreRecursiveMutexTasksStillRunning>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d001      	beq.n	8000ce2 <prvCheckTimerCallback+0x6e>
	{
		lErrorFound = pdTRUE;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	60fb      	str	r3, [r7, #12]
	}

	if( xIsCreateTaskStillRunning() != pdTRUE )
 8000ce2:	f004 f861 	bl	8004da8 <xIsCreateTaskStillRunning>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d001      	beq.n	8000cf0 <prvCheckTimerCallback+0x7c>
	{
		lErrorFound = pdTRUE;
 8000cec:	2301      	movs	r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
	}

	if( xArePollingQueuesStillRunning() != pdTRUE )
 8000cf0:	f005 fbc6 	bl	8006480 <xArePollingQueuesStillRunning>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d001      	beq.n	8000cfe <prvCheckTimerCallback+0x8a>
	{
		lErrorFound = pdTRUE;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	60fb      	str	r3, [r7, #12]
	}

	if( xAreSemaphoreTasksStillRunning() != pdTRUE )
 8000cfe:	f005 ff5f 	bl	8006bc0 <xAreSemaphoreTasksStillRunning>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d001      	beq.n	8000d0c <prvCheckTimerCallback+0x98>
	{
		lErrorFound = pdTRUE;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
	}

	/* Check that the register test 1 task is still running. */
	if( ulLastRegTest1Value == ulRegTest1LoopCounter )
 8000d0c:	f240 437c 	movw	r3, #1148	; 0x47c
 8000d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	f240 4364 	movw	r3, #1124	; 0x464
 8000d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d101      	bne.n	8000d28 <prvCheckTimerCallback+0xb4>
	{
		lErrorFound = pdTRUE;
 8000d24:	2301      	movs	r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
	}
	ulLastRegTest1Value = ulRegTest1LoopCounter;
 8000d28:	f240 4364 	movw	r3, #1124	; 0x464
 8000d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	f240 437c 	movw	r3, #1148	; 0x47c
 8000d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d3a:	601a      	str	r2, [r3, #0]

	/* Check that the register test 2 task is still running. */
	if( ulLastRegTest2Value == ulRegTest2LoopCounter )
 8000d3c:	f240 4380 	movw	r3, #1152	; 0x480
 8000d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	f240 4368 	movw	r3, #1128	; 0x468
 8000d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d101      	bne.n	8000d58 <prvCheckTimerCallback+0xe4>
	{
		lErrorFound = pdTRUE;
 8000d54:	2301      	movs	r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
	}
	ulLastRegTest2Value = ulRegTest2LoopCounter;
 8000d58:	f240 4368 	movw	r3, #1128	; 0x468
 8000d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	f240 4380 	movw	r3, #1152	; 0x480
 8000d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d6a:	601a      	str	r2, [r3, #0]

	/* Toggle the check LED to give an indication of the system status.  If
	the LED toggles every mainCHECK_TIMER_PERIOD_MS milliseconds then
	everything is ok.  A faster toggle indicates an error. */
	vParTestToggleLED( mainCHECK_LED );
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f9a7 	bl	80010c0 <vParTestToggleLED>

	/* Have any errors been latch in lErrorFound?  If so, shorten the
	period of the check timer to mainERROR_CHECK_TIMER_PERIOD_MS milliseconds.
	This will result in an increase in the rate at which mainCHECK_LED
	toggles. */
	if( lErrorFound != pdFALSE )
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d014      	beq.n	8000da2 <prvCheckTimerCallback+0x12e>
	{
		if( lChangedTimerPeriodAlready == pdFALSE )
 8000d78:	f240 4384 	movw	r3, #1156	; 0x484
 8000d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10d      	bne.n	8000da2 <prvCheckTimerCallback+0x12e>
		{
			lChangedTimerPeriodAlready = pdTRUE;
 8000d86:	f240 4384 	movw	r3, #1156	; 0x484
 8000d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d8e:	2201      	movs	r2, #1
 8000d90:	601a      	str	r2, [r3, #0]

			/* This call to xTimerChangePeriod() uses a zero block time.
			Functions called from inside of a timer callback function must
			*never* attempt	to block. */
			xTimerChangePeriod( xTimer, ( mainERROR_CHECK_TIMER_PERIOD_MS ), mainDONT_BLOCK );
 8000d92:	2300      	movs	r3, #0
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	2104      	movs	r1, #4
 8000d9a:	22c8      	movs	r2, #200	; 0xc8
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f002 fe1b 	bl	80039d8 <xTimerGenericCommand>
		}
	}
}
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <prvButtonTestTask>:
/*-----------------------------------------------------------*/

static void prvButtonTestTask( void *pvParameters )
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	configASSERT( xTestSemaphore );
 8000db0:	f240 4374 	movw	r3, #1140	; 0x474
 8000db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <prvButtonTestTask+0x1c>
 8000dbe:	f002 fcff 	bl	80037c0 <ulPortSetInterruptMask>
 8000dc2:	e7fe      	b.n	8000dc2 <prvButtonTestTask+0x1a>
	will unblock, increment its execution counter, then return to block
	again. */

	/* Take the semaphore before started to ensure it is in the correct
	state. */
	xSemaphoreTake( xTestSemaphore, mainDONT_BLOCK );
 8000dc4:	f240 4374 	movw	r3, #1140	; 0x474
 8000dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f002 f899 	bl	8002f0c <xQueueGenericReceive>

	for( ;; )
	{
		xSemaphoreTake( xTestSemaphore, portMAX_DELAY );
 8000dda:	f240 4374 	movw	r3, #1140	; 0x474
 8000dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	2300      	movs	r3, #0
 8000dee:	f002 f88d 	bl	8002f0c <xQueueGenericReceive>
		ulButtonPressCounts++;
 8000df2:	f240 4378 	movw	r3, #1144	; 0x478
 8000df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	1c5a      	adds	r2, r3, #1
 8000dfe:	f240 4378 	movw	r3, #1144	; 0x478
 8000e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e06:	601a      	str	r2, [r3, #0]
	}
 8000e08:	e7e7      	b.n	8000dda <prvButtonTestTask+0x32>
 8000e0a:	bf00      	nop

08000e0c <prvSetupHardware>:
}
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	/* Setup STM32 system (clock, PLL and Flash configuration) */
	SystemInit();
 8000e10:	f000 f99c 	bl	800114c <SystemInit>

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8000e14:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000e18:	f005 ff5e 	bl	8006cd8 <NVIC_PriorityGroupConfig>

	/* Setup the LED outputs. */
	vParTestInitialise();
 8000e1c:	f000 f940 	bl	80010a0 <vParTestInitialise>

	/* Configure the button input.  This configures the interrupt to use the
	lowest interrupt priority, so it is ok to use the ISR safe FreeRTOS API
	from the button interrupt handler. */
	//STM_EVAL_PBInit( BUTTON_USER, BUTTON_MODE_EXTI );
}
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop

08000e24 <vApplicationTickHook>:
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	#if ( mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY == 0 )
	{
		/* Just to verify that the interrupt nesting behaves as expected,
		increment ulFPUInterruptNesting on entry, and decrement it on exit. */
		ulFPUInterruptNesting++;
 8000e28:	f240 436c 	movw	r3, #1132	; 0x46c
 8000e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	1c5a      	adds	r2, r3, #1
 8000e34:	f240 436c 	movw	r3, #1132	; 0x46c
 8000e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e3c:	601a      	str	r2, [r3, #0]

		/* Trigger a timer 2 interrupt, which will fill the registers with a
		different value and itself trigger a timer 3 interrupt.  Note that the
		timers are not actually used.  The timer 2 and 3 interrupt vectors are
		just used for convenience. */
		NVIC_SetPendingIRQ( TIM2_IRQn );
 8000e3e:	201c      	movs	r0, #28
 8000e40:	f7ff fef2 	bl	8000c28 <NVIC_SetPendingIRQ>
		/* Ensure that, after returning from the nested interrupts, all the FPU
		registers contain the value to which they were set by the tick hook
		function. */
		//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 0UL ) );

		ulFPUInterruptNesting--;
 8000e44:	f240 436c 	movw	r3, #1132	; 0x46c
 8000e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	1e5a      	subs	r2, r3, #1
 8000e50:	f240 436c 	movw	r3, #1132	; 0x46c
 8000e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e58:	601a      	str	r2, [r3, #0]
	}
	#endif
}
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <prvSetupNestedFPUInterruptsTest>:
/*-----------------------------------------------------------*/

static void prvSetupNestedFPUInterruptsTest( void )
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

	/* Enable the TIM2 interrupt in the NVIC.  The timer itself is not used,
	just its interrupt vector to force nesting from software.  TIM2 must have
	a lower priority than TIM3, and both must have priorities above
	configMAX_SYSCALL_INTERRUPT_PRIORITY. */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8000e62:	231c      	movs	r3, #28
 8000e64:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY - 1;
 8000e66:	2304      	movs	r3, #4
 8000e68:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	71fb      	strb	r3, [r7, #7]
	NVIC_Init( &NVIC_InitStructure );
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	4618      	mov	r0, r3
 8000e76:	f005 ff5b 	bl	8006d30 <NVIC_Init>

	/* Enable the TIM3 interrupt in the NVIC.  The timer itself is not used,
	just its interrupt vector to force nesting from software.  TIM2 must have
	a lower priority than TIM3, and both must have priorities above
	configMAX_SYSCALL_INTERRUPT_PRIORITY. */
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8000e7a:	231d      	movs	r3, #29
 8000e7c:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY - 2;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000e86:	2301      	movs	r3, #1
 8000e88:	71fb      	strb	r3, [r7, #7]
	NVIC_Init( &NVIC_InitStructure );
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f005 ff4f 	bl	8006d30 <NVIC_Init>
}
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <TIM3_IRQHandler>:
/*-----------------------------------------------------------*/

void TIM3_IRQHandler( void )
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8000e9c:	f240 436c 	movw	r3, #1132	; 0x46c
 8000ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	1c5a      	adds	r2, r3, #1
 8000ea8:	f240 436c 	movw	r3, #1132	; 0x46c
 8000eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000eb0:	601a      	str	r2, [r3, #0]

	/* This is the highest priority interrupt in the chain of forced nesting
	interrupts, so latch the maximum value reached by ulFPUInterruptNesting.
	This is done purely to allow verification that the nesting depth reaches
	that intended. */
	if( ulFPUInterruptNesting > ulMaxFPUInterruptNesting )
 8000eb2:	f240 436c 	movw	r3, #1132	; 0x46c
 8000eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	f240 4370 	movw	r3, #1136	; 0x470
 8000ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d909      	bls.n	8000ede <TIM3_IRQHandler+0x46>
	{
		ulMaxFPUInterruptNesting = ulFPUInterruptNesting;
 8000eca:	f240 436c 	movw	r3, #1132	; 0x46c
 8000ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	f240 4370 	movw	r3, #1136	; 0x470
 8000ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000edc:	601a      	str	r2, [r3, #0]

	/* Fill the FPU registers with 99 to overwrite the values written by
	TIM2_IRQHandler(). */
	//vRegTestClearFlopRegistersToParameterValue( 99UL );

	ulFPUInterruptNesting--;
 8000ede:	f240 436c 	movw	r3, #1132	; 0x46c
 8000ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	1e5a      	subs	r2, r3, #1
 8000eea:	f240 436c 	movw	r3, #1132	; 0x46c
 8000eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ef2:	601a      	str	r2, [r3, #0]
}
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <TIM2_IRQHandler>:
/*-----------------------------------------------------------*/

void TIM2_IRQHandler( void )
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8000f00:	f240 436c 	movw	r3, #1132	; 0x46c
 8000f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	f240 436c 	movw	r3, #1132	; 0x46c
 8000f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f14:	601a      	str	r2, [r3, #0]
	/* Fill the FPU registers with 1. */
	//vRegTestClearFlopRegistersToParameterValue( 1UL );

	/* Trigger a timer 3 interrupt, which will fill the registers with a
	different value. */
	NVIC_SetPendingIRQ( TIM3_IRQn );
 8000f16:	201d      	movs	r0, #29
 8000f18:	f7ff fe86 	bl	8000c28 <NVIC_SetPendingIRQ>
	/* Ensure that, after returning from the nesting interrupt, all the FPU
	registers contain the value to which they were set by this interrupt
	function. */
	//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 1UL ) );

	ulFPUInterruptNesting--;
 8000f1c:	f240 436c 	movw	r3, #1132	; 0x46c
 8000f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	1e5a      	subs	r2, r3, #1
 8000f28:	f240 436c 	movw	r3, #1132	; 0x46c
 8000f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f30:	601a      	str	r2, [r3, #0]
}
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <prvOptionallyCreateComprehensveTestApplication>:
/*-----------------------------------------------------------*/

static void prvOptionallyCreateComprehensveTestApplication( void )
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af04      	add	r7, sp, #16
	#if ( mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY == 0 )
	{
	xTimerHandle xCheckTimer = NULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]

		/* Configure the interrupts used to test FPU registers being used from
		nested interrupts. */
		prvSetupNestedFPUInterruptsTest();
 8000f3e:	f7ff ff8d 	bl	8000e5c <prvSetupNestedFPUInterruptsTest>

		/* Start all the other standard demo/test tasks. */
		vStartIntegerMathTasks( tskIDLE_PRIORITY );
 8000f42:	2000      	movs	r0, #0
 8000f44:	f005 f944 	bl	80061d0 <vStartIntegerMathTasks>
		vStartDynamicPriorityTasks();
 8000f48:	f003 ff7a 	bl	8004e40 <vStartDynamicPriorityTasks>
		vStartBlockingQueueTasks( mainBLOCK_Q_PRIORITY );
 8000f4c:	2002      	movs	r0, #2
 8000f4e:	f003 f863 	bl	8004018 <vStartBlockingQueueTasks>
		vCreateBlockTimeTasks();
 8000f52:	f003 fa17 	bl	8004384 <vCreateBlockTimeTasks>
		vStartCountingSemaphoreTasks();
 8000f56:	f003 fd2b 	bl	80049b0 <vStartCountingSemaphoreTasks>
		vStartGenericQueueTasks( tskIDLE_PRIORITY );
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f004 fc96 	bl	800588c <vStartGenericQueueTasks>
		vStartRecursiveMutexTasks();
 8000f60:	f005 fab8 	bl	80064d4 <vStartRecursiveMutexTasks>
		vStartPolledQueueTasks( mainQUEUE_POLL_PRIORITY );
 8000f64:	2002      	movs	r0, #2
 8000f66:	f005 f9c1 	bl	80062ec <vStartPolledQueueTasks>
		vStartSemaphoreTasks( mainSEM_TEST_PRIORITY );
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f005 fcde 	bl	800692c <vStartSemaphoreTasks>

		/* Most importantly, start the tasks that use the FPU. */
		vStartMathTasks( mainFLOP_TASK_PRIORITY );
 8000f70:	2000      	movs	r0, #0
 8000f72:	f004 f9d7 	bl	8005324 <vStartMathTasks>
		//xTaskCreate( vRegTest1Task, ( signed char * ) "Reg1", configMINIMAL_STACK_SIZE, ( void * ) NULL, tskIDLE_PRIORITY, NULL );
		//xTaskCreate( vRegTest2Task, ( signed char * ) "Reg2", configMINIMAL_STACK_SIZE, ( void * ) NULL, tskIDLE_PRIORITY, NULL );

		/* Create the semaphore that is used to demonstrate a task being
		synchronised with an interrupt. */
		vSemaphoreCreateBinary( xTestSemaphore );
 8000f76:	2001      	movs	r0, #1
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	f001 fd7c 	bl	8002a78 <xQueueGenericCreate>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f240 4374 	movw	r3, #1140	; 0x474
 8000f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	f240 4374 	movw	r3, #1140	; 0x474
 8000f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00a      	beq.n	8000fb0 <prvOptionallyCreateComprehensveTestApplication+0x7c>
 8000f9a:	f240 4374 	movw	r3, #1140	; 0x474
 8000f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2300      	movs	r3, #0
 8000fac:	f001 fe74 	bl	8002c98 <xQueueGenericSend>

		/* Create the task that is unblocked by the demonstration interrupt. */
		xTaskCreate( prvButtonTestTask, ( signed char * ) "BtnTest", configMINIMAL_STACK_SIZE, ( void * ) NULL, tskIDLE_PRIORITY, NULL );
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	2300      	movs	r3, #0
 8000fba:	9302      	str	r3, [sp, #8]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	9303      	str	r3, [sp, #12]
 8000fc0:	f640 50a9 	movw	r0, #3497	; 0xda9
 8000fc4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000fc8:	f247 31c8 	movw	r1, #29640	; 0x73c8
 8000fcc:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000fd0:	2282      	movs	r2, #130	; 0x82
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f000 f9ce 	bl	8001374 <xTaskGenericCreate>

		/* Create the software timer that performs the 'check' functionality,
		as described at the top of this file. */
		xCheckTimer = xTimerCreate( ( const signed char * ) "CheckTimer",/* A text name, purely to help debugging. */
 8000fd8:	f640 4375 	movw	r3, #3189	; 0xc75
 8000fdc:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	f247 30d0 	movw	r0, #29648	; 0x73d0
 8000fe6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000fea:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f002 fcbb 	bl	800396c <xTimerCreate>
 8000ff6:	6078      	str	r0, [r7, #4]
									pdTRUE,								/* This is an auto-reload timer, so xAutoReload is set to pdTRUE. */
									( void * ) 0,						/* The ID is not used, so can be set to anything. */
									prvCheckTimerCallback				/* The callback function that inspects the status of all the other tasks. */
								  );

		if( xCheckTimer != NULL )
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00a      	beq.n	8001014 <prvOptionallyCreateComprehensveTestApplication+0xe0>
		{
			xTimerStart( xCheckTimer, mainDONT_BLOCK );
 8000ffe:	f000 fec3 	bl	8001d88 <xTaskGetTickCount>
 8001002:	4603      	mov	r3, r0
 8001004:	2200      	movs	r2, #0
 8001006:	9200      	str	r2, [sp, #0]
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	2101      	movs	r1, #1
 800100c:	461a      	mov	r2, r3
 800100e:	2300      	movs	r3, #0
 8001010:	f002 fce2 	bl	80039d8 <xTimerGenericCommand>
		}

		/* This task has to be created last as it keeps account of the number of
		tasks it expects to see running. */
		vCreateSuicidalTasks( mainCREATOR_TASK_PRIORITY );
 8001014:	2003      	movs	r0, #3
 8001016:	f003 fe0b 	bl	8004c30 <vCreateSuicidalTasks>
		( void ) vRegTest2Task;
		( void ) prvCheckTimerCallback;
		( void ) prvSetupNestedFPUInterruptsTest;
	}
	#endif /* mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY */
}
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <EXTI9_5_IRQHandler>:
/*-----------------------------------------------------------*/

void EXTI9_5_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
long lHigherPriorityTaskWoken = pdFALSE;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]

	/* Only line 6 is enabled, so there is no need to test which line generated
	the interrupt. */
	EXTI_ClearITPendingBit( EXTI_Line6 );
 800102a:	2040      	movs	r0, #64	; 0x40
 800102c:	f005 ff0a 	bl	8006e44 <EXTI_ClearITPendingBit>

	/* This interrupt does nothing more than demonstrate how to synchronise a
	task with an interrupt.  First the handler releases a semaphore.
	lHigherPriorityTaskWoken has been initialised to zero. */
	xSemaphoreGiveFromISR( xTestSemaphore, &lHigherPriorityTaskWoken );
 8001030:	f240 4374 	movw	r3, #1140	; 0x474
 8001034:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	4610      	mov	r0, r2
 800103e:	2100      	movs	r1, #0
 8001040:	461a      	mov	r2, r3
 8001042:	2300      	movs	r3, #0
 8001044:	f001 feee 	bl	8002e24 <xQueueGenericSendFromISR>
	semaphore caused the task to unblock, and the unblocked task has a priority
	higher than the currently executing task (the task that this interrupt
	interrupted), then lHigherPriorityTaskWoken will have been set to pdTRUE.
	Passing pdTRUE into the following macro call will cause this interrupt to
	return directly to the unblocked, higher priority, task. */
	portEND_SWITCHING_ISR( lHigherPriorityTaskWoken );
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d006      	beq.n	800105c <EXTI9_5_IRQHandler+0x3c>
 800104e:	f64e 5304 	movw	r3, #60676	; 0xed04
 8001052:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800105a:	601a      	str	r2, [r3, #0]
}
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop

08001064 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 8001068:	f002 fbaa 	bl	80037c0 <ulPortSetInterruptMask>
	for( ;; );
 800106c:	e7fe      	b.n	800106c <vApplicationMallocFailedHook+0x8>
 800106e:	bf00      	nop

08001070 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 8001086:	f002 fb9b 	bl	80037c0 <ulPortSetInterruptMask>
	for( ;; );
 800108a:	e7fe      	b.n	800108a <vApplicationStackOverflowHook+0xe>

0800108c <assert_failed>:
}
///*-----------------------------------------------------------*/
void assert_failed(uint8_t* file, uint32_t line){
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]

}
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <vParTestInitialise>:
static const Led_TypeDef xLEDs[ partstMAX_LEDS ] = { LED3, LED4, LED5, LED6 };

/*-----------------------------------------------------------*/

void vParTestInitialise( void )
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	/* Initialise all four LEDs that are built onto the starter kit. */
	STM_EVAL_LEDInit( LED3 );
 80010a4:	2001      	movs	r0, #1
 80010a6:	f005 fdc5 	bl	8006c34 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED4 );
 80010aa:	2000      	movs	r0, #0
 80010ac:	f005 fdc2 	bl	8006c34 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED5 );
 80010b0:	2002      	movs	r0, #2
 80010b2:	f005 fdbf 	bl	8006c34 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED6 );
 80010b6:	2003      	movs	r0, #3
 80010b8:	f005 fdbc 	bl	8006c34 <STM_EVAL_LEDInit>
}
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop

080010c0 <vParTestToggleLED>:
	}
}
/*-----------------------------------------------------------*/

void vParTestToggleLED( unsigned long ulLED )
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	if( ulLED < partstMAX_LEDS )
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d80d      	bhi.n	80010ea <vParTestToggleLED+0x2a>
	{
		taskENTER_CRITICAL();
 80010ce:	f002 fb2d 	bl	800372c <vPortEnterCritical>
		{
			STM_EVAL_LEDToggle( xLEDs[ ulLED ] );
 80010d2:	f247 63a8 	movw	r3, #30376	; 0x76a8
 80010d6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f005 fdd7 	bl	8006c94 <STM_EVAL_LEDToggle>
		}
		taskEXIT_CRITICAL();
 80010e6:	f002 fb49 	bl	800377c <vPortExitCritical>
	}
}
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <Reset_Handler>:
 80010f0:	2100      	movs	r1, #0
 80010f2:	e003      	b.n	80010fc <LoopCopyDataInit>

080010f4 <CopyDataInit>:
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <LoopFillZerobss+0x20>)
 80010f6:	585b      	ldr	r3, [r3, r1]
 80010f8:	5043      	str	r3, [r0, r1]
 80010fa:	3104      	adds	r1, #4

080010fc <LoopCopyDataInit>:
 80010fc:	480d      	ldr	r0, [pc, #52]	; (8001134 <LoopFillZerobss+0x24>)
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <LoopFillZerobss+0x28>)
 8001100:	1842      	adds	r2, r0, r1
 8001102:	429a      	cmp	r2, r3
 8001104:	d3f6      	bcc.n	80010f4 <CopyDataInit>
 8001106:	4a0d      	ldr	r2, [pc, #52]	; (800113c <LoopFillZerobss+0x2c>)
 8001108:	e002      	b.n	8001110 <LoopFillZerobss>

0800110a <FillZerobss>:
 800110a:	2300      	movs	r3, #0
 800110c:	f842 3b04 	str.w	r3, [r2], #4

08001110 <LoopFillZerobss>:
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <LoopFillZerobss+0x30>)
 8001112:	429a      	cmp	r2, r3
 8001114:	d3f9      	bcc.n	800110a <FillZerobss>
 8001116:	480b      	ldr	r0, [pc, #44]	; (8001144 <LoopFillZerobss+0x34>)
 8001118:	6801      	ldr	r1, [r0, #0]
 800111a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800111e:	6001      	str	r1, [r0, #0]
 8001120:	f000 f814 	bl	800114c <SystemInit>
 8001124:	f006 f842 	bl	80071ac <__libc_init_array>
 8001128:	f7ff fd98 	bl	8000c5c <main>
 800112c:	4770      	bx	lr
 800112e:	0000      	.short	0x0000
 8001130:	08007704 	.word	0x08007704
 8001134:	20000000 	.word	0x20000000
 8001138:	20000448 	.word	0x20000448
 800113c:	20000448 	.word	0x20000448
 8001140:	20013328 	.word	0x20013328
 8001144:	e000ed88 	.word	0xe000ed88

08001148 <ADC_IRQHandler>:
 8001148:	e7fe      	b.n	8001148 <ADC_IRQHandler>
 800114a:	0000      	movs	r0, r0

0800114c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001150:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001154:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001158:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800115c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001160:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8001164:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800116c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001170:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001174:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001178:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800117c:	6812      	ldr	r2, [r2, #0]
 800117e:	f042 0201 	orr.w	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001184:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001188:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001190:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001194:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001198:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800119c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80011a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011aa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80011ac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011b4:	f243 0210 	movw	r2, #12304	; 0x3010
 80011b8:	f2c2 4200 	movt	r2, #9216	; 0x2400
 80011bc:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011be:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011c6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80011ca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011d4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80011d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80011e2:	f000 f809 	bl	80011f8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011e6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80011ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80011ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011f2:	609a      	str	r2, [r3, #8]
#endif
}
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop

080011f8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	2300      	movs	r3, #0
 8001204:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001206:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800120a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800120e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001212:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800121c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800121e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001222:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122c:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3301      	adds	r3, #1
 8001232:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d103      	bne.n	8001242 <SetSysClock+0x4a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001240:	d1ed      	bne.n	800121e <SetSysClock+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001242:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001246:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <SetSysClock+0x62>
  {
    HSEStatus = (uint32_t)0x01;
 8001254:	2301      	movs	r3, #1
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	e001      	b.n	800125e <SetSysClock+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	f040 8082 	bne.w	800136a <SetSysClock+0x172>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001266:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800126a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800126e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001272:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001276:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001278:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800127c:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800127e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001282:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001286:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800128a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800128e:	6812      	ldr	r2, [r2, #0]
 8001290:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001294:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001296:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800129a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800129e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80012a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012a6:	6892      	ldr	r2, [r2, #8]
 80012a8:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80012aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012b2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80012b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012ba:	6892      	ldr	r2, [r2, #8]
 80012bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012c0:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80012c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012ca:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80012ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012d2:	6892      	ldr	r2, [r2, #8]
 80012d4:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80012d8:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80012da:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012e2:	f644 3219 	movw	r2, #19225	; 0x4b19
 80012e6:	f2c0 7240 	movt	r2, #1856	; 0x740
 80012ea:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80012ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80012f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001302:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001304:	bf00      	nop
 8001306:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800130a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f6      	beq.n	8001306 <SetSysClock+0x10e>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 8001318:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800131c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001320:	f240 6204 	movw	r2, #1540	; 0x604
 8001324:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001326:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800132a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800132e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001332:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001336:	6892      	ldr	r2, [r2, #8]
 8001338:	f022 0203 	bic.w	r2, r2, #3
 800133c:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800133e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001342:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001346:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800134a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800134e:	6892      	ldr	r2, [r2, #8]
 8001350:	f042 0202 	orr.w	r2, r2, #2
 8001354:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001356:	bf00      	nop
 8001358:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800135c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b08      	cmp	r3, #8
 8001368:	d1f6      	bne.n	8001358 <SetSysClock+0x160>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af02      	add	r7, sp, #8
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	4613      	mov	r3, r2
 8001382:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d102      	bne.n	8001390 <xTaskGenericCreate+0x1c>
 800138a:	f002 fa19 	bl	80037c0 <ulPortSetInterruptMask>
 800138e:	e7fe      	b.n	800138e <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 8001390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001392:	2b04      	cmp	r3, #4
 8001394:	d902      	bls.n	800139c <xTaskGenericCreate+0x28>
 8001396:	f002 fa13 	bl	80037c0 <ulPortSetInterruptMask>
 800139a:	e7fe      	b.n	800139a <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	4618      	mov	r0, r3
 80013a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80013a2:	f001 f94b 	bl	800263c <prvAllocateTCBAndStack>
 80013a6:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 809c 	beq.w	80014e8 <xTaskGenericCreate+0x174>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013ba:	3b01      	subs	r3, #1
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f023 0307 	bic.w	r3, r3, #7
 80013c8:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <xTaskGenericCreate+0x66>
 80013d4:	f002 f9f4 	bl	80037c0 <ulPortSetInterruptMask>
 80013d8:	e7fe      	b.n	80013d8 <xTaskGenericCreate+0x64>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	69b8      	ldr	r0, [r7, #24]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e6:	f001 f805 	bl	80023f4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80013ea:	6978      	ldr	r0, [r7, #20]
 80013ec:	68f9      	ldr	r1, [r7, #12]
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	f002 f89a 	bl	8003528 <pxPortInitialiseStack>
 80013f4:	4602      	mov	r2, r0
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80013fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <xTaskGenericCreate+0x92>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8001406:	f002 f991 	bl	800372c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 800140a:	f240 5360 	movw	r3, #1376	; 0x560
 800140e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	1c5a      	adds	r2, r3, #1
 8001416:	f240 5360 	movw	r3, #1376	; 0x560
 800141a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800141e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8001420:	f240 4388 	movw	r3, #1160	; 0x488
 8001424:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10f      	bne.n	800144e <xTaskGenericCreate+0xda>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 800142e:	f240 4388 	movw	r3, #1160	; 0x488
 8001432:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800143a:	f240 5360 	movw	r3, #1376	; 0x560
 800143e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d118      	bne.n	800147a <xTaskGenericCreate+0x106>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8001448:	f001 f81e 	bl	8002488 <prvInitialiseTaskLists>
 800144c:	e015      	b.n	800147a <xTaskGenericCreate+0x106>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 800144e:	f240 536c 	movw	r3, #1388	; 0x56c
 8001452:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10e      	bne.n	800147a <xTaskGenericCreate+0x106>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800145c:	f240 4388 	movw	r3, #1160	; 0x488
 8001460:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146a:	429a      	cmp	r2, r3
 800146c:	d805      	bhi.n	800147a <xTaskGenericCreate+0x106>
					{
						pxCurrentTCB = pxNewTCB;
 800146e:	f240 4388 	movw	r3, #1160	; 0x488
 8001472:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 800147a:	f240 537c 	movw	r3, #1404	; 0x57c
 800147e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	f240 537c 	movw	r3, #1404	; 0x57c
 800148a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800148e:	601a      	str	r2, [r3, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001490:	f240 537c 	movw	r3, #1404	; 0x57c
 8001494:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a2:	2201      	movs	r2, #1
 80014a4:	409a      	lsls	r2, r3
 80014a6:	f240 5368 	movw	r3, #1384	; 0x568
 80014aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	f240 5368 	movw	r3, #1384	; 0x568
 80014b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	f240 428c 	movw	r2, #1164	; 0x48c
 80014cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80014d0:	441a      	add	r2, r3
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	3304      	adds	r3, #4
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f001 ff9f 	bl	800341c <vListInsertEnd>

			xReturn = pdPASS;
 80014de:	2301      	movs	r3, #1
 80014e0:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 80014e2:	f002 f94b 	bl	800377c <vPortExitCritical>
 80014e6:	e002      	b.n	80014ee <xTaskGenericCreate+0x17a>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d111      	bne.n	8001518 <xTaskGenericCreate+0x1a4>
	{
		if( xSchedulerRunning != pdFALSE )
 80014f4:	f240 536c 	movw	r3, #1388	; 0x56c
 80014f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00a      	beq.n	8001518 <xTaskGenericCreate+0x1a4>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8001502:	f240 4388 	movw	r3, #1160	; 0x488
 8001506:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800150e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001510:	429a      	cmp	r2, r3
 8001512:	d201      	bcs.n	8001518 <xTaskGenericCreate+0x1a4>
			{
				taskYIELD_IF_USING_PREEMPTION();
 8001514:	f002 f8f8 	bl	8003708 <vPortYield>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
 8001518:	69fb      	ldr	r3, [r7, #28]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3720      	adds	r7, #32
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop

08001524 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800152c:	f002 f8fe 	bl	800372c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d105      	bne.n	8001542 <vTaskDelete+0x1e>
 8001536:	f240 4388 	movw	r3, #1160	; 0x488
 800153a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	e000      	b.n	8001544 <vTaskDelete+0x20>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	3304      	adds	r3, #4
 800154a:	4618      	mov	r0, r3
 800154c:	f001 ffc2 	bl	80034d4 <uxListRemove>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d11e      	bne.n	8001594 <vTaskDelete+0x70>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800155a:	f240 428c 	movw	r2, #1164	; 0x48c
 800155e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001562:	460b      	mov	r3, r1
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d110      	bne.n	8001594 <vTaskDelete+0x70>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	2201      	movs	r2, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43da      	mvns	r2, r3
 800157e:	f240 5368 	movw	r3, #1384	; 0x568
 8001582:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	401a      	ands	r2, r3
 800158a:	f240 5368 	movw	r3, #1384	; 0x568
 800158e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001592:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001598:	2b00      	cmp	r3, #0
 800159a:	d004      	beq.n	80015a6 <vTaskDelete+0x82>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3318      	adds	r3, #24
 80015a0:	4618      	mov	r0, r3
 80015a2:	f001 ff97 	bl	80034d4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	3304      	adds	r3, #4
 80015aa:	f240 5034 	movw	r0, #1332	; 0x534
 80015ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80015b2:	4619      	mov	r1, r3
 80015b4:	f001 ff32 	bl	800341c <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 80015b8:	f240 5348 	movw	r3, #1352	; 0x548
 80015bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	f240 5348 	movw	r3, #1352	; 0x548
 80015c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015cc:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 80015ce:	f240 537c 	movw	r3, #1404	; 0x57c
 80015d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	1c5a      	adds	r2, r3, #1
 80015da:	f240 537c 	movw	r3, #1404	; 0x57c
 80015de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015e2:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80015e4:	f002 f8ca 	bl	800377c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80015e8:	f240 536c 	movw	r3, #1388	; 0x56c
 80015ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d01a      	beq.n	800162c <vTaskDelete+0x108>
		{
			if( pxTCB == pxCurrentTCB )
 80015f6:	f240 4388 	movw	r3, #1160	; 0x488
 80015fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	429a      	cmp	r2, r3
 8001604:	d10c      	bne.n	8001620 <vTaskDelete+0xfc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8001606:	f240 5380 	movw	r3, #1408	; 0x580
 800160a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d002      	beq.n	800161a <vTaskDelete+0xf6>
 8001614:	f002 f8d4 	bl	80037c0 <ulPortSetInterruptMask>
 8001618:	e7fe      	b.n	8001618 <vTaskDelete+0xf4>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
 800161a:	f002 f875 	bl	8003708 <vPortYield>
 800161e:	e005      	b.n	800162c <vTaskDelete+0x108>
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
 8001620:	f002 f884 	bl	800372c <vPortEnterCritical>
				{
					prvResetNextTaskUnblockTime();
 8001624:	f001 f84c 	bl	80026c0 <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
 8001628:	f002 f8a8 	bl	800377c <vPortExitCritical>
			}
		}
	}
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop

08001634 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <vTaskDelayUntil+0x1a>
 8001648:	f002 f8ba 	bl	80037c0 <ulPortSetInterruptMask>
 800164c:	e7fe      	b.n	800164c <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <vTaskDelayUntil+0x26>
 8001654:	f002 f8b4 	bl	80037c0 <ulPortSetInterruptMask>
 8001658:	e7fe      	b.n	8001658 <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
 800165a:	f240 5380 	movw	r3, #1408	; 0x580
 800165e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <vTaskDelayUntil+0x3a>
 8001668:	f002 f8aa 	bl	80037c0 <ulPortSetInterruptMask>
 800166c:	e7fe      	b.n	800166c <vTaskDelayUntil+0x38>

		vTaskSuspendAll();
 800166e:	f000 facf 	bl	8001c10 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8001672:	f240 5364 	movw	r3, #1380	; 0x564
 8001676:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	4413      	add	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	429a      	cmp	r2, r3
 8001690:	d90b      	bls.n	80016aa <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	429a      	cmp	r2, r3
 800169a:	d911      	bls.n	80016c0 <vTaskDelayUntil+0x8c>
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d90d      	bls.n	80016c0 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 80016a4:	2301      	movs	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	e00a      	b.n	80016c0 <vTaskDelayUntil+0x8c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d803      	bhi.n	80016bc <vTaskDelayUntil+0x88>
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d901      	bls.n	80016c0 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d023      	beq.n	8001714 <vTaskDelayUntil+0xe0>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80016cc:	f240 4388 	movw	r3, #1160	; 0x488
 80016d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	3304      	adds	r3, #4
 80016d8:	4618      	mov	r0, r3
 80016da:	f001 fefb 	bl	80034d4 <uxListRemove>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d114      	bne.n	800170e <vTaskDelayUntil+0xda>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80016e4:	f240 4388 	movw	r3, #1160	; 0x488
 80016e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	2201      	movs	r2, #1
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43da      	mvns	r2, r3
 80016f8:	f240 5368 	movw	r3, #1384	; 0x568
 80016fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	401a      	ands	r2, r3
 8001704:	f240 5368 	movw	r3, #1384	; 0x568
 8001708:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800170c:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 ff50 	bl	80025b4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8001714:	f000 fa8e 	bl	8001c34 <xTaskResumeAll>
 8001718:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <vTaskDelayUntil+0xf0>
		{
			portYIELD_WITHIN_API();
 8001720:	f001 fff2 	bl	8003708 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop

0800172c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d03a      	beq.n	80017b4 <vTaskDelay+0x88>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800173e:	f240 5380 	movw	r3, #1408	; 0x580
 8001742:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <vTaskDelay+0x26>
 800174c:	f002 f838 	bl	80037c0 <ulPortSetInterruptMask>
 8001750:	e7fe      	b.n	8001750 <vTaskDelay+0x24>
			vTaskSuspendAll();
 8001752:	f000 fa5d 	bl	8001c10 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8001756:	f240 5364 	movw	r3, #1380	; 0x564
 800175a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4413      	add	r3, r2
 8001764:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001766:	f240 4388 	movw	r3, #1160	; 0x488
 800176a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	3304      	adds	r3, #4
 8001772:	4618      	mov	r0, r3
 8001774:	f001 feae 	bl	80034d4 <uxListRemove>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d114      	bne.n	80017a8 <vTaskDelay+0x7c>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800177e:	f240 4388 	movw	r3, #1160	; 0x488
 8001782:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	2201      	movs	r2, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43da      	mvns	r2, r3
 8001792:	f240 5368 	movw	r3, #1384	; 0x568
 8001796:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	401a      	ands	r2, r3
 800179e:	f240 5368 	movw	r3, #1384	; 0x568
 80017a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017a6:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80017a8:	68b8      	ldr	r0, [r7, #8]
 80017aa:	f000 ff03 	bl	80025b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80017ae:	f000 fa41 	bl	8001c34 <xTaskResumeAll>
 80017b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <vTaskDelay+0x92>
		{
			portYIELD_WITHIN_API();
 80017ba:	f001 ffa5 	bl	8003708 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 80017cc:	f001 ffae 	bl	800372c <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d105      	bne.n	80017e2 <uxTaskPriorityGet+0x1e>
 80017d6:	f240 4388 	movw	r3, #1160	; 0x488
 80017da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	e000      	b.n	80017e4 <uxTaskPriorityGet+0x20>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 80017ec:	f001 ffc6 	bl	800377c <vPortExitCritical>

		return uxReturn;
 80017f0:	68bb      	ldr	r3, [r7, #8]
	}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop

080017fc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	2b04      	cmp	r3, #4
 800180e:	d902      	bls.n	8001816 <vTaskPrioritySet+0x1a>
 8001810:	f001 ffd6 	bl	80037c0 <ulPortSetInterruptMask>
 8001814:	e7fe      	b.n	8001814 <vTaskPrioritySet+0x18>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b04      	cmp	r3, #4
 800181a:	d901      	bls.n	8001820 <vTaskPrioritySet+0x24>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800181c:	2304      	movs	r3, #4
 800181e:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8001820:	f001 ff84 	bl	800372c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d105      	bne.n	8001836 <vTaskPrioritySet+0x3a>
 800182a:	f240 4388 	movw	r3, #1160	; 0x488
 800182e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	e000      	b.n	8001838 <vTaskPrioritySet+0x3c>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183e:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	f000 808a 	beq.w	800195e <vTaskPrioritySet+0x162>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	429a      	cmp	r2, r3
 8001850:	d913      	bls.n	800187a <vTaskPrioritySet+0x7e>
				{
					if( pxTCB != pxCurrentTCB )
 8001852:	f240 4388 	movw	r3, #1160	; 0x488
 8001856:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	429a      	cmp	r2, r3
 8001860:	d015      	beq.n	800188e <vTaskPrioritySet+0x92>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8001862:	f240 4388 	movw	r3, #1160	; 0x488
 8001866:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d80c      	bhi.n	800188e <vTaskPrioritySet+0x92>
						{
							xYieldRequired = pdTRUE;
 8001874:	2301      	movs	r3, #1
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	e009      	b.n	800188e <vTaskPrioritySet+0x92>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800187a:	f240 4388 	movw	r3, #1160	; 0x488
 800187e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	429a      	cmp	r2, r3
 8001888:	d101      	bne.n	800188e <vTaskPrioritySet+0x92>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800188a:	2301      	movs	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	429a      	cmp	r2, r3
 800189e:	d102      	bne.n	80018a6 <vTaskPrioritySet+0xaa>
					{
						pxTCB->uxPriority = uxNewPriority;
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	649a      	str	r2, [r3, #72]	; 0x48
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db04      	blt.n	80018be <vTaskPrioritySet+0xc2>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	f1c3 0205 	rsb	r2, r3, #5
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	6959      	ldr	r1, [r3, #20]
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	f240 428c 	movw	r2, #1164	; 0x48c
 80018d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80018d4:	4413      	add	r3, r2
 80018d6:	4299      	cmp	r1, r3
 80018d8:	d101      	bne.n	80018de <vTaskPrioritySet+0xe2>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <vTaskPrioritySet+0xe4>
 80018de:	2300      	movs	r3, #0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d037      	beq.n	8001954 <vTaskPrioritySet+0x158>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	3304      	adds	r3, #4
 80018e8:	4618      	mov	r0, r3
 80018ea:	f001 fdf3 	bl	80034d4 <uxListRemove>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10f      	bne.n	8001914 <vTaskPrioritySet+0x118>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2201      	movs	r2, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43da      	mvns	r2, r3
 80018fe:	f240 5368 	movw	r3, #1384	; 0x568
 8001902:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	401a      	ands	r2, r3
 800190a:	f240 5368 	movw	r3, #1384	; 0x568
 800190e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001912:	601a      	str	r2, [r3, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	2201      	movs	r2, #1
 800191a:	409a      	lsls	r2, r3
 800191c:	f240 5368 	movw	r3, #1384	; 0x568
 8001920:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	431a      	orrs	r2, r3
 8001928:	f240 5368 	movw	r3, #1384	; 0x568
 800192c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	f240 428c 	movw	r2, #1164	; 0x48c
 8001942:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001946:	441a      	add	r2, r3
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	3304      	adds	r3, #4
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f001 fd64 	bl	800341c <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired == pdTRUE )
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <vTaskPrioritySet+0x162>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800195a:	f001 fed5 	bl	8003708 <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800195e:	f001 ff0d 	bl	800377c <vPortExitCritical>
	}
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001970:	f001 fedc 	bl	800372c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d105      	bne.n	8001986 <vTaskSuspend+0x1e>
 800197a:	f240 4388 	movw	r3, #1160	; 0x488
 800197e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	e000      	b.n	8001988 <vTaskSuspend+0x20>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	3304      	adds	r3, #4
 800198e:	4618      	mov	r0, r3
 8001990:	f001 fda0 	bl	80034d4 <uxListRemove>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d11e      	bne.n	80019d8 <vTaskSuspend+0x70>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800199e:	f240 428c 	movw	r2, #1164	; 0x48c
 80019a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80019a6:	460b      	mov	r3, r1
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d110      	bne.n	80019d8 <vTaskSuspend+0x70>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	2201      	movs	r2, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43da      	mvns	r2, r3
 80019c2:	f240 5368 	movw	r3, #1384	; 0x568
 80019c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	401a      	ands	r2, r3
 80019ce:	f240 5368 	movw	r3, #1384	; 0x568
 80019d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019d6:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d004      	beq.n	80019ea <vTaskSuspend+0x82>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3318      	adds	r3, #24
 80019e4:	4618      	mov	r0, r3
 80019e6:	f001 fd75 	bl	80034d4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3304      	adds	r3, #4
 80019ee:	f240 504c 	movw	r0, #1356	; 0x54c
 80019f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80019f6:	4619      	mov	r1, r3
 80019f8:	f001 fd10 	bl	800341c <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 80019fc:	f001 febe 	bl	800377c <vPortExitCritical>

		if( pxTCB == pxCurrentTCB )
 8001a00:	f240 4388 	movw	r3, #1160	; 0x488
 8001a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d129      	bne.n	8001a64 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8001a10:	f240 536c 	movw	r3, #1388	; 0x56c
 8001a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00c      	beq.n	8001a38 <vTaskSuspend+0xd0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8001a1e:	f240 5380 	movw	r3, #1408	; 0x580
 8001a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <vTaskSuspend+0xca>
 8001a2c:	f001 fec8 	bl	80037c0 <ulPortSetInterruptMask>
 8001a30:	e7fe      	b.n	8001a30 <vTaskSuspend+0xc8>
				portYIELD_WITHIN_API();
 8001a32:	f001 fe69 	bl	8003708 <vPortYield>
 8001a36:	e022      	b.n	8001a7e <vTaskSuspend+0x116>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8001a38:	f240 534c 	movw	r3, #1356	; 0x54c
 8001a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	f240 5360 	movw	r3, #1376	; 0x560
 8001a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d106      	bne.n	8001a5e <vTaskSuspend+0xf6>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8001a50:	f240 4388 	movw	r3, #1160	; 0x488
 8001a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e00f      	b.n	8001a7e <vTaskSuspend+0x116>
				}
				else
				{
					vTaskSwitchContext();
 8001a5e:	f000 faa7 	bl	8001fb0 <vTaskSwitchContext>
 8001a62:	e00c      	b.n	8001a7e <vTaskSuspend+0x116>
				}
			}
		}
		else
		{
			if( xSchedulerRunning != pdFALSE )
 8001a64:	f240 536c 	movw	r3, #1388	; 0x56c
 8001a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <vTaskSuspend+0x116>
			{
				/* A task other than the currently running task was suspended,
				reset the next expected unblock time in case it referred to the
				task that is now in the Suspended state. */
				taskENTER_CRITICAL();
 8001a72:	f001 fe5b 	bl	800372c <vPortEnterCritical>
				{
					prvResetNextTaskUnblockTime();
 8001a76:	f000 fe23 	bl	80026c0 <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
 8001a7a:	f001 fe7f 	bl	800377c <vPortExitCritical>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d102      	bne.n	8001aa0 <prvTaskIsTaskSuspended+0x1c>
 8001a9a:	f001 fe91 	bl	80037c0 <ulPortSetInterruptMask>
 8001a9e:	e7fe      	b.n	8001a9e <prvTaskIsTaskSuspended+0x1a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	f240 534c 	movw	r3, #1356	; 0x54c
 8001aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d101      	bne.n	8001ab4 <prvTaskIsTaskSuspended+0x30>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <prvTaskIsTaskSuspended+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d012      	beq.n	8001ae0 <prvTaskIsTaskSuspended+0x5c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001abe:	f240 5320 	movw	r3, #1312	; 0x520
 8001ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d00a      	beq.n	8001ae0 <prvTaskIsTaskSuspended+0x5c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <prvTaskIsTaskSuspended+0x52>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <prvTaskIsTaskSuspended+0x54>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <prvTaskIsTaskSuspended+0x5c>
				{
					xReturn = pdTRUE;
 8001adc:	2301      	movs	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop

08001aec <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d102      	bne.n	8001b04 <vTaskResume+0x18>
 8001afe:	f001 fe5f 	bl	80037c0 <ulPortSetInterruptMask>
 8001b02:	e7fe      	b.n	8001b02 <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d042      	beq.n	8001b90 <vTaskResume+0xa4>
 8001b0a:	f240 4388 	movw	r3, #1160	; 0x488
 8001b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d03a      	beq.n	8001b90 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8001b1a:	f001 fe07 	bl	800372c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f7ff ffb0 	bl	8001a84 <prvTaskIsTaskSuspended>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d130      	bne.n	8001b8c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f001 fcd0 	bl	80034d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	2201      	movs	r2, #1
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	f240 5368 	movw	r3, #1384	; 0x568
 8001b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	f240 5368 	movw	r3, #1384	; 0x568
 8001b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	f240 428c 	movw	r2, #1164	; 0x48c
 8001b62:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001b66:	441a      	add	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f001 fc54 	bl	800341c <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b78:	f240 4388 	movw	r3, #1160	; 0x488
 8001b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d301      	bcc.n	8001b8c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8001b88:	f001 fdbe 	bl	8003708 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8001b8c:	f001 fdf6 	bl	800377c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop

08001b98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	9302      	str	r3, [sp, #8]
 8001baa:	2300      	movs	r3, #0
 8001bac:	9303      	str	r3, [sp, #12]
 8001bae:	f242 30d1 	movw	r0, #9169	; 0x23d1
 8001bb2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001bb6:	f247 31dc 	movw	r1, #29660	; 0x73dc
 8001bba:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001bbe:	2282      	movs	r2, #130	; 0x82
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f7ff fbd7 	bl	8001374 <xTaskGenericCreate>
 8001bc6:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d102      	bne.n	8001bd4 <vTaskStartScheduler+0x3c>
		{
			xReturn = xTimerCreateTimerTask();
 8001bce:	f001 fe9d 	bl	800390c <xTimerCreateTimerTask>
 8001bd2:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d110      	bne.n	8001bfc <vTaskStartScheduler+0x64>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8001bda:	f001 fdf1 	bl	80037c0 <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8001bde:	f240 536c 	movw	r3, #1388	; 0x56c
 8001be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001bea:	f240 5364 	movw	r3, #1380	; 0x564
 8001bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001bf6:	f001 fcfb 	bl	80035f0 <xPortStartScheduler>
 8001bfa:	e005      	b.n	8001c08 <vTaskStartScheduler+0x70>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <vTaskStartScheduler+0x70>
 8001c02:	f001 fddd 	bl	80037c0 <ulPortSetInterruptMask>
 8001c06:	e7fe      	b.n	8001c06 <vTaskStartScheduler+0x6e>
	}
}
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop

08001c10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001c14:	f240 5380 	movw	r3, #1408	; 0x580
 8001c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	f240 5380 	movw	r3, #1408	; 0x580
 8001c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c28:	601a      	str	r2, [r3, #0]
}
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop

08001c34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001c3e:	f240 5380 	movw	r3, #1408	; 0x580
 8001c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <xTaskResumeAll+0x1e>
 8001c4c:	f001 fdb8 	bl	80037c0 <ulPortSetInterruptMask>
 8001c50:	e7fe      	b.n	8001c50 <xTaskResumeAll+0x1c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001c52:	f001 fd6b 	bl	800372c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001c56:	f240 5380 	movw	r3, #1408	; 0x580
 8001c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	1e5a      	subs	r2, r3, #1
 8001c62:	f240 5380 	movw	r3, #1408	; 0x580
 8001c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c6a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c6c:	f240 5380 	movw	r3, #1408	; 0x580
 8001c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d17f      	bne.n	8001d7a <xTaskResumeAll+0x146>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001c7a:	f240 5360 	movw	r3, #1376	; 0x560
 8001c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d078      	beq.n	8001d7a <xTaskResumeAll+0x146>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c88:	e040      	b.n	8001d0c <xTaskResumeAll+0xd8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001c8a:	f240 5320 	movw	r3, #1312	; 0x520
 8001c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	3318      	adds	r3, #24
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f001 fc19 	bl	80034d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f001 fc14 	bl	80034d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	f240 5368 	movw	r3, #1384	; 0x568
 8001cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	f240 5368 	movw	r3, #1384	; 0x568
 8001cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	f240 428c 	movw	r2, #1164	; 0x48c
 8001cda:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001cde:	441a      	add	r2, r3
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f001 fb98 	bl	800341c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf0:	f240 4388 	movw	r3, #1160	; 0x488
 8001cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d305      	bcc.n	8001d0c <xTaskResumeAll+0xd8>
					{
						xYieldPending = pdTRUE;
 8001d00:	f240 5374 	movw	r3, #1396	; 0x574
 8001d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d0c:	f240 5320 	movw	r3, #1312	; 0x520
 8001d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1b7      	bne.n	8001c8a <xTaskResumeAll+0x56>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8001d1a:	f240 5370 	movw	r3, #1392	; 0x570
 8001d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d01d      	beq.n	8001d64 <xTaskResumeAll+0x130>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8001d28:	e015      	b.n	8001d56 <xTaskResumeAll+0x122>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8001d2a:	f000 f84b 	bl	8001dc4 <xTaskIncrementTick>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <xTaskResumeAll+0x10c>
						{
							xYieldPending = pdTRUE;
 8001d34:	f240 5374 	movw	r3, #1396	; 0x574
 8001d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8001d40:	f240 5370 	movw	r3, #1392	; 0x570
 8001d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	1e5a      	subs	r2, r3, #1
 8001d4c:	f240 5370 	movw	r3, #1392	; 0x570
 8001d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d54:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8001d56:	f240 5370 	movw	r3, #1392	; 0x570
 8001d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1e2      	bne.n	8001d2a <xTaskResumeAll+0xf6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8001d64:	f240 5374 	movw	r3, #1396	; 0x574
 8001d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d103      	bne.n	8001d7a <xTaskResumeAll+0x146>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001d72:	2301      	movs	r3, #1
 8001d74:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001d76:	f001 fcc7 	bl	8003708 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001d7a:	f001 fcff 	bl	800377c <vPortExitCritical>

	return xAlreadyYielded;
 8001d7e:	687b      	ldr	r3, [r7, #4]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8001d8e:	f001 fccd 	bl	800372c <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8001d92:	f240 5364 	movw	r3, #1380	; 0x564
 8001d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8001d9e:	f001 fced 	bl	800377c <vPortExitCritical>

	return xTicks;
 8001da2:	687b      	ldr	r3, [r7, #4]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <uxTaskGetNumberOfTasks>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 8001db0:	f240 5360 	movw	r3, #1376	; 0x560
 8001db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001db8:	681b      	ldr	r3, [r3, #0]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001dce:	f240 5380 	movw	r3, #1408	; 0x580
 8001dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f040 80ce 	bne.w	8001f7a <xTaskIncrementTick+0x1b6>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8001dde:	f240 5364 	movw	r3, #1380	; 0x564
 8001de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	f240 5364 	movw	r3, #1380	; 0x564
 8001dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001df2:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8001df4:	f240 5364 	movw	r3, #1380	; 0x564
 8001df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d12d      	bne.n	8001e62 <xTaskIncrementTick+0x9e>
			{
				taskSWITCH_DELAYED_LISTS();
 8001e06:	f240 5318 	movw	r3, #1304	; 0x518
 8001e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <xTaskIncrementTick+0x58>
 8001e16:	f001 fcd3 	bl	80037c0 <ulPortSetInterruptMask>
 8001e1a:	e7fe      	b.n	8001e1a <xTaskIncrementTick+0x56>
 8001e1c:	f240 5318 	movw	r3, #1304	; 0x518
 8001e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	f240 531c 	movw	r3, #1308	; 0x51c
 8001e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	f240 5318 	movw	r3, #1304	; 0x518
 8001e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	f240 531c 	movw	r3, #1308	; 0x51c
 8001e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	f240 5378 	movw	r3, #1400	; 0x578
 8001e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	f240 5378 	movw	r3, #1400	; 0x578
 8001e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	f000 fc2f 	bl	80026c0 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8001e62:	f240 0304 	movw	r3, #4
 8001e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d365      	bcc.n	8001f3e <xTaskIncrementTick+0x17a>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e72:	f240 5318 	movw	r3, #1304	; 0x518
 8001e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <xTaskIncrementTick+0xc2>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <xTaskIncrementTick+0xc4>
 8001e86:	2300      	movs	r3, #0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d007      	beq.n	8001e9c <xTaskIncrementTick+0xd8>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8001e8c:	f240 0304 	movw	r3, #4
 8001e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	601a      	str	r2, [r3, #0]
						break;
 8001e9a:	e050      	b.n	8001f3e <xTaskIncrementTick+0x17a>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001e9c:	f240 5318 	movw	r3, #1304	; 0x518
 8001ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d206      	bcs.n	8001ec8 <xTaskIncrementTick+0x104>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8001eba:	f240 0304 	movw	r3, #4
 8001ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	601a      	str	r2, [r3, #0]
							break;
 8001ec6:	e03a      	b.n	8001f3e <xTaskIncrementTick+0x17a>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f001 fb01 	bl	80034d4 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d004      	beq.n	8001ee4 <xTaskIncrementTick+0x120>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	3318      	adds	r3, #24
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f001 faf8 	bl	80034d4 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	2201      	movs	r2, #1
 8001eea:	409a      	lsls	r2, r3
 8001eec:	f240 5368 	movw	r3, #1384	; 0x568
 8001ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	f240 5368 	movw	r3, #1384	; 0x568
 8001efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	f240 428c 	movw	r2, #1164	; 0x48c
 8001f12:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001f16:	441a      	add	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f001 fa7c 	bl	800341c <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f28:	f240 4388 	movw	r3, #1160	; 0x488
 8001f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d301      	bcc.n	8001f3c <xTaskIncrementTick+0x178>
							{
								xSwitchRequired = pdTRUE;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 8001f3c:	e799      	b.n	8001e72 <xTaskIncrementTick+0xae>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001f3e:	f240 4388 	movw	r3, #1160	; 0x488
 8001f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f4a:	f240 428c 	movw	r2, #1164	; 0x48c
 8001f4e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001f52:	460b      	mov	r3, r1
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d901      	bls.n	8001f66 <xTaskIncrementTick+0x1a2>
			{
				xSwitchRequired = pdTRUE;
 8001f62:	2301      	movs	r3, #1
 8001f64:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8001f66:	f240 5370 	movw	r3, #1392	; 0x570
 8001f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10f      	bne.n	8001f94 <xTaskIncrementTick+0x1d0>
			{
				vApplicationTickHook();
 8001f74:	f7fe ff56 	bl	8000e24 <vApplicationTickHook>
 8001f78:	e00c      	b.n	8001f94 <xTaskIncrementTick+0x1d0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001f7a:	f240 5370 	movw	r3, #1392	; 0x570
 8001f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	f240 5370 	movw	r3, #1392	; 0x570
 8001f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f8e:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8001f90:	f7fe ff48 	bl	8000e24 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001f94:	f240 5374 	movw	r3, #1396	; 0x574
 8001f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <xTaskIncrementTick+0x1e2>
		{
			xSwitchRequired = pdTRUE;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001fa6:	697b      	ldr	r3, [r7, #20]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001fb6:	f240 5380 	movw	r3, #1408	; 0x580
 8001fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001fc4:	f240 5374 	movw	r3, #1396	; 0x574
 8001fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001fcc:	2201      	movs	r2, #1
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	e083      	b.n	80020da <vTaskSwitchContext+0x12a>
	}
	else
	{
		xYieldPending = pdFALSE;
 8001fd2:	f240 5374 	movw	r3, #1396	; 0x574
 8001fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8001fde:	f240 4388 	movw	r3, #1160	; 0x488
 8001fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	f240 4388 	movw	r3, #1160	; 0x488
 8001fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d80e      	bhi.n	8002018 <vTaskSwitchContext+0x68>
 8001ffa:	f240 4388 	movw	r3, #1160	; 0x488
 8001ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	f240 4388 	movw	r3, #1160	; 0x488
 8002008:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3334      	adds	r3, #52	; 0x34
 8002010:	4610      	mov	r0, r2
 8002012:	4619      	mov	r1, r3
 8002014:	f7ff f832 	bl	800107c <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8002018:	f240 4388 	movw	r3, #1160	; 0x488
 800201c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	4618      	mov	r0, r3
 8002026:	f247 61ac 	movw	r1, #30380	; 0x76ac
 800202a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800202e:	2214      	movs	r2, #20
 8002030:	f005 f8ea 	bl	8007208 <memcmp>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00e      	beq.n	8002058 <vTaskSwitchContext+0xa8>
 800203a:	f240 4388 	movw	r3, #1160	; 0x488
 800203e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	f240 4388 	movw	r3, #1160	; 0x488
 8002048:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	3334      	adds	r3, #52	; 0x34
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	f7ff f812 	bl	800107c <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002058:	f240 5368 	movw	r3, #1384	; 0x568
 800205c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	fab3 f383 	clz	r3, r3
 800206a:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	f1c3 031f 	rsb	r3, r3, #31
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	f240 428c 	movw	r2, #1164	; 0x48c
 8002078:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800207c:	68f9      	ldr	r1, [r7, #12]
 800207e:	460b      	mov	r3, r1
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d102      	bne.n	8002094 <vTaskSwitchContext+0xe4>
 800208e:	f001 fb97 	bl	80037c0 <ulPortSetInterruptMask>
 8002092:	e7fe      	b.n	8002092 <vTaskSwitchContext+0xe2>
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	f240 428c 	movw	r2, #1164	; 0x48c
 80020a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80020a6:	4413      	add	r3, r2
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	3308      	adds	r3, #8
 80020bc:	429a      	cmp	r2, r3
 80020be:	d104      	bne.n	80020ca <vTaskSwitchContext+0x11a>
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	f240 4388 	movw	r3, #1160	; 0x488
 80020d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020d8:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <vTaskPlaceOnEventList+0x16>
 80020f0:	f001 fb66 	bl	80037c0 <ulPortSetInterruptMask>
 80020f4:	e7fe      	b.n	80020f4 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80020f6:	f240 4388 	movw	r3, #1160	; 0x488
 80020fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	3318      	adds	r3, #24
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	4619      	mov	r1, r3
 8002106:	f001 f9ad 	bl	8003464 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800210a:	f240 4388 	movw	r3, #1160	; 0x488
 800210e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3304      	adds	r3, #4
 8002116:	4618      	mov	r0, r3
 8002118:	f001 f9dc 	bl	80034d4 <uxListRemove>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d114      	bne.n	800214c <vTaskPlaceOnEventList+0x6c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002122:	f240 4388 	movw	r3, #1160	; 0x488
 8002126:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	2201      	movs	r2, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43da      	mvns	r2, r3
 8002136:	f240 5368 	movw	r3, #1384	; 0x568
 800213a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	401a      	ands	r2, r3
 8002142:	f240 5368 	movw	r3, #1384	; 0x568
 8002146:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800214a:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002152:	d10d      	bne.n	8002170 <vTaskPlaceOnEventList+0x90>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002154:	f240 4388 	movw	r3, #1160	; 0x488
 8002158:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	3304      	adds	r3, #4
 8002160:	f240 504c 	movw	r0, #1356	; 0x54c
 8002164:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002168:	4619      	mov	r1, r3
 800216a:	f001 f957 	bl	800341c <vListInsertEnd>
 800216e:	e00a      	b.n	8002186 <vTaskPlaceOnEventList+0xa6>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 8002170:	f240 5364 	movw	r3, #1380	; 0x564
 8002174:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	4413      	add	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 fa17 	bl	80025b4 <prvAddCurrentTaskToDelayedList>
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d102      	bne.n	80021a2 <vTaskPlaceOnEventListRestricted+0x16>
 800219c:	f001 fb10 	bl	80037c0 <ulPortSetInterruptMask>
 80021a0:	e7fe      	b.n	80021a0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80021a2:	f240 4388 	movw	r3, #1160	; 0x488
 80021a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	3318      	adds	r3, #24
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	4619      	mov	r1, r3
 80021b2:	f001 f933 	bl	800341c <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80021b6:	f240 4388 	movw	r3, #1160	; 0x488
 80021ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	3304      	adds	r3, #4
 80021c2:	4618      	mov	r0, r3
 80021c4:	f001 f986 	bl	80034d4 <uxListRemove>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d114      	bne.n	80021f8 <vTaskPlaceOnEventListRestricted+0x6c>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80021ce:	f240 4388 	movw	r3, #1160	; 0x488
 80021d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021da:	2201      	movs	r2, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43da      	mvns	r2, r3
 80021e2:	f240 5368 	movw	r3, #1384	; 0x568
 80021e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	401a      	ands	r2, r3
 80021ee:	f240 5368 	movw	r3, #1384	; 0x568
 80021f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021f6:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 80021f8:	f240 5364 	movw	r3, #1380	; 0x564
 80021fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	4413      	add	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f9d3 	bl	80025b4 <prvAddCurrentTaskToDelayedList>
	}
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <xTaskRemoveFromEventList+0x1c>
 800222a:	f001 fac9 	bl	80037c0 <ulPortSetInterruptMask>
 800222e:	e7fe      	b.n	800222e <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	3318      	adds	r3, #24
 8002234:	4618      	mov	r0, r3
 8002236:	f001 f94d 	bl	80034d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800223a:	f240 5380 	movw	r3, #1408	; 0x580
 800223e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d125      	bne.n	8002294 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	3304      	adds	r3, #4
 800224c:	4618      	mov	r0, r3
 800224e:	f001 f941 	bl	80034d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	2201      	movs	r2, #1
 8002258:	409a      	lsls	r2, r3
 800225a:	f240 5368 	movw	r3, #1384	; 0x568
 800225e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	431a      	orrs	r2, r3
 8002266:	f240 5368 	movw	r3, #1384	; 0x568
 800226a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	f240 428c 	movw	r2, #1164	; 0x48c
 8002280:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002284:	441a      	add	r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	3304      	adds	r3, #4
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	f001 f8c5 	bl	800341c <vListInsertEnd>
 8002292:	e008      	b.n	80022a6 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	3318      	adds	r3, #24
 8002298:	f240 5020 	movw	r0, #1312	; 0x520
 800229c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80022a0:	4619      	mov	r1, r3
 80022a2:	f001 f8bb 	bl	800341c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022aa:	f240 4388 	movw	r3, #1160	; 0x488
 80022ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d908      	bls.n	80022cc <xTaskRemoveFromEventList+0xb8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80022ba:	2301      	movs	r3, #1
 80022bc:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80022be:	f240 5374 	movw	r3, #1396	; 0x574
 80022c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022c6:	2201      	movs	r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	e001      	b.n	80022d0 <xTaskRemoveFromEventList+0xbc>
	}
	else
	{
		xReturn = pdFALSE;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80022d0:	68fb      	ldr	r3, [r7, #12]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop

080022dc <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <vTaskSetTimeOutState+0x14>
 80022ea:	f001 fa69 	bl	80037c0 <ulPortSetInterruptMask>
 80022ee:	e7fe      	b.n	80022ee <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80022f0:	f240 5378 	movw	r3, #1400	; 0x578
 80022f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80022fe:	f240 5364 	movw	r3, #1380	; 0x564
 8002302:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	605a      	str	r2, [r3, #4]
}
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop

08002314 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <xTaskCheckForTimeOut+0x16>
 8002324:	f001 fa4c 	bl	80037c0 <ulPortSetInterruptMask>
 8002328:	e7fe      	b.n	8002328 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <xTaskCheckForTimeOut+0x22>
 8002330:	f001 fa46 	bl	80037c0 <ulPortSetInterruptMask>
 8002334:	e7fe      	b.n	8002334 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8002336:	f001 f9f9 	bl	800372c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800233a:	f240 5364 	movw	r3, #1380	; 0x564
 800233e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234e:	d102      	bne.n	8002356 <xTaskCheckForTimeOut+0x42>
			{
				xReturn = pdFALSE;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e029      	b.n	80023aa <xTaskCheckForTimeOut+0x96>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	f240 5378 	movw	r3, #1400	; 0x578
 800235e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d007      	beq.n	8002378 <xTaskCheckForTimeOut+0x64>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	429a      	cmp	r2, r3
 8002370:	d802      	bhi.n	8002378 <xTaskCheckForTimeOut+0x64>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8002372:	2301      	movs	r3, #1
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	e018      	b.n	80023aa <xTaskCheckForTimeOut+0x96>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	1ad2      	subs	r2, r2, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d20e      	bcs.n	80023a6 <xTaskCheckForTimeOut+0x92>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	1acb      	subs	r3, r1, r3
 8002394:	441a      	add	r2, r3
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff ff9e 	bl	80022dc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	e001      	b.n	80023aa <xTaskCheckForTimeOut+0x96>
		}
		else
		{
			xReturn = pdTRUE;
 80023a6:	2301      	movs	r3, #1
 80023a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80023aa:	f001 f9e7 	bl	800377c <vPortExitCritical>

	return xReturn;
 80023ae:	68fb      	ldr	r3, [r7, #12]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80023bc:	f240 5374 	movw	r3, #1396	; 0x574
 80023c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023c4:	2201      	movs	r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
}
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 80023d8:	f000 f8a2 	bl	8002520 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80023dc:	f240 438c 	movw	r3, #1164	; 0x48c
 80023e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d901      	bls.n	80023ee <prvIdleTask+0x1e>
			{
				taskYIELD();
 80023ea:	f001 f98d 	bl	8003708 <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80023ee:	f7fe fe3f 	bl	8001070 <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 80023f2:	e7f1      	b.n	80023d8 <prvIdleTask+0x8>

080023f4 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	e012      	b.n	800242e <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	4413      	add	r3, r2
 800240e:	781a      	ldrb	r2, [r3, #0]
 8002410:	68f9      	ldr	r1, [r7, #12]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	440b      	add	r3, r1
 8002416:	3330      	adds	r3, #48	; 0x30
 8002418:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	4413      	add	r3, r2
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d100      	bne.n	8002428 <prvInitialiseTCBVariables+0x34>
		{
			break;
 8002426:	e005      	b.n	8002434 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3301      	adds	r3, #1
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2b09      	cmp	r3, #9
 8002432:	d9e9      	bls.n	8002408 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b04      	cmp	r3, #4
 8002440:	d901      	bls.n	8002446 <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002442:	2304      	movs	r3, #4
 8002444:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	649a      	str	r2, [r3, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3304      	adds	r3, #4
 800245c:	4618      	mov	r0, r3
 800245e:	f000 ffd1 	bl	8003404 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3318      	adds	r3, #24
 8002466:	4618      	mov	r0, r3
 8002468:	f000 ffcc 	bl	8003404 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f1c3 0205 	rsb	r2, r3, #5
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800248e:	2300      	movs	r3, #0
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	e00f      	b.n	80024b4 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	f240 428c 	movw	r2, #1164	; 0x48c
 80024a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80024a6:	4413      	add	r3, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 ff8b 	bl	80033c4 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3301      	adds	r3, #1
 80024b2:	607b      	str	r3, [r7, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d9ec      	bls.n	8002494 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80024ba:	f240 40f0 	movw	r0, #1264	; 0x4f0
 80024be:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80024c2:	f000 ff7f 	bl	80033c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80024c6:	f240 5004 	movw	r0, #1284	; 0x504
 80024ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80024ce:	f000 ff79 	bl	80033c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80024d2:	f240 5020 	movw	r0, #1312	; 0x520
 80024d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80024da:	f000 ff73 	bl	80033c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80024de:	f240 5034 	movw	r0, #1332	; 0x534
 80024e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80024e6:	f000 ff6d 	bl	80033c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80024ea:	f240 504c 	movw	r0, #1356	; 0x54c
 80024ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80024f2:	f000 ff67 	bl	80033c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80024f6:	f240 5318 	movw	r3, #1304	; 0x518
 80024fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024fe:	f240 42f0 	movw	r2, #1264	; 0x4f0
 8002502:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002506:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002508:	f240 531c 	movw	r3, #1308	; 0x51c
 800250c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002510:	f240 5204 	movw	r2, #1284	; 0x504
 8002514:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002518:	601a      	str	r2, [r3, #0]
}
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8002526:	e03a      	b.n	800259e <prvCheckTasksWaitingTermination+0x7e>
		{
			vTaskSuspendAll();
 8002528:	f7ff fb72 	bl	8001c10 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800252c:	f240 5334 	movw	r3, #1332	; 0x534
 8002530:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	bf14      	ite	ne
 800253a:	2300      	movne	r3, #0
 800253c:	2301      	moveq	r3, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002542:	f7ff fb77 	bl	8001c34 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d128      	bne.n	800259e <prvCheckTasksWaitingTermination+0x7e>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800254c:	f001 f8ee 	bl	800372c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002550:	f240 5334 	movw	r3, #1332	; 0x534
 8002554:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	3304      	adds	r3, #4
 8002562:	4618      	mov	r0, r3
 8002564:	f000 ffb6 	bl	80034d4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002568:	f240 5360 	movw	r3, #1376	; 0x560
 800256c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	1e5a      	subs	r2, r3, #1
 8002574:	f240 5360 	movw	r3, #1376	; 0x560
 8002578:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800257c:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 800257e:	f240 5348 	movw	r3, #1352	; 0x548
 8002582:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	1e5a      	subs	r2, r3, #1
 800258a:	f240 5348 	movw	r3, #1352	; 0x548
 800258e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002592:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8002594:	f001 f8f2 	bl	800377c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002598:	6838      	ldr	r0, [r7, #0]
 800259a:	f000 f881 	bl	80026a0 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800259e:	f240 5348 	movw	r3, #1352	; 0x548
 80025a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1bd      	bne.n	8002528 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop

080025b4 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80025bc:	f240 4388 	movw	r3, #1160	; 0x488
 80025c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 80025ca:	f240 5364 	movw	r3, #1380	; 0x564
 80025ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d20f      	bcs.n	80025fa <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80025da:	f240 531c 	movw	r3, #1308	; 0x51c
 80025de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	f240 4388 	movw	r3, #1160	; 0x488
 80025e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3304      	adds	r3, #4
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	f000 ff36 	bl	8003464 <vListInsert>
 80025f8:	e01c      	b.n	8002634 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80025fa:	f240 5318 	movw	r3, #1304	; 0x518
 80025fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	f240 4388 	movw	r3, #1160	; 0x488
 8002608:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3304      	adds	r3, #4
 8002610:	4610      	mov	r0, r2
 8002612:	4619      	mov	r1, r3
 8002614:	f000 ff26 	bl	8003464 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8002618:	f240 0304 	movw	r3, #4
 800261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	429a      	cmp	r2, r3
 8002626:	d205      	bcs.n	8002634 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8002628:	f240 0304 	movw	r3, #4
 800262c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop

0800263c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	80fb      	strh	r3, [r7, #6]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002648:	2050      	movs	r0, #80	; 0x50
 800264a:	f001 fc73 	bl	8003f34 <pvPortMalloc>
 800264e:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d01f      	beq.n	8002696 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d106      	bne.n	800266a <prvAllocateTCBAndStack+0x2e>
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4618      	mov	r0, r3
 8002662:	f001 fc67 	bl	8003f34 <pvPortMalloc>
 8002666:	4603      	mov	r3, r0
 8002668:	e000      	b.n	800266c <prvAllocateTCBAndStack+0x30>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	2b00      	cmp	r3, #0
 8002676:	d105      	bne.n	8002684 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f001 fcbf 	bl	8003ffc <vPortFree>
			pxNewTCB = NULL;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	e008      	b.n	8002696 <prvAllocateTCBAndStack+0x5a>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4610      	mov	r0, r2
 800268e:	21a5      	movs	r1, #165	; 0xa5
 8002690:	461a      	mov	r2, r3
 8002692:	f004 fded 	bl	8007270 <memset>
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
 8002696:	68fb      	ldr	r3, [r7, #12]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	4618      	mov	r0, r3
 80026ae:	f001 fca5 	bl	8003ffc <vPortFree>
		vPortFree( pxTCB );
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f001 fca2 	bl	8003ffc <vPortFree>
	}
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop

080026c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026c6:	f240 5318 	movw	r3, #1304	; 0x518
 80026ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <prvResetNextTaskUnblockTime+0x1a>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <prvResetNextTaskUnblockTime+0x1c>
 80026da:	2300      	movs	r3, #0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d007      	beq.n	80026f0 <prvResetNextTaskUnblockTime+0x30>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80026e0:	f240 0304 	movw	r3, #4
 80026e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026e8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	e00e      	b.n	800270e <prvResetNextTaskUnblockTime+0x4e>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80026f0:	f240 5318 	movw	r3, #1304	; 0x518
 80026f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	f240 0304 	movw	r3, #4
 8002708:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800270c:	601a      	str	r2, [r3, #0]
	}
}
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800271e:	f240 4388 	movw	r3, #1160	; 0x488
 8002722:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	607b      	str	r3, [r7, #4]

		return xReturn;
 800272a:	687b      	ldr	r3, [r7, #4]
	}
 800272c:	4618      	mov	r0, r3
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800273e:	f240 536c 	movw	r3, #1388	; 0x56c
 8002742:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d102      	bne.n	8002752 <xTaskGetSchedulerState+0x1a>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800274c:	2301      	movs	r3, #1
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	e00b      	b.n	800276a <xTaskGetSchedulerState+0x32>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002752:	f240 5380 	movw	r3, #1408	; 0x580
 8002756:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <xTaskGetSchedulerState+0x2e>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002760:	2302      	movs	r3, #2
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	e001      	b.n	800276a <xTaskGetSchedulerState+0x32>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800276a:	687b      	ldr	r3, [r7, #4]
	}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 8084 	beq.w	8002894 <vTaskPriorityInherit+0x11c>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002790:	f240 4388 	movw	r3, #1160	; 0x488
 8002794:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	429a      	cmp	r2, r3
 800279e:	d279      	bcs.n	8002894 <vTaskPriorityInherit+0x11c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	db09      	blt.n	80027bc <vTaskPriorityInherit+0x44>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027a8:	f240 4388 	movw	r3, #1160	; 0x488
 80027ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	f1c3 0205 	rsb	r2, r3, #5
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6959      	ldr	r1, [r3, #20]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	f240 428c 	movw	r2, #1164	; 0x48c
 80027d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80027d4:	4413      	add	r3, r2
 80027d6:	4299      	cmp	r1, r3
 80027d8:	d101      	bne.n	80027de <vTaskPriorityInherit+0x66>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <vTaskPriorityInherit+0x68>
 80027de:	2300      	movs	r3, #0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d04f      	beq.n	8002884 <vTaskPriorityInherit+0x10c>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	3304      	adds	r3, #4
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fe73 	bl	80034d4 <uxListRemove>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d11e      	bne.n	8002832 <vTaskPriorityInherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027f8:	f240 428c 	movw	r2, #1164	; 0x48c
 80027fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002800:	460b      	mov	r3, r1
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d110      	bne.n	8002832 <vTaskPriorityInherit+0xba>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	2201      	movs	r2, #1
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43da      	mvns	r2, r3
 800281c:	f240 5368 	movw	r3, #1384	; 0x568
 8002820:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	401a      	ands	r2, r3
 8002828:	f240 5368 	movw	r3, #1384	; 0x568
 800282c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002830:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002832:	f240 4388 	movw	r3, #1160	; 0x488
 8002836:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	2201      	movs	r2, #1
 8002848:	409a      	lsls	r2, r3
 800284a:	f240 5368 	movw	r3, #1384	; 0x568
 800284e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	431a      	orrs	r2, r3
 8002856:	f240 5368 	movw	r3, #1384	; 0x568
 800285a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	f240 428c 	movw	r2, #1164	; 0x48c
 8002870:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002874:	441a      	add	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3304      	adds	r3, #4
 800287a:	4610      	mov	r0, r2
 800287c:	4619      	mov	r1, r3
 800287e:	f000 fdcd 	bl	800341c <vListInsertEnd>
 8002882:	e007      	b.n	8002894 <vTaskPriorityInherit+0x11c>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002884:	f240 4388 	movw	r3, #1160	; 0x488
 8002888:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop

0800289c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d068      	beq.n	8002984 <xTaskPriorityDisinherit+0xe8>
		{
			configASSERT( pxTCB->uxMutexesHeld );
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d102      	bne.n	80028c0 <xTaskPriorityDisinherit+0x24>
 80028ba:	f000 ff81 	bl	80037c0 <ulPortSetInterruptMask>
 80028be:	e7fe      	b.n	80028be <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c4:	1e5a      	subs	r2, r3, #1
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	64da      	str	r2, [r3, #76]	; 0x4c

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d056      	beq.n	8002984 <xTaskPriorityDisinherit+0xe8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d152      	bne.n	8002984 <xTaskPriorityDisinherit+0xe8>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	3304      	adds	r3, #4
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fdf6 	bl	80034d4 <uxListRemove>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d11e      	bne.n	800292c <xTaskPriorityDisinherit+0x90>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028f2:	f240 428c 	movw	r2, #1164	; 0x48c
 80028f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80028fa:	460b      	mov	r3, r1
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d110      	bne.n	800292c <xTaskPriorityDisinherit+0x90>
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	2201      	movs	r2, #1
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43da      	mvns	r2, r3
 8002916:	f240 5368 	movw	r3, #1384	; 0x568
 800291a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	401a      	ands	r2, r3
 8002922:	f240 5368 	movw	r3, #1384	; 0x568
 8002926:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800292a:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	f1c3 0205 	rsb	r2, r3, #5
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	2201      	movs	r2, #1
 8002946:	409a      	lsls	r2, r3
 8002948:	f240 5368 	movw	r3, #1384	; 0x568
 800294c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	431a      	orrs	r2, r3
 8002954:	f240 5368 	movw	r3, #1384	; 0x568
 8002958:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	f240 428c 	movw	r2, #1164	; 0x48c
 800296e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002972:	441a      	add	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	3304      	adds	r3, #4
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	f000 fd4e 	bl	800341c <vListInsertEnd>

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
 8002980:	2301      	movs	r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002984:	68fb      	ldr	r3, [r7, #12]
	}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop

08002990 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002994:	f240 4388 	movw	r3, #1160	; 0x488
 8002998:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <pvTaskIncrementMutexHeldCount+0x22>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80029a2:	f240 4388 	movw	r3, #1160	; 0x488
 80029a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029ae:	3201      	adds	r2, #1
 80029b0:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 80029b2:	f240 4388 	movw	r3, #1160	; 0x488
 80029b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029ba:	681b      	ldr	r3, [r3, #0]
	}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop

080029c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d102      	bne.n	80029e2 <xQueueGenericReset+0x1a>
 80029dc:	f000 fef0 	bl	80037c0 <ulPortSetInterruptMask>
 80029e0:	e7fe      	b.n	80029e0 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 80029e2:	f000 fea3 	bl	800372c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ee:	68f9      	ldr	r1, [r7, #12]
 80029f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	441a      	add	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a12:	3b01      	subs	r3, #1
 8002a14:	68f9      	ldr	r1, [r7, #12]
 8002a16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	441a      	add	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f04f 32ff 	mov.w	r2, #4294967295
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a30:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10e      	bne.n	8002a56 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d014      	beq.n	8002a6a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	3310      	adds	r3, #16
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fbe5 	bl	8002214 <xTaskRemoveFromEventList>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d10c      	bne.n	8002a6a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a50:	f000 fe5a 	bl	8003708 <vPortYield>
 8002a54:	e009      	b.n	8002a6a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	3310      	adds	r3, #16
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fcb2 	bl	80033c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3324      	adds	r3, #36	; 0x24
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 fcad 	bl	80033c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a6a:	f000 fe87 	bl	800377c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a6e:	2301      	movs	r3, #1
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	4613      	mov	r3, r2
 8002a84:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d02a      	beq.n	8002ae6 <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 8002a90:	2054      	movs	r0, #84	; 0x54
 8002a92:	f001 fa4f 	bl	8003f34 <pvPortMalloc>
 8002a96:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d023      	beq.n	8002ae6 <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
 8002aaa:	6978      	ldr	r0, [r7, #20]
 8002aac:	f001 fa42 	bl	8003f34 <pvPortMalloc>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d010      	beq.n	8002ae0 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002aca:	69b8      	ldr	r0, [r7, #24]
 8002acc:	2101      	movs	r1, #1
 8002ace:	f7ff ff7b 	bl	80029c8 <xQueueGenericReset>

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	79fa      	ldrb	r2, [r7, #7]
 8002ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	e002      	b.n	8002ae6 <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8002ae0:	69b8      	ldr	r0, [r7, #24]
 8002ae2:	f001 fa8b 	bl	8003ffc <vPortFree>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d102      	bne.n	8002af2 <xQueueGenericCreate+0x7a>
 8002aec:	f000 fe68 	bl	80037c0 <ulPortSetInterruptMask>
 8002af0:	e7fe      	b.n	8002af0 <xQueueGenericCreate+0x78>

	return xReturn;
 8002af2:	69fb      	ldr	r3, [r7, #28]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3720      	adds	r7, #32
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 8002b06:	2054      	movs	r0, #84	; 0x54
 8002b08:	f001 fa14 	bl	8003f34 <pvPortMalloc>
 8002b0c:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d030      	beq.n	8002b76 <xQueueCreateMutex+0x7a>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
			pxNewQueue->u.pcReadFrom = NULL;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f04f 32ff 	mov.w	r2, #4294967295
 8002b44:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f04f 32ff 	mov.w	r2, #4294967295
 8002b4c:	649a      	str	r2, [r3, #72]	; 0x48

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	79fa      	ldrb	r2, [r7, #7]
 8002b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	3310      	adds	r3, #16
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fc32 	bl	80033c4 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3324      	adds	r3, #36	; 0x24
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fc2d 	bl	80033c4 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2300      	movs	r3, #0
 8002b72:	f000 f891 	bl	8002c98 <xQueueGenericSend>
		else
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <xQueueCreateMutex+0x86>
 8002b7c:	f000 fe20 	bl	80037c0 <ulPortSetInterruptMask>
 8002b80:	e7fe      	b.n	8002b80 <xQueueCreateMutex+0x84>
		return pxNewQueue;
 8002b82:	68fb      	ldr	r3, [r7, #12]
	}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8002b8c:	b590      	push	{r4, r7, lr}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d102      	bne.n	8002ba4 <xQueueGiveMutexRecursive+0x18>
 8002b9e:	f000 fe0f 	bl	80037c0 <ulPortSetInterruptMask>
 8002ba2:	e7fe      	b.n	8002ba2 <xQueueGiveMutexRecursive+0x16>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	685c      	ldr	r4, [r3, #4]
 8002ba8:	f7ff fdb6 	bl	8002718 <xTaskGetCurrentTaskHandle>
 8002bac:	4603      	mov	r3, r0
 8002bae:	429c      	cmp	r4, r3
 8002bb0:	d111      	bne.n	8002bd6 <xQueueGiveMutexRecursive+0x4a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	1e5a      	subs	r2, r3, #1
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	60da      	str	r2, [r3, #12]

			/* Have we unwound the call count? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <xQueueGiveMutexRecursive+0x44>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8002bc4:	68b8      	ldr	r0, [r7, #8]
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f000 f864 	bl	8002c98 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	e001      	b.n	8002bda <xQueueGiveMutexRecursive+0x4e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8002bda:	68fb      	ldr	r3, [r7, #12]
	}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd90      	pop	{r4, r7, pc}

08002be4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d102      	bne.n	8002bfe <xQueueTakeMutexRecursive+0x1a>
 8002bf8:	f000 fde2 	bl	80037c0 <ulPortSetInterruptMask>
 8002bfc:	e7fe      	b.n	8002bfc <xQueueTakeMutexRecursive+0x18>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	685c      	ldr	r4, [r3, #4]
 8002c02:	f7ff fd89 	bl	8002718 <xTaskGetCurrentTaskHandle>
 8002c06:	4603      	mov	r3, r0
 8002c08:	429c      	cmp	r4, r3
 8002c0a:	d107      	bne.n	8002c1c <xQueueTakeMutexRecursive+0x38>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8002c16:	2301      	movs	r3, #1
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	e00e      	b.n	8002c3a <xQueueTakeMutexRecursive+0x56>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 8002c1c:	68b8      	ldr	r0, [r7, #8]
 8002c1e:	2100      	movs	r1, #0
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	2300      	movs	r3, #0
 8002c24:	f000 f972 	bl	8002f0c <xQueueGenericReceive>
 8002c28:	60f8      	str	r0, [r7, #12]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn == pdPASS )
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d104      	bne.n	8002c3a <xQueueTakeMutexRecursive+0x56>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
	}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd90      	pop	{r4, r7, pc}

08002c44 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <xQueueCreateCountingSemaphore+0x16>
 8002c54:	f000 fdb4 	bl	80037c0 <ulPortSetInterruptMask>
 8002c58:	e7fe      	b.n	8002c58 <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d902      	bls.n	8002c68 <xQueueCreateCountingSemaphore+0x24>
 8002c62:	f000 fdad 	bl	80037c0 <ulPortSetInterruptMask>
 8002c66:	e7fe      	b.n	8002c66 <xQueueCreateCountingSemaphore+0x22>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	f7ff ff03 	bl	8002a78 <xQueueGenericCreate>
 8002c72:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( xHandle );
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <xQueueCreateCountingSemaphore+0x48>
 8002c86:	f000 fd9b 	bl	80037c0 <ulPortSetInterruptMask>
 8002c8a:	e7fe      	b.n	8002c8a <xQueueCreateCountingSemaphore+0x46>
		return xHandle;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
	}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop

08002c98 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08a      	sub	sp, #40	; 0x28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d102      	bne.n	8002cba <xQueueGenericSend+0x22>
 8002cb4:	f000 fd84 	bl	80037c0 <ulPortSetInterruptMask>
 8002cb8:	e7fe      	b.n	8002cb8 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d103      	bne.n	8002cc8 <xQueueGenericSend+0x30>
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <xQueueGenericSend+0x34>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <xQueueGenericSend+0x36>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d102      	bne.n	8002cd8 <xQueueGenericSend+0x40>
 8002cd2:	f000 fd75 	bl	80037c0 <ulPortSetInterruptMask>
 8002cd6:	e7fe      	b.n	8002cd6 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d103      	bne.n	8002ce6 <xQueueGenericSend+0x4e>
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <xQueueGenericSend+0x52>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <xQueueGenericSend+0x54>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d102      	bne.n	8002cf6 <xQueueGenericSend+0x5e>
 8002cf0:	f000 fd66 	bl	80037c0 <ulPortSetInterruptMask>
 8002cf4:	e7fe      	b.n	8002cf4 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cf6:	f7ff fd1f 	bl	8002738 <xTaskGetSchedulerState>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d102      	bne.n	8002d06 <xQueueGenericSend+0x6e>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <xQueueGenericSend+0x72>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <xQueueGenericSend+0x74>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d102      	bne.n	8002d16 <xQueueGenericSend+0x7e>
 8002d10:	f000 fd56 	bl	80037c0 <ulPortSetInterruptMask>
 8002d14:	e7fe      	b.n	8002d14 <xQueueGenericSend+0x7c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d16:	f000 fd09 	bl	800372c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d302      	bcc.n	8002d2c <xQueueGenericSend+0x94>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d11d      	bne.n	8002d68 <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d2c:	6a38      	ldr	r0, [r7, #32]
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	f000 f9df 	bl	80030f4 <prvCopyDataToQueue>
 8002d36:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	3324      	adds	r3, #36	; 0x24
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fa65 	bl	8002214 <xTaskRemoveFromEventList>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d107      	bne.n	8002d60 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d50:	f000 fcda 	bl	8003708 <vPortYield>
 8002d54:	e004      	b.n	8002d60 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d5c:	f000 fcd4 	bl	8003708 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d60:	f000 fd0c 	bl	800377c <vPortExitCritical>
				return pdPASS;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e059      	b.n	8002e1c <xQueueGenericSend+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d103      	bne.n	8002d76 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d6e:	f000 fd05 	bl	800377c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	e052      	b.n	8002e1c <xQueueGenericSend+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d106      	bne.n	8002d8a <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002d7c:	f107 0314 	add.w	r3, r7, #20
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff faab 	bl	80022dc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d86:	2301      	movs	r3, #1
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d8a:	f000 fcf7 	bl	800377c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d8e:	f7fe ff3f 	bl	8001c10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d92:	f000 fccb 	bl	800372c <vPortEnterCritical>
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9e:	d102      	bne.n	8002da6 <xQueueGenericSend+0x10e>
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	2200      	movs	r2, #0
 8002da4:	645a      	str	r2, [r3, #68]	; 0x44
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dae:	d102      	bne.n	8002db6 <xQueueGenericSend+0x11e>
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	2200      	movs	r2, #0
 8002db4:	649a      	str	r2, [r3, #72]	; 0x48
 8002db6:	f000 fce1 	bl	800377c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dba:	f107 0214 	add.w	r2, r7, #20
 8002dbe:	1d3b      	adds	r3, r7, #4
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f7ff faa6 	bl	8002314 <xTaskCheckForTimeOut>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d11e      	bne.n	8002e0c <xQueueGenericSend+0x174>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002dce:	6a38      	ldr	r0, [r7, #32]
 8002dd0:	f000 fa86 	bl	80032e0 <prvIsQueueFull>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d012      	beq.n	8002e00 <xQueueGenericSend+0x168>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	f103 0210 	add.w	r2, r3, #16
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4610      	mov	r0, r2
 8002de4:	4619      	mov	r1, r3
 8002de6:	f7ff f97b 	bl	80020e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002dea:	6a38      	ldr	r0, [r7, #32]
 8002dec:	f000 fa16 	bl	800321c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002df0:	f7fe ff20 	bl	8001c34 <xTaskResumeAll>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10f      	bne.n	8002e1a <xQueueGenericSend+0x182>
				{
					portYIELD_WITHIN_API();
 8002dfa:	f000 fc85 	bl	8003708 <vPortYield>
 8002dfe:	e00c      	b.n	8002e1a <xQueueGenericSend+0x182>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e00:	6a38      	ldr	r0, [r7, #32]
 8002e02:	f000 fa0b 	bl	800321c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e06:	f7fe ff15 	bl	8001c34 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8002e0a:	e784      	b.n	8002d16 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e0c:	6a38      	ldr	r0, [r7, #32]
 8002e0e:	f000 fa05 	bl	800321c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e12:	f7fe ff0f 	bl	8001c34 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e000      	b.n	8002e1c <xQueueGenericSend+0x184>
		}
	}
 8002e1a:	e77c      	b.n	8002d16 <xQueueGenericSend+0x7e>
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3728      	adds	r7, #40	; 0x28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d102      	bne.n	8002e42 <xQueueGenericSendFromISR+0x1e>
 8002e3c:	f000 fcc0 	bl	80037c0 <ulPortSetInterruptMask>
 8002e40:	e7fe      	b.n	8002e40 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d103      	bne.n	8002e50 <xQueueGenericSendFromISR+0x2c>
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <xQueueGenericSendFromISR+0x30>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <xQueueGenericSendFromISR+0x32>
 8002e54:	2300      	movs	r3, #0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d102      	bne.n	8002e60 <xQueueGenericSendFromISR+0x3c>
 8002e5a:	f000 fcb1 	bl	80037c0 <ulPortSetInterruptMask>
 8002e5e:	e7fe      	b.n	8002e5e <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d103      	bne.n	8002e6e <xQueueGenericSendFromISR+0x4a>
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <xQueueGenericSendFromISR+0x4e>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <xQueueGenericSendFromISR+0x50>
 8002e72:	2300      	movs	r3, #0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <xQueueGenericSendFromISR+0x5a>
 8002e78:	f000 fca2 	bl	80037c0 <ulPortSetInterruptMask>
 8002e7c:	e7fe      	b.n	8002e7c <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e7e:	f000 fd15 	bl	80038ac <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e82:	f000 fc9d 	bl	80037c0 <ulPortSetInterruptMask>
 8002e86:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d302      	bcc.n	8002e9a <xQueueGenericSendFromISR+0x76>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d12d      	bne.n	8002ef6 <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
 8002e9a:	69b8      	ldr	r0, [r7, #24]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	f000 f928 	bl	80030f4 <prvCopyDataToQueue>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebe:	d112      	bne.n	8002ee6 <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	3324      	adds	r3, #36	; 0x24
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff f9a1 	bl	8002214 <xTaskRemoveFromEventList>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e004      	b.n	8002ef0 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	e001      	b.n	8002efa <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002efa:	6978      	ldr	r0, [r7, #20]
 8002efc:	f000 fc6a 	bl	80037d4 <vPortClearInterruptMask>

	return xReturn;
 8002f00:	69fb      	ldr	r3, [r7, #28]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3720      	adds	r7, #32
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop

08002f0c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d102      	bne.n	8002f2e <xQueueGenericReceive+0x22>
 8002f28:	f000 fc4a 	bl	80037c0 <ulPortSetInterruptMask>
 8002f2c:	e7fe      	b.n	8002f2c <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d103      	bne.n	8002f3c <xQueueGenericReceive+0x30>
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <xQueueGenericReceive+0x34>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e000      	b.n	8002f42 <xQueueGenericReceive+0x36>
 8002f40:	2300      	movs	r3, #0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d102      	bne.n	8002f4c <xQueueGenericReceive+0x40>
 8002f46:	f000 fc3b 	bl	80037c0 <ulPortSetInterruptMask>
 8002f4a:	e7fe      	b.n	8002f4a <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f4c:	f7ff fbf4 	bl	8002738 <xTaskGetSchedulerState>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d102      	bne.n	8002f5c <xQueueGenericReceive+0x50>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <xQueueGenericReceive+0x54>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <xQueueGenericReceive+0x56>
 8002f60:	2300      	movs	r3, #0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <xQueueGenericReceive+0x60>
 8002f66:	f000 fc2b 	bl	80037c0 <ulPortSetInterruptMask>
 8002f6a:	e7fe      	b.n	8002f6a <xQueueGenericReceive+0x5e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f6c:	f000 fbde 	bl	800372c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d03b      	beq.n	8002ff0 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f7e:	6a38      	ldr	r0, [r7, #32]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	f000 f925 	bl	80031d0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d11c      	bne.n	8002fc6 <xQueueGenericReceive+0xba>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	1e5a      	subs	r2, r3, #1
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d104      	bne.n	8002fa8 <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002f9e:	f7ff fcf7 	bl	8002990 <pvTaskIncrementMutexHeldCount>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01b      	beq.n	8002fe8 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	3310      	adds	r3, #16
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff f92d 	bl	8002214 <xTaskRemoveFromEventList>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d113      	bne.n	8002fe8 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8002fc0:	f000 fba2 	bl	8003708 <vPortYield>
 8002fc4:	e010      	b.n	8002fe8 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d009      	beq.n	8002fe8 <xQueueGenericReceive+0xdc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	3324      	adds	r3, #36	; 0x24
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff f91b 	bl	8002214 <xTaskRemoveFromEventList>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8002fe4:	f000 fb90 	bl	8003708 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8002fe8:	f000 fbc8 	bl	800377c <vPortExitCritical>
				return pdPASS;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e066      	b.n	80030be <xQueueGenericReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d103      	bne.n	8002ffe <xQueueGenericReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ff6:	f000 fbc1 	bl	800377c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e05f      	b.n	80030be <xQueueGenericReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <xQueueGenericReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003004:	f107 0314 	add.w	r3, r7, #20
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff f967 	bl	80022dc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800300e:	2301      	movs	r3, #1
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003012:	f000 fbb3 	bl	800377c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003016:	f7fe fdfb 	bl	8001c10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800301a:	f000 fb87 	bl	800372c <vPortEnterCritical>
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003026:	d102      	bne.n	800302e <xQueueGenericReceive+0x122>
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	2200      	movs	r2, #0
 800302c:	645a      	str	r2, [r3, #68]	; 0x44
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d102      	bne.n	800303e <xQueueGenericReceive+0x132>
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	2200      	movs	r2, #0
 800303c:	649a      	str	r2, [r3, #72]	; 0x48
 800303e:	f000 fb9d 	bl	800377c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003042:	f107 0214 	add.w	r2, r7, #20
 8003046:	1d3b      	adds	r3, r7, #4
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	f7ff f962 	bl	8002314 <xTaskCheckForTimeOut>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d12b      	bne.n	80030ae <xQueueGenericReceive+0x1a2>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003056:	6a38      	ldr	r0, [r7, #32]
 8003058:	f000 f92c 	bl	80032b4 <prvIsQueueEmpty>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d01f      	beq.n	80030a2 <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d108      	bne.n	800307c <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
 800306a:	f000 fb5f 	bl	800372c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff fb80 	bl	8002778 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8003078:	f000 fb80 	bl	800377c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4610      	mov	r0, r2
 8003086:	4619      	mov	r1, r3
 8003088:	f7ff f82a 	bl	80020e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800308c:	6a38      	ldr	r0, [r7, #32]
 800308e:	f000 f8c5 	bl	800321c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003092:	f7fe fdcf 	bl	8001c34 <xTaskResumeAll>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10f      	bne.n	80030bc <xQueueGenericReceive+0x1b0>
				{
					portYIELD_WITHIN_API();
 800309c:	f000 fb34 	bl	8003708 <vPortYield>
 80030a0:	e00c      	b.n	80030bc <xQueueGenericReceive+0x1b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80030a2:	6a38      	ldr	r0, [r7, #32]
 80030a4:	f000 f8ba 	bl	800321c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030a8:	f7fe fdc4 	bl	8001c34 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 80030ac:	e75e      	b.n	8002f6c <xQueueGenericReceive+0x60>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80030ae:	6a38      	ldr	r0, [r7, #32]
 80030b0:	f000 f8b4 	bl	800321c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030b4:	f7fe fdbe 	bl	8001c34 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 80030b8:	2300      	movs	r3, #0
 80030ba:	e000      	b.n	80030be <xQueueGenericReceive+0x1b2>
		}
	}
 80030bc:	e756      	b.n	8002f6c <xQueueGenericReceive+0x60>
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3728      	adds	r7, #40	; 0x28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop

080030c8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d102      	bne.n	80030dc <uxQueueMessagesWaiting+0x14>
 80030d6:	f000 fb73 	bl	80037c0 <ulPortSetInterruptMask>
 80030da:	e7fe      	b.n	80030da <uxQueueMessagesWaiting+0x12>

	taskENTER_CRITICAL();
 80030dc:	f000 fb26 	bl	800372c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80030e6:	f000 fb49 	bl	800377c <vPortExitCritical>

	return uxReturn;
 80030ea:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10d      	bne.n	8003128 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d152      	bne.n	80031ba <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fbbf 	bl	800289c <xTaskPriorityDisinherit>
 800311e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	e048      	b.n	80031ba <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d11a      	bne.n	8003164 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	4610      	mov	r0, r2
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	461a      	mov	r2, r3
 800313c:	f7fd fcda 	bl	8000af4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	441a      	add	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	429a      	cmp	r2, r3
 8003158:	d32f      	bcc.n	80031ba <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	609a      	str	r2, [r3, #8]
 8003162:	e02a      	b.n	80031ba <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	4610      	mov	r0, r2
 800316e:	68b9      	ldr	r1, [r7, #8]
 8003170:	461a      	mov	r2, r3
 8003172:	f7fd fcbf 	bl	8000af4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	425b      	negs	r3, r3
 8003180:	441a      	add	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d207      	bcs.n	80031a2 <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	425b      	negs	r3, r3
 800319c:	441a      	add	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d108      	bne.n	80031ba <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d004      	beq.n	80031ba <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	1e5a      	subs	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80031c4:	697b      	ldr	r3, [r7, #20]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop

080031d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d019      	beq.n	8003216 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	441a      	add	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d303      	bcc.n	8003204 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	6838      	ldr	r0, [r7, #0]
 800320e:	4611      	mov	r1, r2
 8003210:	461a      	mov	r2, r3
 8003212:	f7fd fc6f 	bl	8000af4 <memcpy>
	}
}
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003224:	f000 fa82 	bl	800372c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8003228:	e014      	b.n	8003254 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3324      	adds	r3, #36	; 0x24
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe ffec 	bl	8002214 <xTaskRemoveFromEventList>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8003242:	f7ff f8b9 	bl	80023b8 <vTaskMissedYield>
 8003246:	e000      	b.n	800324a <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 8003248:	e008      	b.n	800325c <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324e:	1e5a      	subs	r2, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003258:	2b00      	cmp	r3, #0
 800325a:	dce6      	bgt.n	800322a <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f04f 32ff 	mov.w	r2, #4294967295
 8003262:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8003264:	f000 fa8a 	bl	800377c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003268:	f000 fa60 	bl	800372c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800326c:	e014      	b.n	8003298 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00f      	beq.n	8003296 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3310      	adds	r3, #16
 800327a:	4618      	mov	r0, r3
 800327c:	f7fe ffca 	bl	8002214 <xTaskRemoveFromEventList>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 8003286:	f7ff f897 	bl	80023b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	1e5a      	subs	r2, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	645a      	str	r2, [r3, #68]	; 0x44
 8003294:	e000      	b.n	8003298 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 8003296:	e003      	b.n	80032a0 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329c:	2b00      	cmp	r3, #0
 800329e:	dce6      	bgt.n	800326e <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f04f 32ff 	mov.w	r2, #4294967295
 80032a6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80032a8:	f000 fa68 	bl	800377c <vPortExitCritical>
}
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop

080032b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032bc:	f000 fa36 	bl	800372c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d102      	bne.n	80032ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80032c8:	2301      	movs	r3, #1
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	e001      	b.n	80032d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032d2:	f000 fa53 	bl	800377c <vPortExitCritical>

	return xReturn;
 80032d6:	68fb      	ldr	r3, [r7, #12]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032e8:	f000 fa20 	bl	800372c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d102      	bne.n	80032fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80032f8:	2301      	movs	r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	e001      	b.n	8003302 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003302:	f000 fa3b 	bl	800377c <vPortExitCritical>

	return xReturn;
 8003306:	68fb      	ldr	r3, [r7, #12]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	e01d      	b.n	800335c <vQueueAddToRegistry+0x4c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003320:	f243 23e0 	movw	r3, #13024	; 0x32e0
 8003324:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d111      	bne.n	8003356 <vQueueAddToRegistry+0x46>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003332:	f243 23e0 	movw	r3, #13024	; 0x32e0
 8003336:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	6839      	ldr	r1, [r7, #0]
 800333e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003342:	f243 22e0 	movw	r2, #13024	; 0x32e0
 8003346:	f2c2 0201 	movt	r2, #8193	; 0x2001
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4413      	add	r3, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003354:	e005      	b.n	8003362 <vQueueAddToRegistry+0x52>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	3301      	adds	r3, #1
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b07      	cmp	r3, #7
 8003360:	d9de      	bls.n	8003320 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800337a:	f000 f9d7 	bl	800372c <vPortEnterCritical>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003386:	d102      	bne.n	800338e <vQueueWaitForMessageRestricted+0x22>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003396:	d102      	bne.n	800339e <vQueueWaitForMessageRestricted+0x32>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	649a      	str	r2, [r3, #72]	; 0x48
 800339e:	f000 f9ed 	bl	800377c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d105      	bne.n	80033b6 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3324      	adds	r3, #36	; 0x24
 80033ae:	4618      	mov	r0, r3
 80033b0:	6839      	ldr	r1, [r7, #0]
 80033b2:	f7fe feeb 	bl	800218c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f7ff ff30 	bl	800321c <prvUnlockQueue>
	}
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop

080033c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f103 0208 	add.w	r2, r3, #8
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295
 80033dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f103 0208 	add.w	r2, r3, #8
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f103 0208 	add.w	r2, r3, #8
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
}
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop

08003404 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	611a      	str	r2, [r3, #16]
}
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	601a      	str	r2, [r3, #0]
}
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop

08003464 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347a:	d103      	bne.n	8003484 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	e00c      	b.n	800349e <vListInsert+0x3a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3308      	adds	r3, #8
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	e002      	b.n	8003492 <vListInsert+0x2e>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	429a      	cmp	r2, r3
 800349c:	d9f6      	bls.n	800348c <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	601a      	str	r2, [r3, #0]
}
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6892      	ldr	r2, [r2, #8]
 80034ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6852      	ldr	r2, [r2, #4]
 80034f4:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d103      	bne.n	8003508 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	1e5a      	subs	r2, r3, #1
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3b04      	subs	r3, #4
 8003538:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003540:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	3b04      	subs	r3, #4
 8003546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3b04      	subs	r3, #4
 8003552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003554:	f243 5391 	movw	r3, #13713	; 0x3591
 8003558:	f6c0 0300 	movt	r3, #2048	; 0x800
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	6013      	str	r3, [r2, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3b14      	subs	r3, #20
 8003564:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3b04      	subs	r3, #4
 8003570:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f06f 0202 	mvn.w	r2, #2
 8003578:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	3b20      	subs	r3, #32
 800357e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003580:	68fb      	ldr	r3, [r7, #12]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop

08003590 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003594:	f240 0308 	movw	r3, #8
 8003598:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a2:	d002      	beq.n	80035aa <prvTaskExitError+0x1a>
 80035a4:	f000 f90c 	bl	80037c0 <ulPortSetInterruptMask>
 80035a8:	e7fe      	b.n	80035a8 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 80035aa:	f000 f909 	bl	80037c0 <ulPortSetInterruptMask>
	for( ;; );
 80035ae:	e7fe      	b.n	80035ae <prvTaskExitError+0x1e>

080035b0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <pxCurrentTCBConst2>)
 80035b2:	6819      	ldr	r1, [r3, #0]
 80035b4:	6808      	ldr	r0, [r1, #0]
 80035b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ba:	f380 8809 	msr	PSP, r0
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f04f 0000 	mov.w	r0, #0
 80035c6:	f380 8811 	msr	BASEPRI, r0
 80035ca:	4770      	bx	lr

080035cc <pxCurrentTCBConst2>:
 80035cc:	20000488 	.word	0x20000488

080035d0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80035d0:	4806      	ldr	r0, [pc, #24]	; (80035ec <prvPortStartFirstTask+0x1c>)
 80035d2:	6800      	ldr	r0, [r0, #0]
 80035d4:	6800      	ldr	r0, [r0, #0]
 80035d6:	f380 8808 	msr	MSP, r0
 80035da:	b662      	cpsie	i
 80035dc:	b661      	cpsie	f
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	df00      	svc	0
 80035e8:	bf00      	nop
 80035ea:	0000      	.short	0x0000
 80035ec:	e000ed08 	.word	0xe000ed08

080035f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035f6:	f44f 4364 	mov.w	r3, #58368	; 0xe400
 80035fa:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80035fe:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	22ff      	movs	r2, #255	; 0xff
 800360c:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800361e:	b2da      	uxtb	r2, r3
 8003620:	f240 5384 	movw	r3, #1412	; 0x584
 8003624:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003628:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800362a:	f240 5388 	movw	r3, #1416	; 0x588
 800362e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003632:	2207      	movs	r2, #7
 8003634:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003636:	e00f      	b.n	8003658 <xPortStartScheduler+0x68>
		{
			ulMaxPRIGROUPValue--;
 8003638:	f240 5388 	movw	r3, #1416	; 0x588
 800363c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	1e5a      	subs	r2, r3, #1
 8003644:	f240 5388 	movw	r3, #1416	; 0x588
 8003648:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800364c:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	b2db      	uxtb	r3, r3
 8003656:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	b2db      	uxtb	r3, r3
 800365e:	b25b      	sxtb	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	dbe9      	blt.n	8003638 <xPortStartScheduler+0x48>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003664:	f240 5388 	movw	r3, #1416	; 0x588
 8003668:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	021a      	lsls	r2, r3, #8
 8003670:	f240 5388 	movw	r3, #1416	; 0x588
 8003674:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003678:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800367a:	f240 5388 	movw	r3, #1416	; 0x588
 800367e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003688:	f240 5388 	movw	r3, #1416	; 0x588
 800368c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003690:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800369a:	f64e 5320 	movw	r3, #60704	; 0xed20
 800369e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80036a2:	f64e 5220 	movw	r2, #60704	; 0xed20
 80036a6:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80036b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80036b2:	f64e 5320 	movw	r3, #60704	; 0xed20
 80036b6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80036ba:	f64e 5220 	movw	r2, #60704	; 0xed20
 80036be:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80036c8:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80036ca:	f000 f8c7 	bl	800385c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80036ce:	f240 0308 	movw	r3, #8
 80036d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80036da:	f000 f8dd 	bl	8003898 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80036de:	f64e 7334 	movw	r3, #61236	; 0xef34
 80036e2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80036e6:	f64e 7234 	movw	r2, #61236	; 0xef34
 80036ea:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80036f4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80036f6:	f7ff ff6b 	bl	80035d0 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80036fa:	f7ff ff49 	bl	8003590 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800370c:	f64e 5304 	movw	r3, #60676	; 0xed04
 8003710:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003718:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 800371a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800371e:	f3bf 8f6f 	isb	sy
}
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop

0800372c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8003730:	f000 f846 	bl	80037c0 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8003734:	f240 0308 	movw	r3, #8
 8003738:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	f240 0308 	movw	r3, #8
 8003744:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003748:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800374a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800374e:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003752:	f240 0308 	movw	r3, #8
 8003756:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d10b      	bne.n	8003778 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003760:	f64e 5304 	movw	r3, #60676	; 0xed04
 8003764:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <vPortEnterCritical+0x4c>
 8003772:	f000 f825 	bl	80037c0 <ulPortSetInterruptMask>
 8003776:	e7fe      	b.n	8003776 <vPortEnterCritical+0x4a>
	}
}
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop

0800377c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003780:	f240 0308 	movw	r3, #8
 8003784:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d102      	bne.n	8003794 <vPortExitCritical+0x18>
 800378e:	f000 f817 	bl	80037c0 <ulPortSetInterruptMask>
 8003792:	e7fe      	b.n	8003792 <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003794:	f240 0308 	movw	r3, #8
 8003798:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	1e5a      	subs	r2, r3, #1
 80037a0:	f240 0308 	movw	r3, #8
 80037a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037a8:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80037aa:	f240 0308 	movw	r3, #8
 80037ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d102      	bne.n	80037be <vPortExitCritical+0x42>
	{
		portENABLE_INTERRUPTS();
 80037b8:	2000      	movs	r0, #0
 80037ba:	f000 f80b 	bl	80037d4 <vPortClearInterruptMask>
	}
}
 80037be:	bd80      	pop	{r7, pc}

080037c0 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
 80037c0:	f3ef 8011 	mrs	r0, BASEPRI
 80037c4:	f04f 0150 	mov.w	r1, #80	; 0x50
 80037c8:	f381 8811 	msr	BASEPRI, r1
 80037cc:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bf00      	nop

080037d4 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
 80037d4:	f380 8811 	msr	BASEPRI, r0
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop

080037dc <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80037dc:	f3ef 8009 	mrs	r0, PSP
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	4b12      	ldr	r3, [pc, #72]	; (8003830 <pxCurrentTCBConst>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	f01e 0f10 	tst.w	lr, #16
 80037ec:	bf08      	it	eq
 80037ee:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80037f2:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f6:	6010      	str	r0, [r2, #0]
 80037f8:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80037fc:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003800:	f380 8811 	msr	BASEPRI, r0
 8003804:	f7fe fbd4 	bl	8001fb0 <vTaskSwitchContext>
 8003808:	f04f 0000 	mov.w	r0, #0
 800380c:	f380 8811 	msr	BASEPRI, r0
 8003810:	bc08      	pop	{r3}
 8003812:	6819      	ldr	r1, [r3, #0]
 8003814:	6808      	ldr	r0, [r1, #0]
 8003816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800381a:	f01e 0f10 	tst.w	lr, #16
 800381e:	bf08      	it	eq
 8003820:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003824:	f380 8809 	msr	PSP, r0
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop

08003830 <pxCurrentTCBConst>:
 8003830:	20000488 	.word	0x20000488

08003834 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8003838:	f7ff ffc2 	bl	80037c0 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800383c:	f7fe fac2 	bl	8001dc4 <xTaskIncrementTick>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d006      	beq.n	8003854 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003846:	f64e 5304 	movw	r3, #60676	; 0xed04
 800384a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800384e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003852:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8003854:	2000      	movs	r0, #0
 8003856:	f7ff ffbd 	bl	80037d4 <vPortClearInterruptMask>
}
 800385a:	bd80      	pop	{r7, pc}

0800385c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003860:	f24e 0314 	movw	r3, #57364	; 0xe014
 8003864:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003868:	f240 0200 	movw	r2, #0
 800386c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003870:	6811      	ldr	r1, [r2, #0]
 8003872:	f644 52d3 	movw	r2, #19923	; 0x4dd3
 8003876:	f2c1 0262 	movt	r2, #4194	; 0x1062
 800387a:	fba2 0201 	umull	r0, r2, r2, r1
 800387e:	0992      	lsrs	r2, r2, #6
 8003880:	3a01      	subs	r2, #1
 8003882:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003884:	f24e 0310 	movw	r3, #57360	; 0xe010
 8003888:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800388c:	2207      	movs	r2, #7
 800388e:	601a      	str	r2, [r3, #0]
}
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003898:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80038a8 <vPortEnableVFP+0x10>
 800389c:	6801      	ldr	r1, [r0, #0]
 800389e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80038a2:	6001      	str	r1, [r0, #0]
 80038a4:	4770      	bx	lr
 80038a6:	0000      	.short	0x0000
 80038a8:	e000ed88 	.word	0xe000ed88

080038ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80038b2:	f3ef 8305 	mrs	r3, IPSR
 80038b6:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b0f      	cmp	r3, #15
 80038bc:	d912      	bls.n	80038e4 <vPortValidateInterruptPriority+0x38>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80038be:	f24e 33f0 	movw	r3, #58352	; 0xe3f0
 80038c2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	4413      	add	r3, r2
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80038ce:	f240 5384 	movw	r3, #1412	; 0x584
 80038d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d202      	bcs.n	80038e4 <vPortValidateInterruptPriority+0x38>
 80038de:	f7ff ff6f 	bl	80037c0 <ulPortSetInterruptMask>
 80038e2:	e7fe      	b.n	80038e2 <vPortValidateInterruptPriority+0x36>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80038e4:	f64e 530c 	movw	r3, #60684	; 0xed0c
 80038e8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038f2:	f240 5388 	movw	r3, #1416	; 0x588
 80038f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d902      	bls.n	8003906 <vPortValidateInterruptPriority+0x5a>
 8003900:	f7ff ff5e 	bl	80037c0 <ulPortSetInterruptMask>
 8003904:	e7fe      	b.n	8003904 <vPortValidateInterruptPriority+0x58>
	}
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003912:	2300      	movs	r3, #0
 8003914:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003916:	f000 fab9 	bl	8003e8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800391a:	f240 53bc 	movw	r3, #1468	; 0x5bc
 800391e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d015      	beq.n	8003954 <xTimerCreateTimerTask+0x48>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8003928:	2302      	movs	r3, #2
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	2300      	movs	r3, #0
 800392e:	9301      	str	r3, [sp, #4]
 8003930:	2300      	movs	r3, #0
 8003932:	9302      	str	r3, [sp, #8]
 8003934:	2300      	movs	r3, #0
 8003936:	9303      	str	r3, [sp, #12]
 8003938:	f643 20ed 	movw	r0, #15085	; 0x3aed
 800393c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003940:	f247 31e4 	movw	r1, #29668	; 0x73e4
 8003944:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003948:	f44f 7282 	mov.w	r2, #260	; 0x104
 800394c:	2300      	movs	r3, #0
 800394e:	f7fd fd11 	bl	8001374 <xTaskGenericCreate>
 8003952:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d102      	bne.n	8003960 <xTimerCreateTimerTask+0x54>
 800395a:	f7ff ff31 	bl	80037c0 <ulPortSetInterruptMask>
 800395e:	e7fe      	b.n	800395e <xTimerCreateTimerTask+0x52>
	return xReturn;
 8003960:	687b      	ldr	r3, [r7, #4]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop

0800396c <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	603b      	str	r3, [r7, #0]
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d102      	bne.n	8003986 <xTimerCreate+0x1a>
	{
		pxNewTimer = NULL;
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	e01c      	b.n	80039c0 <xTimerCreate+0x54>
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8003986:	202c      	movs	r0, #44	; 0x2c
 8003988:	f000 fad4 	bl	8003f34 <pvPortMalloc>
 800398c:	6178      	str	r0, [r7, #20]
		if( pxNewTimer != NULL )
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d015      	beq.n	80039c0 <xTimerCreate+0x54>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
 8003994:	f000 fa7a 	bl	8003e8c <prvCheckForValidListAndQueue>

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	6a3a      	ldr	r2, [r7, #32]
 80039b4:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	3304      	adds	r3, #4
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff fd22 	bl	8003404 <vListInitialiseItem>
			traceTIMER_CREATE_FAILED();
		}
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d102      	bne.n	80039cc <xTimerCreate+0x60>
 80039c6:	f7ff fefb 	bl	80037c0 <ulPortSetInterruptMask>
 80039ca:	e7fe      	b.n	80039ca <xTimerCreate+0x5e>

	return ( TimerHandle_t ) pxNewTimer;
 80039cc:	697b      	ldr	r3, [r7, #20]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop

080039d8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b088      	sub	sp, #32
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80039ea:	f240 53bc 	movw	r3, #1468	; 0x5bc
 80039ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d039      	beq.n	8003a6c <xTimerGenericCommand+0x94>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b05      	cmp	r3, #5
 8003a08:	dc22      	bgt.n	8003a50 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a0a:	f7fe fe95 	bl	8002738 <xTaskGetSchedulerState>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d10e      	bne.n	8003a32 <xTimerGenericCommand+0x5a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a14:	f240 53bc 	movw	r3, #1468	; 0x5bc
 8003a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	f107 0310 	add.w	r3, r7, #16
 8003a22:	4610      	mov	r0, r2
 8003a24:	4619      	mov	r1, r3
 8003a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f7ff f935 	bl	8002c98 <xQueueGenericSend>
 8003a2e:	61f8      	str	r0, [r7, #28]
 8003a30:	e01c      	b.n	8003a6c <xTimerGenericCommand+0x94>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a32:	f240 53bc 	movw	r3, #1468	; 0x5bc
 8003a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	f107 0310 	add.w	r3, r7, #16
 8003a40:	4610      	mov	r0, r2
 8003a42:	4619      	mov	r1, r3
 8003a44:	2200      	movs	r2, #0
 8003a46:	2300      	movs	r3, #0
 8003a48:	f7ff f926 	bl	8002c98 <xQueueGenericSend>
 8003a4c:	61f8      	str	r0, [r7, #28]
 8003a4e:	e00d      	b.n	8003a6c <xTimerGenericCommand+0x94>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a50:	f240 53bc 	movw	r3, #1468	; 0x5bc
 8003a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	f107 0310 	add.w	r3, r7, #16
 8003a5e:	4610      	mov	r0, r2
 8003a60:	4619      	mov	r1, r3
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	2300      	movs	r3, #0
 8003a66:	f7ff f9dd 	bl	8002e24 <xQueueGenericSendFromISR>
 8003a6a:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a6c:	69fb      	ldr	r3, [r7, #28]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop

08003a78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a82:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8003a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3304      	adds	r3, #4
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff fd1c 	bl	80034d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d11b      	bne.n	8003adc <prvProcessExpiredTimer+0x64>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	699a      	ldr	r2, [r3, #24]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4413      	add	r3, r2
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	4619      	mov	r1, r3
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f000 f8b0 	bl	8003c18 <prvInsertTimerInActiveList>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d10e      	bne.n	8003adc <prvProcessExpiredTimer+0x64>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003abe:	2300      	movs	r3, #0
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f7ff ff85 	bl	80039d8 <xTimerGenericCommand>
 8003ace:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d102      	bne.n	8003adc <prvProcessExpiredTimer+0x64>
 8003ad6:	f7ff fe73 	bl	80037c0 <ulPortSetInterruptMask>
 8003ada:	e7fe      	b.n	8003ada <prvProcessExpiredTimer+0x62>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	4798      	blx	r3
}
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop

08003aec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003af4:	f107 0308 	add.w	r3, r7, #8
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 f841 	bl	8003b80 <prvGetNextExpireTime>
 8003afe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	4619      	mov	r1, r3
 8003b06:	f000 f803 	bl	8003b10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b0a:	f000 f8c9 	bl	8003ca0 <prvProcessReceivedCommands>
	}
 8003b0e:	e7f1      	b.n	8003af4 <prvTimerTask+0x8>

08003b10 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b1a:	f7fe f879 	bl	8001c10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b1e:	f107 0308 	add.w	r3, r7, #8
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f854 	bl	8003bd0 <prvSampleTimeNow>
 8003b28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d121      	bne.n	8003b74 <prvProcessTimerOrBlockTask+0x64>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <prvProcessTimerOrBlockTask+0x3c>
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d806      	bhi.n	8003b4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b3e:	f7fe f879 	bl	8001c34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	68f9      	ldr	r1, [r7, #12]
 8003b46:	f7ff ff97 	bl	8003a78 <prvProcessExpiredTimer>
 8003b4a:	e015      	b.n	8003b78 <prvProcessTimerOrBlockTask+0x68>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8003b4c:	f240 53bc 	movw	r3, #1468	; 0x5bc
 8003b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	1acb      	subs	r3, r1, r3
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	4619      	mov	r1, r3
 8003b60:	f7ff fc04 	bl	800336c <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8003b64:	f7fe f866 	bl	8001c34 <xTaskResumeAll>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d104      	bne.n	8003b78 <prvProcessTimerOrBlockTask+0x68>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8003b6e:	f7ff fdcb 	bl	8003708 <vPortYield>
 8003b72:	e001      	b.n	8003b78 <prvProcessTimerOrBlockTask+0x68>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8003b74:	f7fe f85e 	bl	8001c34 <xTaskResumeAll>
		}
	}
}
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop

08003b80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b88:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8003b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	bf14      	ite	ne
 8003b98:	2300      	movne	r3, #0
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d108      	bne.n	8003bbe <prvGetNextExpireTime+0x3e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bac:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8003bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	e001      	b.n	8003bc2 <prvGetNextExpireTime+0x42>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003bd8:	f7fe f8d6 	bl	8001d88 <xTaskGetTickCount>
 8003bdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003bde:	f240 53c0 	movw	r3, #1472	; 0x5c0
 8003be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d205      	bcs.n	8003bfa <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists();
 8003bee:	f000 f8e1 	bl	8003db4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	e002      	b.n	8003c00 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c00:	f240 53c0 	movw	r3, #1472	; 0x5c0
 8003c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop

08003c18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d815      	bhi.n	8003c6a <prvInsertTimerInActiveList+0x52>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	1ad2      	subs	r2, r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d302      	bcc.n	8003c52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	e021      	b.n	8003c96 <prvInsertTimerInActiveList+0x7e>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c52:	f240 53b8 	movw	r3, #1464	; 0x5b8
 8003c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	f7ff fbfe 	bl	8003464 <vListInsert>
 8003c68:	e015      	b.n	8003c96 <prvInsertTimerInActiveList+0x7e>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d206      	bcs.n	8003c80 <prvInsertTimerInActiveList+0x68>
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d302      	bcc.n	8003c80 <prvInsertTimerInActiveList+0x68>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	e00a      	b.n	8003c96 <prvInsertTimerInActiveList+0x7e>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c80:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8003c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4619      	mov	r1, r3
 8003c92:	f7ff fbe7 	bl	8003464 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003c96:	697b      	ldr	r3, [r7, #20]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08a      	sub	sp, #40	; 0x28
 8003ca4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ca6:	e070      	b.n	8003d8a <prvProcessReceivedCommands+0xea>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	db6d      	blt.n	8003d8a <prvProcessReceivedCommands+0xea>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d004      	beq.n	8003cc4 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff fc08 	bl	80034d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cc4:	1d3b      	adds	r3, r7, #4
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff ff82 	bl	8003bd0 <prvSampleTimeNow>
 8003ccc:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b09      	cmp	r3, #9
 8003cd2:	d859      	bhi.n	8003d88 <prvProcessReceivedCommands+0xe8>
 8003cd4:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <prvProcessReceivedCommands+0x3c>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003d05 	.word	0x08003d05
 8003ce0:	08003d05 	.word	0x08003d05
 8003ce4:	08003d05 	.word	0x08003d05
 8003ce8:	08003d89 	.word	0x08003d89
 8003cec:	08003d57 	.word	0x08003d57
 8003cf0:	08003d81 	.word	0x08003d81
 8003cf4:	08003d05 	.word	0x08003d05
 8003cf8:	08003d05 	.word	0x08003d05
 8003cfc:	08003d89 	.word	0x08003d89
 8003d00:	08003d57 	.word	0x08003d57
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	441a      	add	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	69f8      	ldr	r0, [r7, #28]
 8003d10:	4611      	mov	r1, r2
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	f7ff ff80 	bl	8003c18 <prvInsertTimerInActiveList>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d11a      	bne.n	8003d54 <prvProcessReceivedCommands+0xb4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	69f8      	ldr	r0, [r7, #28]
 8003d24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d112      	bne.n	8003d54 <prvProcessReceivedCommands+0xb4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	4413      	add	r3, r2
 8003d36:	2200      	movs	r2, #0
 8003d38:	9200      	str	r2, [sp, #0]
 8003d3a:	69f8      	ldr	r0, [r7, #28]
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	461a      	mov	r2, r3
 8003d40:	2300      	movs	r3, #0
 8003d42:	f7ff fe49 	bl	80039d8 <xTimerGenericCommand>
 8003d46:	6178      	str	r0, [r7, #20]
							configASSERT( xResult );
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d102      	bne.n	8003d54 <prvProcessReceivedCommands+0xb4>
 8003d4e:	f7ff fd37 	bl	80037c0 <ulPortSetInterruptMask>
 8003d52:	e7fe      	b.n	8003d52 <prvProcessReceivedCommands+0xb2>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8003d54:	e019      	b.n	8003d8a <prvProcessReceivedCommands+0xea>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d102      	bne.n	8003d6a <prvProcessReceivedCommands+0xca>
 8003d64:	f7ff fd2c 	bl	80037c0 <ulPortSetInterruptMask>
 8003d68:	e7fe      	b.n	8003d68 <prvProcessReceivedCommands+0xc8>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	4413      	add	r3, r2
 8003d72:	69f8      	ldr	r0, [r7, #28]
 8003d74:	4619      	mov	r1, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	f7ff ff4d 	bl	8003c18 <prvInsertTimerInActiveList>
					break;
 8003d7e:	e004      	b.n	8003d8a <prvProcessReceivedCommands+0xea>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
 8003d80:	69f8      	ldr	r0, [r7, #28]
 8003d82:	f000 f93b 	bl	8003ffc <vPortFree>
					break;
 8003d86:	e000      	b.n	8003d8a <prvProcessReceivedCommands+0xea>

				default	:
					/* Don't expect to get here. */
					break;
 8003d88:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d8a:	f240 53bc 	movw	r3, #1468	; 0x5bc
 8003d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	f107 0308 	add.w	r3, r7, #8
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f7ff f8b4 	bl	8002f0c <xQueueGenericReceive>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f47f af7e 	bne.w	8003ca8 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop

08003db4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003dba:	e046      	b.n	8003e4a <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dbc:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8003dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dcc:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8003dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	3304      	adds	r3, #4
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff fb77 	bl	80034d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	6938      	ldr	r0, [r7, #16]
 8003dec:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d129      	bne.n	8003e4a <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	699a      	ldr	r2, [r3, #24]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d911      	bls.n	8003e2c <prvSwitchTimerLists+0x78>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e14:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8003e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	3304      	adds	r3, #4
 8003e22:	4610      	mov	r0, r2
 8003e24:	4619      	mov	r1, r3
 8003e26:	f7ff fb1d 	bl	8003464 <vListInsert>
 8003e2a:	e00e      	b.n	8003e4a <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	6938      	ldr	r0, [r7, #16]
 8003e32:	2100      	movs	r1, #0
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	2300      	movs	r3, #0
 8003e38:	f7ff fdce 	bl	80039d8 <xTimerGenericCommand>
 8003e3c:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d102      	bne.n	8003e4a <prvSwitchTimerLists+0x96>
 8003e44:	f7ff fcbc 	bl	80037c0 <ulPortSetInterruptMask>
 8003e48:	e7fe      	b.n	8003e48 <prvSwitchTimerLists+0x94>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e4a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8003e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1b0      	bne.n	8003dbc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003e5a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8003e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8003e66:	f240 53b8 	movw	r3, #1464	; 0x5b8
 8003e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8003e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e78:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8003e7a:	f240 53b8 	movw	r3, #1464	; 0x5b8
 8003e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	601a      	str	r2, [r3, #0]
}
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003e90:	f7ff fc4c 	bl	800372c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003e94:	f240 53bc 	movw	r3, #1468	; 0x5bc
 8003e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d145      	bne.n	8003f2e <prvCheckForValidListAndQueue+0xa2>
		{
			vListInitialise( &xActiveTimerList1 );
 8003ea2:	f240 508c 	movw	r0, #1420	; 0x58c
 8003ea6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003eaa:	f7ff fa8b 	bl	80033c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003eae:	f240 50a0 	movw	r0, #1440	; 0x5a0
 8003eb2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003eb6:	f7ff fa85 	bl	80033c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003eba:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8003ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ec2:	f240 528c 	movw	r2, #1420	; 0x58c
 8003ec6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003eca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003ecc:	f240 53b8 	movw	r3, #1464	; 0x5b8
 8003ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ed4:	f240 52a0 	movw	r2, #1440	; 0x5a0
 8003ed8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003edc:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003ede:	200a      	movs	r0, #10
 8003ee0:	210c      	movs	r1, #12
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f7fe fdc8 	bl	8002a78 <xQueueGenericCreate>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	f240 53bc 	movw	r3, #1468	; 0x5bc
 8003eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003ef2:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
 8003ef4:	f240 53bc 	movw	r3, #1468	; 0x5bc
 8003ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d102      	bne.n	8003f08 <prvCheckForValidListAndQueue+0x7c>
 8003f02:	f7ff fc5d 	bl	80037c0 <ulPortSetInterruptMask>
 8003f06:	e7fe      	b.n	8003f06 <prvCheckForValidListAndQueue+0x7a>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003f08:	f240 53bc 	movw	r3, #1468	; 0x5bc
 8003f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <prvCheckForValidListAndQueue+0xa2>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f16:	f240 53bc 	movw	r3, #1468	; 0x5bc
 8003f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f247 31ec 	movw	r1, #29676	; 0x73ec
 8003f26:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003f2a:	f7ff f9f1 	bl	8003310 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f2e:	f7ff fc25 	bl	800377c <vPortExitCritical>
}
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d004      	beq.n	8003f54 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f023 0307 	bic.w	r3, r3, #7
 8003f50:	3308      	adds	r3, #8
 8003f52:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 8003f54:	f7fd fe5c 	bl	8001c10 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8003f58:	f243 13c8 	movw	r3, #12744	; 0x31c8
 8003f5c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d108      	bne.n	8003f78 <pvPortMalloc+0x44>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 8003f66:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <pvPortMalloc+0xc4>)
 8003f68:	f023 0307 	bic.w	r3, r3, #7
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	f243 13c8 	movw	r3, #12744	; 0x31c8
 8003f72:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8003f76:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8003f78:	f243 13c4 	movw	r3, #12740	; 0x31c4
 8003f7c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	441a      	add	r2, r3
 8003f86:	f642 33f7 	movw	r3, #11255	; 0x2bf7
 8003f8a:	f2c0 0301 	movt	r3, #1
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d825      	bhi.n	8003fde <pvPortMalloc+0xaa>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8003f92:	f243 13c4 	movw	r3, #12740	; 0x31c4
 8003f96:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	441a      	add	r2, r3
 8003fa0:	f243 13c4 	movw	r3, #12740	; 0x31c4
 8003fa4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8003fa8:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d917      	bls.n	8003fde <pvPortMalloc+0xaa>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8003fae:	f243 13c8 	movw	r3, #12744	; 0x31c8
 8003fb2:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	f243 13c4 	movw	r3, #12740	; 0x31c4
 8003fbc:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8003fc6:	f243 13c4 	movw	r3, #12740	; 0x31c4
 8003fca:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	441a      	add	r2, r3
 8003fd4:	f243 13c4 	movw	r3, #12740	; 0x31c4
 8003fd8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8003fdc:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003fde:	f7fd fe29 	bl	8001c34 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <pvPortMalloc+0xb8>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8003fe8:	f7fd f83c 	bl	8001064 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8003fec:	68fb      	ldr	r3, [r7, #12]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	200005cc 	.word	0x200005cc

08003ffc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <vPortFree+0x14>
 800400a:	f7ff fbd9 	bl	80037c0 <ulPortSetInterruptMask>
 800400e:	e7fe      	b.n	800400e <vPortFree+0x12>
}
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop

08004018 <vStartBlockingQueueTasks>:
static volatile short sBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };

/*-----------------------------------------------------------*/

void vStartBlockingQueueTasks( UBaseType_t uxPriority )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b090      	sub	sp, #64	; 0x40
 800401c:	af04      	add	r7, sp, #16
 800401e:	6078      	str	r0, [r7, #4]
xBlockingQueueParameters *pxQueueParameters1, *pxQueueParameters2;
xBlockingQueueParameters *pxQueueParameters3, *pxQueueParameters4;
xBlockingQueueParameters *pxQueueParameters5, *pxQueueParameters6;
const UBaseType_t uxQueueSize1 = 1, uxQueueSize5 = 5;
 8004020:	2301      	movs	r3, #1
 8004022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004024:	2305      	movs	r3, #5
 8004026:	62bb      	str	r3, [r7, #40]	; 0x28
const TickType_t xBlockTime = ( TickType_t ) 1000 / portTICK_PERIOD_MS;
 8004028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
const TickType_t xDontBlock = ( TickType_t ) 0;
 800402e:	2300      	movs	r3, #0
 8004030:	623b      	str	r3, [r7, #32]

	/* Create the first two tasks as described at the top of the file. */

	/* First create the structure used to pass parameters to the consumer tasks. */
	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 8004032:	200c      	movs	r0, #12
 8004034:	f7ff ff7e 	bl	8003f34 <pvPortMalloc>
 8004038:	61f8      	str	r0, [r7, #28]

	/* Create the queue used by the first two tasks to pass the incrementing number.
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
 800403a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800403c:	2102      	movs	r1, #2
 800403e:	2200      	movs	r2, #0
 8004040:	f7fe fd1a 	bl	8002a78 <xQueueGenericCreate>
 8004044:	4602      	mov	r2, r0
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	601a      	str	r2, [r3, #0]

	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404e:	605a      	str	r2, [r3, #4]

	/* Pass in the variable that this task is going to increment so we can check it
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	f243 13cc 	movw	r3, #12748	; 0x31cc
 8004056:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800405a:	6093      	str	r3, [r2, #8]

	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 800405c:	200c      	movs	r0, #12
 800405e:	f7ff ff69 	bl	8003f34 <pvPortMalloc>
 8004062:	61b8      	str	r0, [r7, #24]

	/* Pass the queue to this task also, using the parameter structure. */
	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	601a      	str	r2, [r3, #0]

	/* The producer is not going to block - as soon as it posts the consumer will
	wake and remove the item so the producer should always have room to post. */
	pxQueueParameters2->xBlockTime = xDontBlock;
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	6a3a      	ldr	r2, [r7, #32]
 8004070:	605a      	str	r2, [r3, #4]

	/* Pass in the variable that this task is going to increment so we can check
	it is still running. */
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	f243 13d4 	movw	r3, #12756	; 0x31d4
 8004078:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800407c:	6093      	str	r3, [r2, #8]


	/* Note the producer has a lower priority than the consumer when the tasks are
	spawned. */
	xTaskCreate( vBlockingQueueConsumer, "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, uxPriority, NULL );
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	2300      	movs	r3, #0
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	2300      	movs	r3, #0
 8004088:	9302      	str	r3, [sp, #8]
 800408a:	2300      	movs	r3, #0
 800408c:	9303      	str	r3, [sp, #12]
 800408e:	f244 2061 	movw	r0, #16993	; 0x4261
 8004092:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004096:	f247 31f4 	movw	r1, #29684	; 0x73f4
 800409a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800409e:	2282      	movs	r2, #130	; 0x82
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f7fd f967 	bl	8001374 <xTaskGenericCreate>
	xTaskCreate( vBlockingQueueProducer, "QProdB2", blckqSTACK_SIZE, ( void * ) pxQueueParameters2, tskIDLE_PRIORITY, NULL );
 80040a6:	2300      	movs	r3, #0
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	2300      	movs	r3, #0
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	2300      	movs	r3, #0
 80040b0:	9302      	str	r3, [sp, #8]
 80040b2:	2300      	movs	r3, #0
 80040b4:	9303      	str	r3, [sp, #12]
 80040b6:	f244 2005 	movw	r0, #16901	; 0x4205
 80040ba:	f6c0 0000 	movt	r0, #2048	; 0x800
 80040be:	f247 31fc 	movw	r1, #29692	; 0x73fc
 80040c2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80040c6:	2282      	movs	r2, #130	; 0x82
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	f7fd f953 	bl	8001374 <xTaskGenericCreate>


	/* Create the second two tasks as described at the top of the file.   This uses
	the same mechanism but reverses the task priorities. */

	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 80040ce:	200c      	movs	r0, #12
 80040d0:	f7ff ff30 	bl	8003f34 <pvPortMalloc>
 80040d4:	6178      	str	r0, [r7, #20]
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
 80040d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040d8:	2102      	movs	r1, #2
 80040da:	2200      	movs	r2, #0
 80040dc:	f7fe fccc 	bl	8002a78 <xQueueGenericCreate>
 80040e0:	4602      	mov	r2, r0
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	601a      	str	r2, [r3, #0]
	pxQueueParameters3->xBlockTime = xDontBlock;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	6a3a      	ldr	r2, [r7, #32]
 80040ea:	605a      	str	r2, [r3, #4]
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	4a41      	ldr	r2, [pc, #260]	; (80041f4 <vStartBlockingQueueTasks+0x1dc>)
 80040f0:	609a      	str	r2, [r3, #8]

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 80040f2:	200c      	movs	r0, #12
 80040f4:	f7ff ff1e 	bl	8003f34 <pvPortMalloc>
 80040f8:	6138      	str	r0, [r7, #16]
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	601a      	str	r2, [r3, #0]
	pxQueueParameters4->xBlockTime = xBlockTime;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004106:	605a      	str	r2, [r3, #4]
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4a3b      	ldr	r2, [pc, #236]	; (80041f8 <vStartBlockingQueueTasks+0x1e0>)
 800410c:	609a      	str	r2, [r3, #8]

	xTaskCreate( vBlockingQueueConsumer, "QConsB3", blckqSTACK_SIZE, ( void * ) pxQueueParameters3, tskIDLE_PRIORITY, NULL );
 800410e:	2300      	movs	r3, #0
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	2300      	movs	r3, #0
 8004114:	9301      	str	r3, [sp, #4]
 8004116:	2300      	movs	r3, #0
 8004118:	9302      	str	r3, [sp, #8]
 800411a:	2300      	movs	r3, #0
 800411c:	9303      	str	r3, [sp, #12]
 800411e:	f244 2061 	movw	r0, #16993	; 0x4261
 8004122:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004126:	f247 4104 	movw	r1, #29700	; 0x7404
 800412a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800412e:	2282      	movs	r2, #130	; 0x82
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f7fd f91f 	bl	8001374 <xTaskGenericCreate>
	xTaskCreate( vBlockingQueueProducer, "QProdB4", blckqSTACK_SIZE, ( void * ) pxQueueParameters4, uxPriority, NULL );
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	2300      	movs	r3, #0
 800413c:	9301      	str	r3, [sp, #4]
 800413e:	2300      	movs	r3, #0
 8004140:	9302      	str	r3, [sp, #8]
 8004142:	2300      	movs	r3, #0
 8004144:	9303      	str	r3, [sp, #12]
 8004146:	f244 2005 	movw	r0, #16901	; 0x4205
 800414a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800414e:	f247 410c 	movw	r1, #29708	; 0x740c
 8004152:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004156:	2282      	movs	r2, #130	; 0x82
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f7fd f90b 	bl	8001374 <xTaskGenericCreate>



	/* Create the last two tasks as described above.  The mechanism is again just
	the same.  This time both parameter structures are given a block time. */
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 800415e:	200c      	movs	r0, #12
 8004160:	f7ff fee8 	bl	8003f34 <pvPortMalloc>
 8004164:	60f8      	str	r0, [r7, #12]
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( UBaseType_t ) sizeof( uint16_t ) );
 8004166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004168:	2102      	movs	r1, #2
 800416a:	2200      	movs	r2, #0
 800416c:	f7fe fc84 	bl	8002a78 <xQueueGenericCreate>
 8004170:	4602      	mov	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	601a      	str	r2, [r3, #0]
	pxQueueParameters5->xBlockTime = xBlockTime;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417a:	605a      	str	r2, [r3, #4]
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4a1f      	ldr	r2, [pc, #124]	; (80041fc <vStartBlockingQueueTasks+0x1e4>)
 8004180:	609a      	str	r2, [r3, #8]

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 8004182:	200c      	movs	r0, #12
 8004184:	f7ff fed6 	bl	8003f34 <pvPortMalloc>
 8004188:	60b8      	str	r0, [r7, #8]
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	601a      	str	r2, [r3, #0]
	pxQueueParameters6->xBlockTime = xBlockTime;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004196:	605a      	str	r2, [r3, #4]
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4a19      	ldr	r2, [pc, #100]	; (8004200 <vStartBlockingQueueTasks+0x1e8>)
 800419c:	609a      	str	r2, [r3, #8]

	xTaskCreate( vBlockingQueueProducer, "QProdB5", blckqSTACK_SIZE, ( void * ) pxQueueParameters5, tskIDLE_PRIORITY, NULL );
 800419e:	2300      	movs	r3, #0
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	2300      	movs	r3, #0
 80041a4:	9301      	str	r3, [sp, #4]
 80041a6:	2300      	movs	r3, #0
 80041a8:	9302      	str	r3, [sp, #8]
 80041aa:	2300      	movs	r3, #0
 80041ac:	9303      	str	r3, [sp, #12]
 80041ae:	f244 2005 	movw	r0, #16901	; 0x4205
 80041b2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80041b6:	f247 4114 	movw	r1, #29716	; 0x7414
 80041ba:	f6c0 0100 	movt	r1, #2048	; 0x800
 80041be:	2282      	movs	r2, #130	; 0x82
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f7fd f8d7 	bl	8001374 <xTaskGenericCreate>
	xTaskCreate( vBlockingQueueConsumer, "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, tskIDLE_PRIORITY, NULL );
 80041c6:	2300      	movs	r3, #0
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	2300      	movs	r3, #0
 80041cc:	9301      	str	r3, [sp, #4]
 80041ce:	2300      	movs	r3, #0
 80041d0:	9302      	str	r3, [sp, #8]
 80041d2:	2300      	movs	r3, #0
 80041d4:	9303      	str	r3, [sp, #12]
 80041d6:	f244 2061 	movw	r0, #16993	; 0x4261
 80041da:	f6c0 0000 	movt	r0, #2048	; 0x800
 80041de:	f247 411c 	movw	r1, #29724	; 0x741c
 80041e2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80041e6:	2282      	movs	r2, #130	; 0x82
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f7fd f8c3 	bl	8001374 <xTaskGenericCreate>
}
 80041ee:	3730      	adds	r7, #48	; 0x30
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	200131d6 	.word	0x200131d6
 80041f8:	200131ce 	.word	0x200131ce
 80041fc:	200131d8 	.word	0x200131d8
 8004200:	200131d0 	.word	0x200131d0

08004204 <vBlockingQueueProducer>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
uint16_t usValue = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	81fb      	strh	r3, [r7, #14]
xBlockingQueueParameters *pxQueueParameters;
short sErrorEverOccurred = pdFALSE;
 8004210:	2300      	movs	r3, #0
 8004212:	82fb      	strh	r3, [r7, #22]

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	613b      	str	r3, [r7, #16]

	for( ;; )
	{
		if( xQueueSend( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBlockTime ) != pdPASS )
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	6819      	ldr	r1, [r3, #0]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f107 020e 	add.w	r2, r7, #14
 8004224:	4608      	mov	r0, r1
 8004226:	4611      	mov	r1, r2
 8004228:	461a      	mov	r2, r3
 800422a:	2300      	movs	r3, #0
 800422c:	f7fe fd34 	bl	8002c98 <xQueueGenericSend>
 8004230:	4603      	mov	r3, r0
 8004232:	2b01      	cmp	r3, #1
 8004234:	d002      	beq.n	800423c <vBlockingQueueProducer+0x38>
		{
			sErrorEverOccurred = pdTRUE;
 8004236:	2301      	movs	r3, #1
 8004238:	82fb      	strh	r3, [r7, #22]

			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}
	}
 800423a:	e7ed      	b.n	8004218 <vBlockingQueueProducer+0x14>
		}
		else
		{
			/* We have successfully posted a message, so increment the variable
			used to check we are still running. */
			if( sErrorEverOccurred == pdFALSE )
 800423c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d107      	bne.n	8004254 <vBlockingQueueProducer+0x50>
			{
				( *pxQueueParameters->psCheckVariable )++;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	8813      	ldrh	r3, [r2, #0]
 800424a:	b29b      	uxth	r3, r3
 800424c:	b29b      	uxth	r3, r3
 800424e:	3301      	adds	r3, #1
 8004250:	b29b      	uxth	r3, r3
 8004252:	8013      	strh	r3, [r2, #0]
			}

			/* Increment the variable we are going to post next time round.  The
			consumer will expect the numbers to	follow in numerical order. */
			++usValue;
 8004254:	89fb      	ldrh	r3, [r7, #14]
 8004256:	3301      	adds	r3, #1
 8004258:	b29b      	uxth	r3, r3
 800425a:	81fb      	strh	r3, [r7, #14]

			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}
	}
 800425c:	e7dc      	b.n	8004218 <vBlockingQueueProducer+0x14>
 800425e:	bf00      	nop

08004260 <vBlockingQueueConsumer>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
uint16_t usData, usExpectedValue = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	82fb      	strh	r3, [r7, #22]
xBlockingQueueParameters *pxQueueParameters;
short sErrorEverOccurred = pdFALSE;
 800426c:	2300      	movs	r3, #0
 800426e:	82bb      	strh	r3, [r7, #20]

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	613b      	str	r3, [r7, #16]

	for( ;; )
	{
		if( xQueueReceive( pxQueueParameters->xQueue, &usData, pxQueueParameters->xBlockTime ) == pdPASS )
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	6819      	ldr	r1, [r3, #0]
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f107 020e 	add.w	r2, r7, #14
 8004280:	4608      	mov	r0, r1
 8004282:	4611      	mov	r1, r2
 8004284:	461a      	mov	r2, r3
 8004286:	2300      	movs	r3, #0
 8004288:	f7fe fe40 	bl	8002f0c <xQueueGenericReceive>
 800428c:	4603      	mov	r3, r0
 800428e:	2b01      	cmp	r3, #1
 8004290:	d118      	bne.n	80042c4 <vBlockingQueueConsumer+0x64>
		{
			if( usData != usExpectedValue )
 8004292:	89fb      	ldrh	r3, [r7, #14]
 8004294:	8afa      	ldrh	r2, [r7, #22]
 8004296:	429a      	cmp	r2, r3
 8004298:	d004      	beq.n	80042a4 <vBlockingQueueConsumer+0x44>
			{
				/* Catch-up. */
				usExpectedValue = usData;
 800429a:	89fb      	ldrh	r3, [r7, #14]
 800429c:	82fb      	strh	r3, [r7, #22]

				sErrorEverOccurred = pdTRUE;
 800429e:	2301      	movs	r3, #1
 80042a0:	82bb      	strh	r3, [r7, #20]
 80042a2:	e00f      	b.n	80042c4 <vBlockingQueueConsumer+0x64>
			}
			else
			{
				/* We have successfully received a message, so increment the
				variable used to check we are still running. */
				if( sErrorEverOccurred == pdFALSE )
 80042a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d107      	bne.n	80042bc <vBlockingQueueConsumer+0x5c>
				{
					( *pxQueueParameters->psCheckVariable )++;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	8813      	ldrh	r3, [r2, #0]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3301      	adds	r3, #1
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	8013      	strh	r3, [r2, #0]
				}

				/* Increment the value we expect to remove from the queue next time
				round. */
				++usExpectedValue;
 80042bc:	8afb      	ldrh	r3, [r7, #22]
 80042be:	3301      	adds	r3, #1
 80042c0:	82fb      	strh	r3, [r7, #22]
					taskYIELD();
				}
			}
			#endif
		}
	}
 80042c2:	e7d7      	b.n	8004274 <vBlockingQueueConsumer+0x14>
 80042c4:	e7d6      	b.n	8004274 <vBlockingQueueConsumer+0x14>
 80042c6:	bf00      	nop

080042c8 <xAreBlockingQueuesStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreBlockingQueuesStillRunning( void )
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
static short sLastBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };
static short sLastBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };
BaseType_t xReturn = pdPASS, xTasks;
 80042ce:	2301      	movs	r3, #1
 80042d0:	607b      	str	r3, [r7, #4]
	changed or not.

	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
 80042d2:	2300      	movs	r3, #0
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	e04a      	b.n	800436e <xAreBlockingQueuesStillRunning+0xa6>
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
 80042d8:	f243 13cc 	movw	r3, #12748	; 0x31cc
 80042dc:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	f243 13dc 	movw	r3, #12764	; 0x31dc
 80042ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80042f0:	6839      	ldr	r1, [r7, #0]
 80042f2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80042f6:	b212      	sxth	r2, r2
 80042f8:	b21b      	sxth	r3, r3
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d101      	bne.n	8004302 <xAreBlockingQueuesStillRunning+0x3a>
		{
			xReturn = pdFALSE;
 80042fe:	2300      	movs	r3, #0
 8004300:	607b      	str	r3, [r7, #4]
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 8004302:	f243 13cc 	movw	r3, #12748	; 0x31cc
 8004306:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004310:	b299      	uxth	r1, r3
 8004312:	f243 13dc 	movw	r3, #12764	; 0x31dc
 8004316:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
 8004320:	f243 13d4 	movw	r3, #12756	; 0x31d4
 8004324:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800432e:	b29a      	uxth	r2, r3
 8004330:	f243 13e4 	movw	r3, #12772	; 0x31e4
 8004334:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004338:	6839      	ldr	r1, [r7, #0]
 800433a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800433e:	b212      	sxth	r2, r2
 8004340:	b21b      	sxth	r3, r3
 8004342:	429a      	cmp	r2, r3
 8004344:	d101      	bne.n	800434a <xAreBlockingQueuesStillRunning+0x82>
		{
			xReturn = pdFALSE;
 8004346:	2300      	movs	r3, #0
 8004348:	607b      	str	r3, [r7, #4]
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
 800434a:	f243 13d4 	movw	r3, #12756	; 0x31d4
 800434e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004358:	b299      	uxth	r1, r3
 800435a:	f243 13e4 	movw	r3, #12772	; 0x31e4
 800435e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	changed or not.

	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	3301      	adds	r3, #1
 800436c:	603b      	str	r3, [r7, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b02      	cmp	r3, #2
 8004372:	ddb1      	ble.n	80042d8 <xAreBlockingQueuesStillRunning+0x10>
			xReturn = pdFALSE;
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
	}

	return xReturn;
 8004374:	687b      	ldr	r3, [r7, #4]
}
 8004376:	4618      	mov	r0, r3
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop

08004384 <vCreateBlockTimeTasks>:
static void vSecondaryBlockTimeTestTask( void *pvParameters );

/*-----------------------------------------------------------*/

void vCreateBlockTimeTasks( void )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af04      	add	r7, sp, #16
	/* Create the queue on which the two tasks block. */
    xTestQueue = xQueueCreate( bktQUEUE_LENGTH, sizeof( BaseType_t ) );
 800438a:	2005      	movs	r0, #5
 800438c:	2104      	movs	r1, #4
 800438e:	2200      	movs	r2, #0
 8004390:	f7fe fb72 	bl	8002a78 <xQueueGenericCreate>
 8004394:	4602      	mov	r2, r0
 8004396:	f243 13ec 	movw	r3, #12780	; 0x31ec
 800439a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800439e:	601a      	str	r2, [r3, #0]
	in use.  The queue registry is provided as a means for kernel aware
	debuggers to locate queues and has no purpose if a kernel aware debugger
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
	defined to be less than 1. */
	vQueueAddToRegistry( xTestQueue, "Block_Time_Queue" );
 80043a0:	f243 13ec 	movw	r3, #12780	; 0x31ec
 80043a4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f247 4124 	movw	r1, #29732	; 0x7424
 80043b0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80043b4:	f7fe ffac 	bl	8003310 <vQueueAddToRegistry>

	/* Create the two test tasks. */
	xTaskCreate( vPrimaryBlockTimeTestTask, "BTest1", configMINIMAL_STACK_SIZE, NULL, bktPRIMARY_PRIORITY, NULL );
 80043b8:	2302      	movs	r3, #2
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	2300      	movs	r3, #0
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	2300      	movs	r3, #0
 80043c2:	9302      	str	r3, [sp, #8]
 80043c4:	2300      	movs	r3, #0
 80043c6:	9303      	str	r3, [sp, #12]
 80043c8:	f244 4015 	movw	r0, #17429	; 0x4415
 80043cc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80043d0:	f247 4138 	movw	r1, #29752	; 0x7438
 80043d4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80043d8:	2282      	movs	r2, #130	; 0x82
 80043da:	2300      	movs	r3, #0
 80043dc:	f7fc ffca 	bl	8001374 <xTaskGenericCreate>
	xTaskCreate( vSecondaryBlockTimeTestTask, "BTest2", configMINIMAL_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
 80043e0:	2301      	movs	r3, #1
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	f243 13f0 	movw	r3, #12784	; 0x31f0
 80043e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80043ec:	9301      	str	r3, [sp, #4]
 80043ee:	2300      	movs	r3, #0
 80043f0:	9302      	str	r3, [sp, #8]
 80043f2:	2300      	movs	r3, #0
 80043f4:	9303      	str	r3, [sp, #12]
 80043f6:	f644 0001 	movw	r0, #18433	; 0x4801
 80043fa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80043fe:	f247 4140 	movw	r1, #29760	; 0x7440
 8004402:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004406:	2282      	movs	r2, #130	; 0x82
 8004408:	2300      	movs	r3, #0
 800440a:	f7fc ffb3 	bl	8001374 <xTaskGenericCreate>
}
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop

08004414 <vPrimaryBlockTimeTestTask>:
/*-----------------------------------------------------------*/

static void vPrimaryBlockTimeTestTask( void *pvParameters )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
	{
		/*********************************************************************
        Test 1

        Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 800441c:	2300      	movs	r3, #0
 800441e:	613b      	str	r3, [r7, #16]
 8004420:	e03c      	b.n	800449c <vPrimaryBlockTimeTestTask+0x88>
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	220a      	movs	r2, #10
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	61fb      	str	r3, [r7, #28]

			xTimeWhenBlocking = xTaskGetTickCount();
 800442c:	f7fd fcac 	bl	8001d88 <xTaskGetTickCount>
 8004430:	61b8      	str	r0, [r7, #24]

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
 8004432:	f243 13ec 	movw	r3, #12780	; 0x31ec
 8004436:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	f107 030c 	add.w	r3, r7, #12
 8004440:	4610      	mov	r0, r2
 8004442:	4619      	mov	r1, r3
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	2300      	movs	r3, #0
 8004448:	f7fe fd60 	bl	8002f0c <xQueueGenericReceive>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <vPrimaryBlockTimeTestTask+0x4a>
			{
				xErrorOccurred = pdTRUE;
 8004452:	f243 13fc 	movw	r3, #12796	; 0x31fc
 8004456:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800445a:	2201      	movs	r2, #1
 800445c:	601a      	str	r2, [r3, #0]
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 800445e:	f7fd fc93 	bl	8001d88 <xTaskGetTickCount>
 8004462:	4602      	mov	r2, r0
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	617b      	str	r3, [r7, #20]

			if( xBlockedTime < xTimeToBlock )
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	429a      	cmp	r2, r3
 8004470:	d205      	bcs.n	800447e <vPrimaryBlockTimeTestTask+0x6a>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
 8004472:	f243 13fc 	movw	r3, #12796	; 0x31fc
 8004476:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f103 020f 	add.w	r2, r3, #15
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	429a      	cmp	r2, r3
 8004488:	d205      	bcs.n	8004496 <vPrimaryBlockTimeTestTask+0x82>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
 800448a:	f243 13fc 	movw	r3, #12796	; 0x31fc
 800448e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004492:	2201      	movs	r2, #1
 8004494:	601a      	str	r2, [r3, #0]
	{
		/*********************************************************************
        Test 1

        Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	3301      	adds	r3, #1
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	2b04      	cmp	r3, #4
 80044a0:	ddbf      	ble.n	8004422 <vPrimaryBlockTimeTestTask+0xe>
        Test 2

        Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	e018      	b.n	80044da <vPrimaryBlockTimeTestTask+0xc6>
		{
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 80044a8:	f243 13ec 	movw	r3, #12780	; 0x31ec
 80044ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	f107 0310 	add.w	r3, r7, #16
 80044b6:	4610      	mov	r0, r2
 80044b8:	4619      	mov	r1, r3
 80044ba:	2200      	movs	r2, #0
 80044bc:	2300      	movs	r3, #0
 80044be:	f7fe fbeb 	bl	8002c98 <xQueueGenericSend>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d005      	beq.n	80044d4 <vPrimaryBlockTimeTestTask+0xc0>
			{
				xErrorOccurred = pdTRUE;
 80044c8:	f243 13fc 	movw	r3, #12796	; 0x31fc
 80044cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80044d0:	2201      	movs	r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
        Test 2

        Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	3301      	adds	r3, #1
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	2b04      	cmp	r3, #4
 80044de:	dde3      	ble.n	80044a8 <vPrimaryBlockTimeTestTask+0x94>
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 80044e0:	2300      	movs	r3, #0
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	e03c      	b.n	8004560 <vPrimaryBlockTimeTestTask+0x14c>
		{
			/* The queue is full. Attempt to write to the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	220a      	movs	r2, #10
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	61fb      	str	r3, [r7, #28]

			xTimeWhenBlocking = xTaskGetTickCount();
 80044f0:	f7fd fc4a 	bl	8001d88 <xTaskGetTickCount>
 80044f4:	61b8      	str	r0, [r7, #24]

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueSend( xTestQueue, &xItem, xTimeToBlock ) != errQUEUE_FULL )
 80044f6:	f243 13ec 	movw	r3, #12780	; 0x31ec
 80044fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	f107 0310 	add.w	r3, r7, #16
 8004504:	4610      	mov	r0, r2
 8004506:	4619      	mov	r1, r3
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	2300      	movs	r3, #0
 800450c:	f7fe fbc4 	bl	8002c98 <xQueueGenericSend>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <vPrimaryBlockTimeTestTask+0x10e>
			{
				xErrorOccurred = pdTRUE;
 8004516:	f243 13fc 	movw	r3, #12796	; 0x31fc
 800451a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800451e:	2201      	movs	r2, #1
 8004520:	601a      	str	r2, [r3, #0]
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 8004522:	f7fd fc31 	bl	8001d88 <xTaskGetTickCount>
 8004526:	4602      	mov	r2, r0
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	617b      	str	r3, [r7, #20]

			if( xBlockedTime < xTimeToBlock )
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	429a      	cmp	r2, r3
 8004534:	d205      	bcs.n	8004542 <vPrimaryBlockTimeTestTask+0x12e>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
 8004536:	f243 13fc 	movw	r3, #12796	; 0x31fc
 800453a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800453e:	2201      	movs	r2, #1
 8004540:	601a      	str	r2, [r3, #0]
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	f103 020f 	add.w	r2, r3, #15
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	429a      	cmp	r2, r3
 800454c:	d205      	bcs.n	800455a <vPrimaryBlockTimeTestTask+0x146>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
 800454e:	f243 13fc 	movw	r3, #12796	; 0x31fc
 8004552:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004556:	2201      	movs	r2, #1
 8004558:	601a      	str	r2, [r3, #0]
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	3301      	adds	r3, #1
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	2b04      	cmp	r3, #4
 8004564:	ddbf      	ble.n	80044e6 <vPrimaryBlockTimeTestTask+0xd2>
		recognise that its block time has not expired and return to block for
		the remains of its block time.

		Wake the other task so it blocks attempting to post to the already
		full queue. */
		xRunIndicator = 0;
 8004566:	f243 2300 	movw	r3, #12800	; 0x3200
 800456a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
		vTaskResume( xSecondary );
 8004572:	f243 13f0 	movw	r3, #12784	; 0x31f0
 8004576:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fd fab5 	bl	8001aec <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8004582:	e002      	b.n	800458a <vPrimaryBlockTimeTestTask+0x176>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
 8004584:	2014      	movs	r0, #20
 8004586:	f7fd f8d1 	bl	800172c <vTaskDelay>
		full queue. */
		xRunIndicator = 0;
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 800458a:	f243 2300 	movw	r3, #12800	; 0x3200
 800458e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b55      	cmp	r3, #85	; 0x55
 8004596:	d1f5      	bne.n	8004584 <vPrimaryBlockTimeTestTask+0x170>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
 8004598:	2014      	movs	r0, #20
 800459a:	f7fd f8c7 	bl	800172c <vTaskDelay>
		xRunIndicator = 0;
 800459e:	f243 2300 	movw	r3, #12800	; 0x3200
 80045a2:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	e05a      	b.n	8004666 <vPrimaryBlockTimeTestTask+0x252>
		{
			/* Now when we make space on the queue the other task should wake
			but not execute as this task has higher priority. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 80045b0:	f243 13ec 	movw	r3, #12780	; 0x31ec
 80045b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	f107 030c 	add.w	r3, r7, #12
 80045be:	4610      	mov	r0, r2
 80045c0:	4619      	mov	r1, r3
 80045c2:	2200      	movs	r2, #0
 80045c4:	2300      	movs	r3, #0
 80045c6:	f7fe fca1 	bl	8002f0c <xQueueGenericReceive>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d005      	beq.n	80045dc <vPrimaryBlockTimeTestTask+0x1c8>
			{
				xErrorOccurred = pdTRUE;
 80045d0:	f243 13fc 	movw	r3, #12796	; 0x31fc
 80045d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80045d8:	2201      	movs	r2, #1
 80045da:	601a      	str	r2, [r3, #0]
			}

			/* Now fill the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			full ourselves, and the other task have set xRunIndicator. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 80045dc:	f243 13ec 	movw	r3, #12780	; 0x31ec
 80045e0:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	f107 0310 	add.w	r3, r7, #16
 80045ea:	4610      	mov	r0, r2
 80045ec:	4619      	mov	r1, r3
 80045ee:	2200      	movs	r2, #0
 80045f0:	2300      	movs	r3, #0
 80045f2:	f7fe fb51 	bl	8002c98 <xQueueGenericSend>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d005      	beq.n	8004608 <vPrimaryBlockTimeTestTask+0x1f4>
			{
				xErrorOccurred = pdTRUE;
 80045fc:	f243 13fc 	movw	r3, #12796	; 0x31fc
 8004600:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004604:	2201      	movs	r2, #1
 8004606:	601a      	str	r2, [r3, #0]
			}

			if( xRunIndicator == bktRUN_INDICATOR )
 8004608:	f243 2300 	movw	r3, #12800	; 0x3200
 800460c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b55      	cmp	r3, #85	; 0x55
 8004614:	d105      	bne.n	8004622 <vPrimaryBlockTimeTestTask+0x20e>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
 8004616:	f243 13fc 	movw	r3, #12796	; 0x31fc
 800461a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800461e:	2201      	movs	r2, #1
 8004620:	601a      	str	r2, [r3, #0]
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
 8004622:	f243 13f0 	movw	r3, #12784	; 0x31f0
 8004626:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	2104      	movs	r1, #4
 8004630:	f7fd f8e4 	bl	80017fc <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
 8004634:	f243 2300 	movw	r3, #12800	; 0x3200
 8004638:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b55      	cmp	r3, #85	; 0x55
 8004640:	d105      	bne.n	800464e <vPrimaryBlockTimeTestTask+0x23a>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
 8004642:	f243 13fc 	movw	r3, #12796	; 0x31fc
 8004646:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]
			}

			/* Set the priority back down. */
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
 800464e:	f243 13f0 	movw	r3, #12784	; 0x31f0
 8004652:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	2101      	movs	r1, #1
 800465c:	f7fd f8ce 	bl	80017fc <vTaskPrioritySet>
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	3301      	adds	r3, #1
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	2b04      	cmp	r3, #4
 800466a:	dda1      	ble.n	80045b0 <vPrimaryBlockTimeTestTask+0x19c>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 800466c:	e002      	b.n	8004674 <vPrimaryBlockTimeTestTask+0x260>
		{
			vTaskDelay( bktSHORT_WAIT );
 800466e:	2014      	movs	r0, #20
 8004670:	f7fd f85c 	bl	800172c <vTaskDelay>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8004674:	f243 2300 	movw	r3, #12800	; 0x3200
 8004678:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b55      	cmp	r3, #85	; 0x55
 8004680:	d1f5      	bne.n	800466e <vPrimaryBlockTimeTestTask+0x25a>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
 8004682:	2014      	movs	r0, #20
 8004684:	f7fd f852 	bl	800172c <vTaskDelay>
		xRunIndicator = 0;
 8004688:	f243 2300 	movw	r3, #12800	; 0x3200
 800468c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8004694:	2300      	movs	r3, #0
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	e018      	b.n	80046cc <vPrimaryBlockTimeTestTask+0x2b8>
		{
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 800469a:	f243 13ec 	movw	r3, #12780	; 0x31ec
 800469e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	f107 030c 	add.w	r3, r7, #12
 80046a8:	4610      	mov	r0, r2
 80046aa:	4619      	mov	r1, r3
 80046ac:	2200      	movs	r2, #0
 80046ae:	2300      	movs	r3, #0
 80046b0:	f7fe fc2c 	bl	8002f0c <xQueueGenericReceive>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d005      	beq.n	80046c6 <vPrimaryBlockTimeTestTask+0x2b2>
			{
				xErrorOccurred = pdTRUE;
 80046ba:	f243 13fc 	movw	r3, #12796	; 0x31fc
 80046be:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80046c2:	2201      	movs	r2, #1
 80046c4:	601a      	str	r2, [r3, #0]

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	3301      	adds	r3, #1
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	dde3      	ble.n	800469a <vPrimaryBlockTimeTestTask+0x286>
			}
		}

		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );
 80046d2:	f243 13f0 	movw	r3, #12784	; 0x31f0
 80046d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fd fa05 	bl	8001aec <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 80046e2:	e002      	b.n	80046ea <vPrimaryBlockTimeTestTask+0x2d6>
		{
			vTaskDelay( bktSHORT_WAIT );
 80046e4:	2014      	movs	r0, #20
 80046e6:	f7fd f821 	bl	800172c <vTaskDelay>
		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 80046ea:	f243 2300 	movw	r3, #12800	; 0x3200
 80046ee:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b55      	cmp	r3, #85	; 0x55
 80046f6:	d1f5      	bne.n	80046e4 <vPrimaryBlockTimeTestTask+0x2d0>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
 80046f8:	2014      	movs	r0, #20
 80046fa:	f7fd f817 	bl	800172c <vTaskDelay>
		xRunIndicator = 0;
 80046fe:	f243 2300 	movw	r3, #12800	; 0x3200
 8004702:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 800470a:	2300      	movs	r3, #0
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	e05a      	b.n	80047c6 <vPrimaryBlockTimeTestTask+0x3b2>
		{
			/* Now when we place an item on the queue the other task should
			wake but not execute as this task has higher priority. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 8004710:	f243 13ec 	movw	r3, #12780	; 0x31ec
 8004714:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	f107 0310 	add.w	r3, r7, #16
 800471e:	4610      	mov	r0, r2
 8004720:	4619      	mov	r1, r3
 8004722:	2200      	movs	r2, #0
 8004724:	2300      	movs	r3, #0
 8004726:	f7fe fab7 	bl	8002c98 <xQueueGenericSend>
 800472a:	4603      	mov	r3, r0
 800472c:	2b01      	cmp	r3, #1
 800472e:	d005      	beq.n	800473c <vPrimaryBlockTimeTestTask+0x328>
			{
				xErrorOccurred = pdTRUE;
 8004730:	f243 13fc 	movw	r3, #12796	; 0x31fc
 8004734:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004738:	2201      	movs	r2, #1
 800473a:	601a      	str	r2, [r3, #0]
			}

			/* Now empty the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			empty ourselves, and the other task would be suspended. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 800473c:	f243 13ec 	movw	r3, #12780	; 0x31ec
 8004740:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	f107 030c 	add.w	r3, r7, #12
 800474a:	4610      	mov	r0, r2
 800474c:	4619      	mov	r1, r3
 800474e:	2200      	movs	r2, #0
 8004750:	2300      	movs	r3, #0
 8004752:	f7fe fbdb 	bl	8002f0c <xQueueGenericReceive>
 8004756:	4603      	mov	r3, r0
 8004758:	2b01      	cmp	r3, #1
 800475a:	d005      	beq.n	8004768 <vPrimaryBlockTimeTestTask+0x354>
			{
				xErrorOccurred = pdTRUE;
 800475c:	f243 13fc 	movw	r3, #12796	; 0x31fc
 8004760:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004764:	2201      	movs	r2, #1
 8004766:	601a      	str	r2, [r3, #0]
			}

			if( xRunIndicator == bktRUN_INDICATOR )
 8004768:	f243 2300 	movw	r3, #12800	; 0x3200
 800476c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b55      	cmp	r3, #85	; 0x55
 8004774:	d105      	bne.n	8004782 <vPrimaryBlockTimeTestTask+0x36e>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
 8004776:	f243 13fc 	movw	r3, #12796	; 0x31fc
 800477a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800477e:	2201      	movs	r2, #1
 8004780:	601a      	str	r2, [r3, #0]
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
 8004782:	f243 13f0 	movw	r3, #12784	; 0x31f0
 8004786:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	2104      	movs	r1, #4
 8004790:	f7fd f834 	bl	80017fc <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
 8004794:	f243 2300 	movw	r3, #12800	; 0x3200
 8004798:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b55      	cmp	r3, #85	; 0x55
 80047a0:	d105      	bne.n	80047ae <vPrimaryBlockTimeTestTask+0x39a>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
 80047a2:	f243 13fc 	movw	r3, #12796	; 0x31fc
 80047a6:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80047aa:	2201      	movs	r2, #1
 80047ac:	601a      	str	r2, [r3, #0]
			}
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
 80047ae:	f243 13f0 	movw	r3, #12784	; 0x31f0
 80047b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	2101      	movs	r1, #1
 80047bc:	f7fd f81e 	bl	80017fc <vTaskPrioritySet>
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	3301      	adds	r3, #1
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	dda1      	ble.n	8004710 <vPrimaryBlockTimeTestTask+0x2fc>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 80047cc:	e002      	b.n	80047d4 <vPrimaryBlockTimeTestTask+0x3c0>
		{
			vTaskDelay( bktSHORT_WAIT );
 80047ce:	2014      	movs	r0, #20
 80047d0:	f7fc ffac 	bl	800172c <vTaskDelay>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 80047d4:	f243 2300 	movw	r3, #12800	; 0x3200
 80047d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b55      	cmp	r3, #85	; 0x55
 80047e0:	d1f5      	bne.n	80047ce <vPrimaryBlockTimeTestTask+0x3ba>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
 80047e2:	2014      	movs	r0, #20
 80047e4:	f7fc ffa2 	bl	800172c <vTaskDelay>

		xPrimaryCycles++;
 80047e8:	f243 13f4 	movw	r3, #12788	; 0x31f4
 80047ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	f243 13f4 	movw	r3, #12788	; 0x31f4
 80047f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80047fc:	601a      	str	r2, [r3, #0]
	}
 80047fe:	e60d      	b.n	800441c <vPrimaryBlockTimeTestTask+0x8>

08004800 <vSecondaryBlockTimeTestTask>:
}
/*-----------------------------------------------------------*/

static void vSecondaryBlockTimeTestTask( void *pvParameters )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	{
		/*********************************************************************
        Test 1 and 2

		This task does does not participate in these tests. */
		vTaskSuspend( NULL );
 8004808:	2000      	movs	r0, #0
 800480a:	f7fd f8ad 	bl	8001968 <vTaskSuspend>
        Test 3

		The first thing we do is attempt to read from the queue.  It should be
		full so we block.  Note the time before we block so we can check the
		wake time is as per that expected. */
		xTimeWhenBlocking = xTaskGetTickCount();
 800480e:	f7fd fabb 	bl	8001d88 <xTaskGetTickCount>
 8004812:	6178      	str	r0, [r7, #20]

		/* We should unblock after bktTIME_TO_BLOCK having not sent
		anything to the queue. */
		xData = 0;
 8004814:	2300      	movs	r3, #0
 8004816:	60fb      	str	r3, [r7, #12]
		xRunIndicator = bktRUN_INDICATOR;
 8004818:	f243 2300 	movw	r3, #12800	; 0x3200
 800481c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004820:	2255      	movs	r2, #85	; 0x55
 8004822:	601a      	str	r2, [r3, #0]
		if( xQueueSend( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_FULL )
 8004824:	f243 13ec 	movw	r3, #12780	; 0x31ec
 8004828:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	f107 030c 	add.w	r3, r7, #12
 8004832:	4610      	mov	r0, r2
 8004834:	4619      	mov	r1, r3
 8004836:	22af      	movs	r2, #175	; 0xaf
 8004838:	2300      	movs	r3, #0
 800483a:	f7fe fa2d 	bl	8002c98 <xQueueGenericSend>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <vSecondaryBlockTimeTestTask+0x50>
		{
			xErrorOccurred = pdTRUE;
 8004844:	f243 13fc 	movw	r3, #12796	; 0x31fc
 8004848:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800484c:	2201      	movs	r2, #1
 800484e:	601a      	str	r2, [r3, #0]
		}

		/* How long were we inside the send function? */
		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 8004850:	f7fd fa9a 	bl	8001d88 <xTaskGetTickCount>
 8004854:	4602      	mov	r2, r0
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	613b      	str	r3, [r7, #16]

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	2bae      	cmp	r3, #174	; 0xae
 8004860:	d805      	bhi.n	800486e <vSecondaryBlockTimeTestTask+0x6e>
		{
			xErrorOccurred = pdTRUE;
 8004862:	f243 13fc 	movw	r3, #12796	; 0x31fc
 8004866:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800486a:	2201      	movs	r2, #1
 800486c:	601a      	str	r2, [r3, #0]
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as
		soon as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	2bbe      	cmp	r3, #190	; 0xbe
 8004872:	d905      	bls.n	8004880 <vSecondaryBlockTimeTestTask+0x80>
		{
			xErrorOccurred = pdTRUE;
 8004874:	f243 13fc 	movw	r3, #12796	; 0x31fc
 8004878:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800487c:	2201      	movs	r2, #1
 800487e:	601a      	str	r2, [r3, #0]
		}

		/* Suspend ready for test 3. */
		xRunIndicator = bktRUN_INDICATOR;
 8004880:	f243 2300 	movw	r3, #12800	; 0x3200
 8004884:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004888:	2255      	movs	r2, #85	; 0x55
 800488a:	601a      	str	r2, [r3, #0]
		vTaskSuspend( NULL );
 800488c:	2000      	movs	r0, #0
 800488e:	f7fd f86b 	bl	8001968 <vTaskSuspend>

		/*********************************************************************
        Test 4

		As per test three, but with the send and receive reversed. */
		xTimeWhenBlocking = xTaskGetTickCount();
 8004892:	f7fd fa79 	bl	8001d88 <xTaskGetTickCount>
 8004896:	6178      	str	r0, [r7, #20]

		/* We should unblock after bktTIME_TO_BLOCK having not received
		anything on the queue. */
		xRunIndicator = bktRUN_INDICATOR;
 8004898:	f243 2300 	movw	r3, #12800	; 0x3200
 800489c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80048a0:	2255      	movs	r2, #85	; 0x55
 80048a2:	601a      	str	r2, [r3, #0]
		if( xQueueReceive( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_EMPTY )
 80048a4:	f243 13ec 	movw	r3, #12780	; 0x31ec
 80048a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	f107 030c 	add.w	r3, r7, #12
 80048b2:	4610      	mov	r0, r2
 80048b4:	4619      	mov	r1, r3
 80048b6:	22af      	movs	r2, #175	; 0xaf
 80048b8:	2300      	movs	r3, #0
 80048ba:	f7fe fb27 	bl	8002f0c <xQueueGenericReceive>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <vSecondaryBlockTimeTestTask+0xd0>
		{
			xErrorOccurred = pdTRUE;
 80048c4:	f243 13fc 	movw	r3, #12796	; 0x31fc
 80048c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80048cc:	2201      	movs	r2, #1
 80048ce:	601a      	str	r2, [r3, #0]
		}

		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 80048d0:	f7fd fa5a 	bl	8001d88 <xTaskGetTickCount>
 80048d4:	4602      	mov	r2, r0
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	613b      	str	r3, [r7, #16]

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2bae      	cmp	r3, #174	; 0xae
 80048e0:	d805      	bhi.n	80048ee <vSecondaryBlockTimeTestTask+0xee>
		{
			xErrorOccurred = pdTRUE;
 80048e2:	f243 13fc 	movw	r3, #12796	; 0x31fc
 80048e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80048ea:	2201      	movs	r2, #1
 80048ec:	601a      	str	r2, [r3, #0]
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as soon
		as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2bbe      	cmp	r3, #190	; 0xbe
 80048f2:	d905      	bls.n	8004900 <vSecondaryBlockTimeTestTask+0x100>
		{
			xErrorOccurred = pdTRUE;
 80048f4:	f243 13fc 	movw	r3, #12796	; 0x31fc
 80048f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80048fc:	2201      	movs	r2, #1
 80048fe:	601a      	str	r2, [r3, #0]
		}

		xRunIndicator = bktRUN_INDICATOR;
 8004900:	f243 2300 	movw	r3, #12800	; 0x3200
 8004904:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004908:	2255      	movs	r2, #85	; 0x55
 800490a:	601a      	str	r2, [r3, #0]

		xSecondaryCycles++;
 800490c:	f243 13f8 	movw	r3, #12792	; 0x31f8
 8004910:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	f243 13f8 	movw	r3, #12792	; 0x31f8
 800491c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004920:	601a      	str	r2, [r3, #0]
	}
 8004922:	e771      	b.n	8004808 <vSecondaryBlockTimeTestTask+0x8>

08004924 <xAreBlockTimeTestTasksStillRunning>:
}
/*-----------------------------------------------------------*/

BaseType_t xAreBlockTimeTestTasksStillRunning( void )
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
static BaseType_t xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
BaseType_t xReturn = pdPASS;
 800492a:	2301      	movs	r3, #1
 800492c:	607b      	str	r3, [r7, #4]

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
 800492e:	f243 13f4 	movw	r3, #12788	; 0x31f4
 8004932:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	f243 2304 	movw	r3, #12804	; 0x3204
 800493c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d101      	bne.n	800494a <xAreBlockTimeTestTasksStillRunning+0x26>
	{
		xReturn = pdFAIL;
 8004946:	2300      	movs	r3, #0
 8004948:	607b      	str	r3, [r7, #4]
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
 800494a:	f243 13f8 	movw	r3, #12792	; 0x31f8
 800494e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	f243 2308 	movw	r3, #12808	; 0x3208
 8004958:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d101      	bne.n	8004966 <xAreBlockTimeTestTasksStillRunning+0x42>
	{
		xReturn = pdFAIL;
 8004962:	2300      	movs	r3, #0
 8004964:	607b      	str	r3, [r7, #4]
	}

	if( xErrorOccurred == pdTRUE )
 8004966:	f243 13fc 	movw	r3, #12796	; 0x31fc
 800496a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <xAreBlockTimeTestTasksStillRunning+0x54>
	{
		xReturn = pdFAIL;
 8004974:	2300      	movs	r3, #0
 8004976:	607b      	str	r3, [r7, #4]
	}

	xLastSecondaryCycleCount = xSecondaryCycles;
 8004978:	f243 13f8 	movw	r3, #12792	; 0x31f8
 800497c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	f243 2308 	movw	r3, #12808	; 0x3208
 8004986:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800498a:	601a      	str	r2, [r3, #0]
	xLastPrimaryCycleCount = xPrimaryCycles;
 800498c:	f243 13f4 	movw	r3, #12788	; 0x31f4
 8004990:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	f243 2304 	movw	r3, #12804	; 0x3204
 800499a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800499e:	601a      	str	r2, [r3, #0]

	return xReturn;
 80049a0:	687b      	ldr	r3, [r7, #4]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop

080049b0 <vStartCountingSemaphoreTasks>:
static volatile xCountSemStruct xParameters[ countNUM_TEST_TASKS ];

/*-----------------------------------------------------------*/

void vStartCountingSemaphoreTasks( void )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af04      	add	r7, sp, #16
	/* Create the semaphores that we are going to use for the test/demo.  The
	first should be created such that it starts at its maximum count value,
	the second should be created such that it starts with a count value of zero. */
	xParameters[ 0 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, countMAX_COUNT_VALUE );
 80049b6:	20c8      	movs	r0, #200	; 0xc8
 80049b8:	21c8      	movs	r1, #200	; 0xc8
 80049ba:	f7fe f943 	bl	8002c44 <xQueueCreateCountingSemaphore>
 80049be:	4602      	mov	r2, r0
 80049c0:	f243 2310 	movw	r3, #12816	; 0x3210
 80049c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80049c8:	601a      	str	r2, [r3, #0]
	xParameters[ 0 ].uxExpectedStartCount = countSTART_AT_MAX_COUNT;
 80049ca:	f243 2310 	movw	r3, #12816	; 0x3210
 80049ce:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80049d2:	22aa      	movs	r2, #170	; 0xaa
 80049d4:	605a      	str	r2, [r3, #4]
	xParameters[ 0 ].uxLoopCounter = 0;
 80049d6:	f243 2310 	movw	r3, #12816	; 0x3210
 80049da:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80049de:	2200      	movs	r2, #0
 80049e0:	609a      	str	r2, [r3, #8]

	xParameters[ 1 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, 0 );
 80049e2:	20c8      	movs	r0, #200	; 0xc8
 80049e4:	2100      	movs	r1, #0
 80049e6:	f7fe f92d 	bl	8002c44 <xQueueCreateCountingSemaphore>
 80049ea:	4602      	mov	r2, r0
 80049ec:	f243 2310 	movw	r3, #12816	; 0x3210
 80049f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80049f4:	60da      	str	r2, [r3, #12]
	xParameters[ 1 ].uxExpectedStartCount = 0;
 80049f6:	f243 2310 	movw	r3, #12816	; 0x3210
 80049fa:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80049fe:	2200      	movs	r2, #0
 8004a00:	611a      	str	r2, [r3, #16]
	xParameters[ 1 ].uxLoopCounter = 0;
 8004a02:	f243 2310 	movw	r3, #12816	; 0x3210
 8004a06:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	615a      	str	r2, [r3, #20]
	in use.  The registry is provided as a means for kernel aware 
	debuggers to locate semaphores and has no purpose if a kernel aware debugger
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
	defined to be less than 1. */
	vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 0 ].xSemaphore, "Counting_Sem_1" );
 8004a0e:	f243 2310 	movw	r3, #12816	; 0x3210
 8004a12:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f247 4148 	movw	r1, #29768	; 0x7448
 8004a1e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004a22:	f7fe fc75 	bl	8003310 <vQueueAddToRegistry>
	vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 1 ].xSemaphore, "Counting_Sem_2" );
 8004a26:	f243 2310 	movw	r3, #12816	; 0x3210
 8004a2a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f247 4158 	movw	r1, #29784	; 0x7458
 8004a36:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004a3a:	f7fe fc69 	bl	8003310 <vQueueAddToRegistry>


	/* Were the semaphores created? */
	if( ( xParameters[ 0 ].xSemaphore != NULL ) || ( xParameters[ 1 ].xSemaphore != NULL ) )
 8004a3e:	f243 2310 	movw	r3, #12816	; 0x3210
 8004a42:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d106      	bne.n	8004a5a <vStartCountingSemaphoreTasks+0xaa>
 8004a4c:	f243 2310 	movw	r3, #12816	; 0x3210
 8004a50:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d02a      	beq.n	8004ab0 <vStartCountingSemaphoreTasks+0x100>
	{
		/* Create the demo tasks, passing in the semaphore to use as the parameter. */
		xTaskCreate( prvCountingSemaphoreTask, "CNT1", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 0 ] ), tskIDLE_PRIORITY, NULL );
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	9301      	str	r3, [sp, #4]
 8004a62:	2300      	movs	r3, #0
 8004a64:	9302      	str	r3, [sp, #8]
 8004a66:	2300      	movs	r3, #0
 8004a68:	9303      	str	r3, [sp, #12]
 8004a6a:	f644 30c9 	movw	r0, #19401	; 0x4bc9
 8004a6e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004a72:	f247 4168 	movw	r1, #29800	; 0x7468
 8004a76:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004a7a:	2282      	movs	r2, #130	; 0x82
 8004a7c:	f243 2310 	movw	r3, #12816	; 0x3210
 8004a80:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004a84:	f7fc fc76 	bl	8001374 <xTaskGenericCreate>
		xTaskCreate( prvCountingSemaphoreTask, "CNT2", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 1 ] ), tskIDLE_PRIORITY, NULL );		
 8004a88:	2300      	movs	r3, #0
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	9301      	str	r3, [sp, #4]
 8004a90:	2300      	movs	r3, #0
 8004a92:	9302      	str	r3, [sp, #8]
 8004a94:	2300      	movs	r3, #0
 8004a96:	9303      	str	r3, [sp, #12]
 8004a98:	f644 30c9 	movw	r0, #19401	; 0x4bc9
 8004a9c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004aa0:	f247 4170 	movw	r1, #29808	; 0x7470
 8004aa4:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004aa8:	2282      	movs	r2, #130	; 0x82
 8004aaa:	4b02      	ldr	r3, [pc, #8]	; (8004ab4 <vStartCountingSemaphoreTasks+0x104>)
 8004aac:	f7fc fc62 	bl	8001374 <xTaskGenericCreate>
	}
}
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	2001321c 	.word	0x2001321c

08004ab8 <prvDecrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvDecrementSemaphoreCount( SemaphoreHandle_t xSemaphore, UBaseType_t *puxLoopCounter )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
UBaseType_t ux;

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f7fe f8e5 	bl	8002c98 <xQueueGenericSend>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d105      	bne.n	8004ae0 <prvDecrementSemaphoreCount+0x28>
	{
		xErrorDetected = pdTRUE;
 8004ad4:	f243 230c 	movw	r3, #12812	; 0x320c
 8004ad8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004adc:	2201      	movs	r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
	}

	/* We should be able to 'take' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	e016      	b.n	8004b14 <prvDecrementSemaphoreCount+0x5c>
	{
		if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) != pdPASS )
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	2100      	movs	r1, #0
 8004aea:	2200      	movs	r2, #0
 8004aec:	2300      	movs	r3, #0
 8004aee:	f7fe fa0d 	bl	8002f0c <xQueueGenericReceive>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d005      	beq.n	8004b04 <prvDecrementSemaphoreCount+0x4c>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
 8004af8:	f243 230c 	movw	r3, #12812	; 0x320c
 8004afc:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004b00:	2201      	movs	r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
		}

		( *puxLoopCounter )++;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	601a      	str	r2, [r3, #0]
	{
		xErrorDetected = pdTRUE;
	}

	/* We should be able to 'take' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3301      	adds	r3, #1
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2bc7      	cmp	r3, #199	; 0xc7
 8004b18:	d9e5      	bls.n	8004ae6 <prvDecrementSemaphoreCount+0x2e>
		taskYIELD();
	#endif

	/* If the semaphore count is zero then we should not be able to	'take' 
	the semaphore. */
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2300      	movs	r3, #0
 8004b22:	f7fe f9f3 	bl	8002f0c <xQueueGenericReceive>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d105      	bne.n	8004b38 <prvDecrementSemaphoreCount+0x80>
	{
		xErrorDetected = pdTRUE;
 8004b2c:	f243 230c 	movw	r3, #12812	; 0x320c
 8004b30:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004b34:	2201      	movs	r2, #1
 8004b36:	601a      	str	r2, [r3, #0]
	}
}
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop

08004b40 <prvIncrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvIncrementSemaphoreCount( SemaphoreHandle_t xSemaphore, UBaseType_t *puxLoopCounter )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
UBaseType_t ux;

	/* If the semaphore count is zero then we should not be able to	'take' 
	the semaphore. */
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	2200      	movs	r2, #0
 8004b50:	2300      	movs	r3, #0
 8004b52:	f7fe f9db 	bl	8002f0c <xQueueGenericReceive>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d105      	bne.n	8004b68 <prvIncrementSemaphoreCount+0x28>
	{
		xErrorDetected = pdTRUE;
 8004b5c:	f243 230c 	movw	r3, #12812	; 0x320c
 8004b60:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004b64:	2201      	movs	r2, #1
 8004b66:	601a      	str	r2, [r3, #0]
	}

	/* We should be able to 'give' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	e016      	b.n	8004b9c <prvIncrementSemaphoreCount+0x5c>
	{
		if( xSemaphoreGive( xSemaphore ) != pdPASS )
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	2100      	movs	r1, #0
 8004b72:	2200      	movs	r2, #0
 8004b74:	2300      	movs	r3, #0
 8004b76:	f7fe f88f 	bl	8002c98 <xQueueGenericSend>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d005      	beq.n	8004b8c <prvIncrementSemaphoreCount+0x4c>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
 8004b80:	f243 230c 	movw	r3, #12812	; 0x320c
 8004b84:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004b88:	2201      	movs	r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]
		}

		( *puxLoopCounter )++;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	601a      	str	r2, [r3, #0]
	{
		xErrorDetected = pdTRUE;
	}

	/* We should be able to 'give' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2bc7      	cmp	r3, #199	; 0xc7
 8004ba0:	d9e5      	bls.n	8004b6e <prvIncrementSemaphoreCount+0x2e>
		taskYIELD();
	#endif

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f7fe f875 	bl	8002c98 <xQueueGenericSend>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d105      	bne.n	8004bc0 <prvIncrementSemaphoreCount+0x80>
	{
		xErrorDetected = pdTRUE;
 8004bb4:	f243 230c 	movw	r3, #12812	; 0x320c
 8004bb8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
	}
}
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop

08004bc8 <prvCountingSemaphoreTask>:
/*-----------------------------------------------------------*/

static void prvCountingSemaphoreTask( void *pvParameters )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	/* The semaphore to be used was passed as the parameter. */
	pxParameter = ( xCountSemStruct * ) pvParameters;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60fb      	str	r3, [r7, #12]

	/* Did we expect to find the semaphore already at its max count value, or
	at zero? */
	if( pxParameter->uxExpectedStartCount == countSTART_AT_MAX_COUNT )
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2baa      	cmp	r3, #170	; 0xaa
 8004bda:	d107      	bne.n	8004bec <prvCountingSemaphoreTask+0x24>
	{
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	3308      	adds	r3, #8
 8004be4:	4610      	mov	r0, r2
 8004be6:	4619      	mov	r1, r3
 8004be8:	f7ff ff66 	bl	8004ab8 <prvDecrementSemaphoreCount>
	}

	/* Now we expect the semaphore count to be 0, so this time there is an
	error if we can take the semaphore. */
	if( xSemaphoreTake( pxParameter->xSemaphore, 0 ) == pdPASS )
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f7fe f988 	bl	8002f0c <xQueueGenericReceive>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d105      	bne.n	8004c0e <prvCountingSemaphoreTask+0x46>
	{
		xErrorDetected = pdTRUE;
 8004c02:	f243 230c 	movw	r3, #12812	; 0x320c
 8004c06:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
	}

	for( ;; )
	{
		prvIncrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	3308      	adds	r3, #8
 8004c16:	4610      	mov	r0, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f7ff ff91 	bl	8004b40 <prvIncrementSemaphoreCount>
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3308      	adds	r3, #8
 8004c26:	4610      	mov	r0, r2
 8004c28:	4619      	mov	r1, r3
 8004c2a:	f7ff ff45 	bl	8004ab8 <prvDecrementSemaphoreCount>
	}
 8004c2e:	e7ee      	b.n	8004c0e <prvCountingSemaphoreTask+0x46>

08004c30 <vCreateSuicidalTasks>:
TaskHandle_t xCreatedTask;

/*-----------------------------------------------------------*/

void vCreateSuicidalTasks( UBaseType_t uxPriority )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af04      	add	r7, sp, #16
 8004c36:	6078      	str	r0, [r7, #4]
UBaseType_t *puxPriority;

	/* Create the Creator tasks - passing in as a parameter the priority at which
	the suicidal tasks should be created. */
	puxPriority = ( UBaseType_t * ) pvPortMalloc( sizeof( UBaseType_t ) );
 8004c38:	2004      	movs	r0, #4
 8004c3a:	f7ff f97b 	bl	8003f34 <pvPortMalloc>
 8004c3e:	60f8      	str	r0, [r7, #12]
	*puxPriority = uxPriority;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	601a      	str	r2, [r3, #0]

	xTaskCreate( vCreateTasks, "CREATOR", deathSTACK_SIZE, ( void * ) puxPriority, uxPriority, NULL );
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	9302      	str	r3, [sp, #8]
 8004c52:	2300      	movs	r3, #0
 8004c54:	9303      	str	r3, [sp, #12]
 8004c56:	f644 5005 	movw	r0, #19717	; 0x4d05
 8004c5a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004c5e:	f247 4178 	movw	r1, #29816	; 0x7478
 8004c62:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004c66:	22be      	movs	r2, #190	; 0xbe
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f7fc fb83 	bl	8001374 <xTaskGenericCreate>

	/* Record the number of tasks that are running now so we know if any of the
	suicidal tasks have failed to be killed. */
	uxTasksRunningAtStart = ( UBaseType_t ) uxTaskGetNumberOfTasks();
 8004c6e:	f7fd f89d 	bl	8001dac <uxTaskGetNumberOfTasks>
 8004c72:	4602      	mov	r2, r0
 8004c74:	f243 232c 	movw	r3, #12844	; 0x322c
 8004c78:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004c7c:	601a      	str	r2, [r3, #0]
	/* FreeRTOS.org versions before V3.0 started the idle-task as the very
	first task. The idle task was then already included in uxTasksRunningAtStart.
	From FreeRTOS V3.0 on, the idle task is started when the scheduler is
	started. Therefore the idle task is not yet accounted for. We correct
	this by increasing uxTasksRunningAtStart by 1. */
	uxTasksRunningAtStart++;
 8004c7e:	f243 232c 	movw	r3, #12844	; 0x322c
 8004c82:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	f243 232c 	movw	r3, #12844	; 0x322c
 8004c8e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004c92:	601a      	str	r2, [r3, #0]
	
	/* From FreeRTOS version 7.0.0 can optionally create a timer service task.  
	If this is done, then uxTasksRunningAtStart needs incrementing again as that
	too is created when the scheduler is started. */
	#if configUSE_TIMERS == 1
		uxTasksRunningAtStart++;
 8004c94:	f243 232c 	movw	r3, #12844	; 0x322c
 8004c98:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	f243 232c 	movw	r3, #12844	; 0x322c
 8004ca4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004ca8:	601a      	str	r2, [r3, #0]
	#endif
}
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <vSuicidalTask>:
/*-----------------------------------------------------------*/
					
static portTASK_FUNCTION( vSuicidalTask, pvParameters )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
volatile long l1, l2;
TaskHandle_t xTaskToKill;
const TickType_t xDelay = ( TickType_t ) 200 / portTICK_PERIOD_MS;
 8004cb8:	23c8      	movs	r3, #200	; 0xc8
 8004cba:	613b      	str	r3, [r7, #16]

	if( pvParameters != NULL )
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <vSuicidalTask+0x1a>
	{
		/* This task is periodically created four times.  Two created tasks are
		passed a handle to the other task so it can kill it before killing itself.
		The other task is passed in null. */
		xTaskToKill = *( TaskHandle_t* )pvParameters;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	e001      	b.n	8004cce <vSuicidalTask+0x1e>
	}
	else
	{
		xTaskToKill = NULL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
	}

	for( ;; )
	{
		/* Do something random just to use some stack and registers. */
		l1 = 2;
 8004cce:	2302      	movs	r3, #2
 8004cd0:	60fb      	str	r3, [r7, #12]
		l2 = 89;
 8004cd2:	2359      	movs	r3, #89	; 0x59
 8004cd4:	60bb      	str	r3, [r7, #8]
		l2 *= l1;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	fb02 f303 	mul.w	r3, r2, r3
 8004cde:	60bb      	str	r3, [r7, #8]
		vTaskDelay( xDelay );
 8004ce0:	6938      	ldr	r0, [r7, #16]
 8004ce2:	f7fc fd23 	bl	800172c <vTaskDelay>

		if( xTaskToKill != NULL )
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d009      	beq.n	8004d00 <vSuicidalTask+0x50>
		{
			/* Make sure the other task has a go before we delete it. */
			vTaskDelay( ( TickType_t ) 0 );
 8004cec:	2000      	movs	r0, #0
 8004cee:	f7fc fd1d 	bl	800172c <vTaskDelay>

			/* Kill the other task that was created by vCreateTasks(). */
			vTaskDelete( xTaskToKill );
 8004cf2:	6978      	ldr	r0, [r7, #20]
 8004cf4:	f7fc fc16 	bl	8001524 <vTaskDelete>

			/* Kill ourselves. */
			vTaskDelete( NULL );
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	f7fc fc13 	bl	8001524 <vTaskDelete>
		}
	}
 8004cfe:	e7e6      	b.n	8004cce <vSuicidalTask+0x1e>
 8004d00:	e7e5      	b.n	8004cce <vSuicidalTask+0x1e>
 8004d02:	bf00      	nop

08004d04 <vCreateTasks>:
}/*lint !e818 !e550 Function prototype must be as per standard for task functions. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCreateTasks, pvParameters )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af04      	add	r7, sp, #16
 8004d0a:	6078      	str	r0, [r7, #4]
const TickType_t xDelay = ( TickType_t ) 1000 / portTICK_PERIOD_MS;
 8004d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d10:	60fb      	str	r3, [r7, #12]
UBaseType_t uxPriority;

	uxPriority = *( UBaseType_t * ) pvParameters;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60bb      	str	r3, [r7, #8]
	vPortFree( pvParameters );
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff f96f 	bl	8003ffc <vPortFree>

	for( ;; )
	{
		/* Just loop round, delaying then creating the four suicidal tasks. */
		vTaskDelay( xDelay );
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f7fc fd04 	bl	800172c <vTaskDelay>

		xCreatedTask = NULL;
 8004d24:	f243 3320 	movw	r3, #13088	; 0x3320
 8004d28:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	601a      	str	r2, [r3, #0]

		xTaskCreate( vSuicidalTask, "SUICID1", configMINIMAL_STACK_SIZE, NULL, uxPriority, &xCreatedTask );
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	f243 3320 	movw	r3, #13088	; 0x3320
 8004d38:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004d3c:	9301      	str	r3, [sp, #4]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	9302      	str	r3, [sp, #8]
 8004d42:	2300      	movs	r3, #0
 8004d44:	9303      	str	r3, [sp, #12]
 8004d46:	f644 40b1 	movw	r0, #19633	; 0x4cb1
 8004d4a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004d4e:	f247 4180 	movw	r1, #29824	; 0x7480
 8004d52:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004d56:	2282      	movs	r2, #130	; 0x82
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f7fc fb0b 	bl	8001374 <xTaskGenericCreate>
		xTaskCreate( vSuicidalTask, "SUICID2", configMINIMAL_STACK_SIZE, &xCreatedTask, uxPriority, NULL );
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	2300      	movs	r3, #0
 8004d64:	9301      	str	r3, [sp, #4]
 8004d66:	2300      	movs	r3, #0
 8004d68:	9302      	str	r3, [sp, #8]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	9303      	str	r3, [sp, #12]
 8004d6e:	f644 40b1 	movw	r0, #19633	; 0x4cb1
 8004d72:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004d76:	f247 4188 	movw	r1, #29832	; 0x7488
 8004d7a:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004d7e:	2282      	movs	r2, #130	; 0x82
 8004d80:	f243 3320 	movw	r3, #13088	; 0x3320
 8004d84:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004d88:	f7fc faf4 	bl	8001374 <xTaskGenericCreate>

		++usCreationCount;
 8004d8c:	f243 2328 	movw	r3, #12840	; 0x3228
 8004d90:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3301      	adds	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	f243 2328 	movw	r3, #12840	; 0x3228
 8004da0:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004da4:	801a      	strh	r2, [r3, #0]
	}
 8004da6:	e7ba      	b.n	8004d1e <vCreateTasks+0x1a>

08004da8 <xIsCreateTaskStillRunning>:
/*-----------------------------------------------------------*/

/* This is called to check that the creator task is still running and that there
are not any more than four extra tasks. */
BaseType_t xIsCreateTaskStillRunning( void )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
static uint16_t usLastCreationCount = 0xfff;
BaseType_t xReturn = pdTRUE;
 8004dae:	2301      	movs	r3, #1
 8004db0:	607b      	str	r3, [r7, #4]
static UBaseType_t uxTasksRunningNow;

	if( usLastCreationCount == usCreationCount )
 8004db2:	f240 030c 	movw	r3, #12
 8004db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004dba:	881a      	ldrh	r2, [r3, #0]
 8004dbc:	f243 2328 	movw	r3, #12840	; 0x3228
 8004dc0:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d102      	bne.n	8004dd2 <xIsCreateTaskStillRunning+0x2a>
	{
		xReturn = pdFALSE;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	607b      	str	r3, [r7, #4]
 8004dd0:	e00a      	b.n	8004de8 <xIsCreateTaskStillRunning+0x40>
	}
	else
	{
		usLastCreationCount = usCreationCount;
 8004dd2:	f243 2328 	movw	r3, #12840	; 0x3228
 8004dd6:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	f240 030c 	movw	r3, #12
 8004de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004de6:	801a      	strh	r2, [r3, #0]
	}
	
	uxTasksRunningNow = ( UBaseType_t ) uxTaskGetNumberOfTasks();
 8004de8:	f7fc ffe0 	bl	8001dac <uxTaskGetNumberOfTasks>
 8004dec:	4602      	mov	r2, r0
 8004dee:	f243 2330 	movw	r3, #12848	; 0x3230
 8004df2:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004df6:	601a      	str	r2, [r3, #0]

	if( uxTasksRunningNow < uxTasksRunningAtStart )
 8004df8:	f243 2330 	movw	r3, #12848	; 0x3230
 8004dfc:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	f243 232c 	movw	r3, #12844	; 0x322c
 8004e06:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d202      	bcs.n	8004e16 <xIsCreateTaskStillRunning+0x6e>
	{
		xReturn = pdFALSE;
 8004e10:	2300      	movs	r3, #0
 8004e12:	607b      	str	r3, [r7, #4]
 8004e14:	e00f      	b.n	8004e36 <xIsCreateTaskStillRunning+0x8e>
	}
	else if( ( uxTasksRunningNow - uxTasksRunningAtStart ) > uxMaxNumberOfExtraTasksRunning )
 8004e16:	f243 2330 	movw	r3, #12848	; 0x3230
 8004e1a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	f243 232c 	movw	r3, #12844	; 0x322c
 8004e24:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	1ad2      	subs	r2, r2, r3
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d901      	bls.n	8004e36 <xIsCreateTaskStillRunning+0x8e>
	{
		xReturn = pdFALSE;
 8004e32:	2300      	movs	r3, #0
 8004e34:	607b      	str	r3, [r7, #4]
	else
	{
		/* Everything is okay. */
	}

	return xReturn;
 8004e36:	687b      	ldr	r3, [r7, #4]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <vStartDynamicPriorityTasks>:
/*
 * Start the three tasks as described at the top of the file.
 * Note that the limited count task is given a higher priority.
 */
void vStartDynamicPriorityTasks( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af04      	add	r7, sp, #16
	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( uint32_t ) );
 8004e46:	2001      	movs	r0, #1
 8004e48:	2104      	movs	r1, #4
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f7fd fe14 	bl	8002a78 <xQueueGenericCreate>
 8004e50:	4602      	mov	r2, r0
 8004e52:	f243 3324 	movw	r3, #13092	; 0x3324
 8004e56:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004e5a:	601a      	str	r2, [r3, #0]
	in use.  The queue registry is provided as a means for kernel aware
	debuggers to locate queues and has no purpose if a kernel aware debugger
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
	defined to be less than 1. */
	vQueueAddToRegistry( xSuspendedTestQueue, "Suspended_Test_Queue" );
 8004e5c:	f243 3324 	movw	r3, #13092	; 0x3324
 8004e60:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f247 4190 	movw	r1, #29840	; 0x7490
 8004e6c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004e70:	f7fe fa4e 	bl	8003310 <vQueueAddToRegistry>

	xTaskCreate( vContinuousIncrementTask, "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY, &xContinuousIncrementHandle );
 8004e74:	2300      	movs	r3, #0
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	f243 2334 	movw	r3, #12852	; 0x3234
 8004e7c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004e80:	9301      	str	r3, [sp, #4]
 8004e82:	2300      	movs	r3, #0
 8004e84:	9302      	str	r3, [sp, #8]
 8004e86:	2300      	movs	r3, #0
 8004e88:	9303      	str	r3, [sp, #12]
 8004e8a:	f644 7089 	movw	r0, #20361	; 0x4f89
 8004e8e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004e92:	f247 41a8 	movw	r1, #29864	; 0x74a8
 8004e96:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004e9a:	2282      	movs	r2, #130	; 0x82
 8004e9c:	f243 233c 	movw	r3, #12860	; 0x323c
 8004ea0:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004ea4:	f7fc fa66 	bl	8001374 <xTaskGenericCreate>
	xTaskCreate( vLimitedIncrementTask, "LIM_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY + 1, &xLimitedIncrementHandle );
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	f243 2338 	movw	r3, #12856	; 0x3238
 8004eb0:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004eb4:	9301      	str	r3, [sp, #4]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	9302      	str	r3, [sp, #8]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	9303      	str	r3, [sp, #12]
 8004ebe:	f644 7059 	movw	r0, #20313	; 0x4f59
 8004ec2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004ec6:	f247 41b0 	movw	r1, #29872	; 0x74b0
 8004eca:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004ece:	2282      	movs	r2, #130	; 0x82
 8004ed0:	f243 233c 	movw	r3, #12860	; 0x323c
 8004ed4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004ed8:	f7fc fa4c 	bl	8001374 <xTaskGenericCreate>
	xTaskCreate( vCounterControlTask, "C_CTRL", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 8004edc:	2300      	movs	r3, #0
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	9301      	str	r3, [sp, #4]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	9302      	str	r3, [sp, #8]
 8004ee8:	2300      	movs	r3, #0
 8004eea:	9303      	str	r3, [sp, #12]
 8004eec:	f644 70e9 	movw	r0, #20457	; 0x4fe9
 8004ef0:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004ef4:	f247 41b8 	movw	r1, #29880	; 0x74b8
 8004ef8:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004efc:	2282      	movs	r2, #130	; 0x82
 8004efe:	2300      	movs	r3, #0
 8004f00:	f7fc fa38 	bl	8001374 <xTaskGenericCreate>
	xTaskCreate( vQueueSendWhenSuspendedTask, "SUSP_TX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 8004f04:	2300      	movs	r3, #0
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	9301      	str	r3, [sp, #4]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	9302      	str	r3, [sp, #8]
 8004f10:	2300      	movs	r3, #0
 8004f12:	9303      	str	r3, [sp, #12]
 8004f14:	f245 00dd 	movw	r0, #20701	; 0x50dd
 8004f18:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004f1c:	f247 41c0 	movw	r1, #29888	; 0x74c0
 8004f20:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004f24:	2282      	movs	r2, #130	; 0x82
 8004f26:	2300      	movs	r3, #0
 8004f28:	f7fc fa24 	bl	8001374 <xTaskGenericCreate>
	xTaskCreate( vQueueReceiveWhenSuspendedTask, "SUSP_RX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	2300      	movs	r3, #0
 8004f32:	9301      	str	r3, [sp, #4]
 8004f34:	2300      	movs	r3, #0
 8004f36:	9302      	str	r3, [sp, #8]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	9303      	str	r3, [sp, #12]
 8004f3c:	f245 1039 	movw	r0, #20793	; 0x5139
 8004f40:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004f44:	f247 41c8 	movw	r1, #29896	; 0x74c8
 8004f48:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004f4c:	2282      	movs	r2, #130	; 0x82
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f7fc fa10 	bl	8001374 <xTaskGenericCreate>
}
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <vLimitedIncrementTask>:
/*
 * Just loops around incrementing the shared variable until the limit has been
 * reached.  Once the limit has been reached it suspends itself.
 */
static portTASK_FUNCTION( vLimitedIncrementTask, pvParameters )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
uint32_t *pulCounter;

	/* Take a pointer to the shared variable from the parameters passed into
	the task. */
	pulCounter = ( uint32_t * ) pvParameters;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	60fb      	str	r3, [r7, #12]

	/* This will run before the control task, so the first thing it does is
	suspend - the control task will resume it when ready. */
	vTaskSuspend( NULL );
 8004f64:	2000      	movs	r0, #0
 8004f66:	f7fc fcff 	bl	8001968 <vTaskSuspend>

	for( ;; )
	{
		/* Just count up to a value then suspend. */
		( *pulCounter )++;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	601a      	str	r2, [r3, #0]

		if( *pulCounter >= priMAX_COUNT )
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2bfe      	cmp	r3, #254	; 0xfe
 8004f7a:	d903      	bls.n	8004f84 <vLimitedIncrementTask+0x2c>
		{
			vTaskSuspend( NULL );
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	f7fc fcf3 	bl	8001968 <vTaskSuspend>
		}
	}
 8004f82:	e7f2      	b.n	8004f6a <vLimitedIncrementTask+0x12>
 8004f84:	e7f1      	b.n	8004f6a <vLimitedIncrementTask+0x12>
 8004f86:	bf00      	nop

08004f88 <vContinuousIncrementTask>:
/*
 * Just keep counting the shared variable up.  The control task will suspend
 * this task when it wants.
 */
static portTASK_FUNCTION( vContinuousIncrementTask, pvParameters )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
volatile uint32_t *pulCounter;
UBaseType_t uxOurPriority;

	/* Take a pointer to the shared variable from the parameters passed into
	the task. */
	pulCounter = ( uint32_t * ) pvParameters;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	60fb      	str	r3, [r7, #12]

	/* Query our priority so we can raise it when exclusive access to the
	shared variable is required. */
	uxOurPriority = uxTaskPriorityGet( NULL );
 8004f94:	2000      	movs	r0, #0
 8004f96:	f7fc fc15 	bl	80017c4 <uxTaskPriorityGet>
 8004f9a:	60b8      	str	r0, [r7, #8]

	for( ;; )
	{
		/* Raise the priority above the controller task to ensure a context
		switch does not occur while the variable is being accessed. */
		vTaskPrioritySet( NULL, uxOurPriority + 1 );
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	f7fc fc2a 	bl	80017fc <vTaskPrioritySet>
		{
			configASSERT( ( uxTaskPriorityGet( NULL ) == ( uxOurPriority + 1 ) ) );
 8004fa8:	2000      	movs	r0, #0
 8004faa:	f7fc fc0b 	bl	80017c4 <uxTaskPriorityGet>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d002      	beq.n	8004fbe <vContinuousIncrementTask+0x36>
 8004fb8:	f7fe fc02 	bl	80037c0 <ulPortSetInterruptMask>
 8004fbc:	e7fe      	b.n	8004fbc <vContinuousIncrementTask+0x34>
			( *pulCounter )++;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	601a      	str	r2, [r3, #0]
		}
		vTaskPrioritySet( NULL, uxOurPriority );
 8004fc8:	2000      	movs	r0, #0
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	f7fc fc16 	bl	80017fc <vTaskPrioritySet>

		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif

		configASSERT( ( uxTaskPriorityGet( NULL ) == uxOurPriority ) );
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	f7fc fbf7 	bl	80017c4 <uxTaskPriorityGet>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d002      	beq.n	8004fe4 <vContinuousIncrementTask+0x5c>
 8004fde:	f7fe fbef 	bl	80037c0 <ulPortSetInterruptMask>
 8004fe2:	e7fe      	b.n	8004fe2 <vContinuousIncrementTask+0x5a>
	}
 8004fe4:	e7da      	b.n	8004f9c <vContinuousIncrementTask+0x14>
 8004fe6:	bf00      	nop

08004fe8 <vCounterControlTask>:

/*
 * Controller task as described above.
 */
static portTASK_FUNCTION( vCounterControlTask, pvParameters )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
uint32_t ulLastCounter;
short sLoops;
short sError = pdFALSE;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	81bb      	strh	r3, [r7, #12]
	( void ) pvParameters;

	for( ;; )
	{
		/* Start with the counter at zero. */
		ulCounter = ( uint32_t ) 0;
 8004ff4:	f243 233c 	movw	r3, #12860	; 0x323c
 8004ff8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]

		/* First section : */

		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 8005000:	2300      	movs	r3, #0
 8005002:	81fb      	strh	r3, [r7, #14]
 8005004:	e029      	b.n	800505a <vCounterControlTask+0x72>
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption.  This is not really
			needed as the other task raises its priority above this task's
			priority. */
			vTaskSuspend( xContinuousIncrementHandle );
 8005006:	f243 2334 	movw	r3, #12852	; 0x3234
 800500a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f7fc fca9 	bl	8001968 <vTaskSuspend>
				{
					configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eSuspended );
				}
				#endif /* INCLUDE_eTaskGetState */

				ulLastCounter = ulCounter;
 8005016:	f243 233c 	movw	r3, #12860	; 0x323c
 800501a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	60bb      	str	r3, [r7, #8]
			}
			vTaskResume( xContinuousIncrementHandle );
 8005022:	f243 2334 	movw	r3, #12852	; 0x3234
 8005026:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f7fc fd5d 	bl	8001aec <vTaskResume>
				configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eReady );
			}
			#endif /* INCLUDE_eTaskGetState */

			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
 8005032:	2080      	movs	r0, #128	; 0x80
 8005034:	f7fc fb7a 	bl	800172c <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
 8005038:	f7fc fdea 	bl	8001c10 <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
 800503c:	f243 233c 	movw	r3, #12860	; 0x323c
 8005040:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	429a      	cmp	r2, r3
 800504a:	d101      	bne.n	8005050 <vCounterControlTask+0x68>
				{
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
 800504c:	2301      	movs	r3, #1
 800504e:	81bb      	strh	r3, [r7, #12]
				}
			}
			xTaskResumeAll();
 8005050:	f7fc fdf0 	bl	8001c34 <xTaskResumeAll>
		ulCounter = ( uint32_t ) 0;

		/* First section : */

		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 8005054:	89fb      	ldrh	r3, [r7, #14]
 8005056:	3301      	adds	r3, #1
 8005058:	81fb      	strh	r3, [r7, #14]
 800505a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800505e:	2b04      	cmp	r3, #4
 8005060:	ddd1      	ble.n	8005006 <vCounterControlTask+0x1e>

		/* Second section: */

		/* Suspend the continuous counter task so it stops accessing the shared
		variable. */
		vTaskSuspend( xContinuousIncrementHandle );
 8005062:	f243 2334 	movw	r3, #12852	; 0x3234
 8005066:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f7fc fc7b 	bl	8001968 <vTaskSuspend>

		/* Reset the variable. */
		ulCounter = ( uint32_t ) 0;
 8005072:	f243 233c 	movw	r3, #12860	; 0x323c
 8005076:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
		#endif /* INCLUDE_eTaskGetState */

		/* Resume the limited count task which has a higher priority than us.
		We should therefore not return from this call until the limited count
		task has suspended itself with a known value in the counter variable. */
		vTaskResume( xLimitedIncrementHandle );
 800507e:	f243 2338 	movw	r3, #12856	; 0x3238
 8005082:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4618      	mov	r0, r3
 800508a:	f7fc fd2f 	bl	8001aec <vTaskResume>
			configASSERT( eTaskGetState( xLimitedIncrementHandle ) == eSuspended );
		}
		#endif /* INCLUDE_eTaskGetState */

		/* Does the counter variable have the expected value? */
		if( ulCounter != priMAX_COUNT )
 800508e:	f243 233c 	movw	r3, #12860	; 0x323c
 8005092:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2bff      	cmp	r3, #255	; 0xff
 800509a:	d001      	beq.n	80050a0 <vCounterControlTask+0xb8>
		{
			sError = pdTRUE;
 800509c:	2301      	movs	r3, #1
 800509e:	81bb      	strh	r3, [r7, #12]
		}

		if( sError == pdFALSE )
 80050a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d110      	bne.n	80050ca <vCounterControlTask+0xe2>
		{
			/* If no errors have occurred then increment the check variable. */
			portENTER_CRITICAL();
 80050a8:	f7fe fb40 	bl	800372c <vPortEnterCritical>
				usCheckVariable++;
 80050ac:	f243 2340 	movw	r3, #12864	; 0x3240
 80050b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3301      	adds	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	f243 2340 	movw	r3, #12864	; 0x3240
 80050c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80050c4:	801a      	strh	r2, [r3, #0]
			portEXIT_CRITICAL();
 80050c6:	f7fe fb59 	bl	800377c <vPortExitCritical>
		}

		/* Resume the continuous count task and do it all again. */
		vTaskResume( xContinuousIncrementHandle );
 80050ca:	f243 2334 	movw	r3, #12852	; 0x3234
 80050ce:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fc fd09 	bl	8001aec <vTaskResume>

		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif
	}
 80050da:	e78b      	b.n	8004ff4 <vCounterControlTask+0xc>

080050dc <vQueueSendWhenSuspendedTask>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueSendWhenSuspendedTask, pvParameters )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
	/* Just to stop warning messages. */
	( void ) pvParameters;

	for( ;; )
	{
		vTaskSuspendAll();
 80050e4:	f7fc fd94 	bl	8001c10 <vTaskSuspendAll>
		{
			/* We must not block while the scheduler is suspended! */
			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
 80050e8:	f243 3324 	movw	r3, #13092	; 0x3324
 80050ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f243 2150 	movw	r1, #12880	; 0x3250
 80050f8:	f2c2 0101 	movt	r1, #8193	; 0x2001
 80050fc:	2200      	movs	r2, #0
 80050fe:	2300      	movs	r3, #0
 8005100:	f7fd fdca 	bl	8002c98 <xQueueGenericSend>
 8005104:	4603      	mov	r3, r0
 8005106:	2b01      	cmp	r3, #1
 8005108:	d005      	beq.n	8005116 <vQueueSendWhenSuspendedTask+0x3a>
			{
				xSuspendedQueueSendError = pdTRUE;
 800510a:	f243 2344 	movw	r3, #12868	; 0x3244
 800510e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005112:	2201      	movs	r2, #1
 8005114:	601a      	str	r2, [r3, #0]
			}
		}
		xTaskResumeAll();
 8005116:	f7fc fd8d 	bl	8001c34 <xTaskResumeAll>

		vTaskDelay( priSLEEP_TIME );
 800511a:	2080      	movs	r0, #128	; 0x80
 800511c:	f7fc fb06 	bl	800172c <vTaskDelay>

		++ulValueToSend;
 8005120:	f243 2350 	movw	r3, #12880	; 0x3250
 8005124:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	f243 2350 	movw	r3, #12880	; 0x3250
 8005130:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005134:	601a      	str	r2, [r3, #0]
	}
 8005136:	e7d5      	b.n	80050e4 <vQueueSendWhenSuspendedTask+0x8>

08005138 <vQueueReceiveWhenSuspendedTask>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueReceiveWhenSuspendedTask, pvParameters )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
			/* Suspending the scheduler here is fairly pointless and
			undesirable for a normal application.  It is done here purely
			to test the scheduler.  The inner xTaskResumeAll() should
			never return pdTRUE as the scheduler is still locked by the
			outer call. */
			vTaskSuspendAll();
 8005140:	f7fc fd66 	bl	8001c10 <vTaskSuspendAll>
			{
				vTaskSuspendAll();
 8005144:	f7fc fd64 	bl	8001c10 <vTaskSuspendAll>
				{
					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
 8005148:	f243 3324 	movw	r3, #13092	; 0x3324
 800514c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	f107 0308 	add.w	r3, r7, #8
 8005156:	4610      	mov	r0, r2
 8005158:	4619      	mov	r1, r3
 800515a:	2200      	movs	r2, #0
 800515c:	2300      	movs	r3, #0
 800515e:	f7fd fed5 	bl	8002f0c <xQueueGenericReceive>
 8005162:	60f8      	str	r0, [r7, #12]
				}
				if( xTaskResumeAll() != pdFALSE )
 8005164:	f7fc fd66 	bl	8001c34 <xTaskResumeAll>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <vQueueReceiveWhenSuspendedTask+0x42>
				{
					xSuspendedQueueReceiveError = pdTRUE;
 800516e:	f243 2348 	movw	r3, #12872	; 0x3248
 8005172:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005176:	2201      	movs	r2, #1
 8005178:	601a      	str	r2, [r3, #0]
				}
			}
			xTaskResumeAll();
 800517a:	f7fc fd5b 	bl	8001c34 <xTaskResumeAll>
			{
				taskYIELD();
			}
			#endif

		} while( xGotValue == pdFALSE );
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0dd      	beq.n	8005140 <vQueueReceiveWhenSuspendedTask+0x8>

		if( ulReceivedValue != ulExpectedValue )
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	f243 234c 	movw	r3, #12876	; 0x324c
 800518a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d005      	beq.n	80051a0 <vQueueReceiveWhenSuspendedTask+0x68>
		{
			xSuspendedQueueReceiveError = pdTRUE;
 8005194:	f243 2348 	movw	r3, #12872	; 0x3248
 8005198:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800519c:	2201      	movs	r2, #1
 800519e:	601a      	str	r2, [r3, #0]
		}

		if( xSuspendedQueueReceiveError != pdTRUE )
 80051a0:	f243 2348 	movw	r3, #12872	; 0x3248
 80051a4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d00b      	beq.n	80051c6 <vQueueReceiveWhenSuspendedTask+0x8e>
		{
			/* Only increment the variable if an error has not occurred.  This
			allows xAreDynamicPriorityTasksStillRunning() to check for stalled
			tasks as well as explicit errors. */
			++ulExpectedValue;
 80051ae:	f243 234c 	movw	r3, #12876	; 0x324c
 80051b2:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	f243 234c 	movw	r3, #12876	; 0x324c
 80051be:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80051c2:	601a      	str	r2, [r3, #0]
		}
	}
 80051c4:	e7bc      	b.n	8005140 <vQueueReceiveWhenSuspendedTask+0x8>
 80051c6:	e7bb      	b.n	8005140 <vQueueReceiveWhenSuspendedTask+0x8>

080051c8 <xAreDynamicPriorityTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* Called to check that all the created tasks are still running without error. */
BaseType_t xAreDynamicPriorityTasksStillRunning( void )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
/* Keep a history of the check variables so we know if it has been incremented
since the last call. */
static uint16_t usLastTaskCheck = ( uint16_t ) 0;
static uint32_t ulLastExpectedValue = ( uint32_t ) 0U;
BaseType_t xReturn = pdTRUE;
 80051ce:	2301      	movs	r3, #1
 80051d0:	607b      	str	r3, [r7, #4]

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
 80051d2:	f243 2340 	movw	r3, #12864	; 0x3240
 80051d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	b29a      	uxth	r2, r3
 80051de:	f243 2354 	movw	r3, #12884	; 0x3254
 80051e2:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d101      	bne.n	80051f0 <xAreDynamicPriorityTasksStillRunning+0x28>
	{
		/* The check has not incremented so an error exists. */
		xReturn = pdFALSE;
 80051ec:	2300      	movs	r3, #0
 80051ee:	607b      	str	r3, [r7, #4]
	}

	if( ulExpectedValue == ulLastExpectedValue )
 80051f0:	f243 234c 	movw	r3, #12876	; 0x324c
 80051f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	f243 2358 	movw	r3, #12888	; 0x3258
 80051fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d101      	bne.n	800520c <xAreDynamicPriorityTasksStillRunning+0x44>
	{
		/* The value being received by the queue receive task has not
		incremented so an error exists. */
		xReturn = pdFALSE;
 8005208:	2300      	movs	r3, #0
 800520a:	607b      	str	r3, [r7, #4]
	}

	if( xSuspendedQueueSendError == pdTRUE )
 800520c:	f243 2344 	movw	r3, #12868	; 0x3244
 8005210:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <xAreDynamicPriorityTasksStillRunning+0x56>
	{
		xReturn = pdFALSE;
 800521a:	2300      	movs	r3, #0
 800521c:	607b      	str	r3, [r7, #4]
	}

	if( xSuspendedQueueReceiveError == pdTRUE )
 800521e:	f243 2348 	movw	r3, #12872	; 0x3248
 8005222:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <xAreDynamicPriorityTasksStillRunning+0x68>
	{
		xReturn = pdFALSE;
 800522c:	2300      	movs	r3, #0
 800522e:	607b      	str	r3, [r7, #4]
	}

	usLastTaskCheck = usCheckVariable;
 8005230:	f243 2340 	movw	r3, #12864	; 0x3240
 8005234:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	b29a      	uxth	r2, r3
 800523c:	f243 2354 	movw	r3, #12884	; 0x3254
 8005240:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005244:	801a      	strh	r2, [r3, #0]
	ulLastExpectedValue = ulExpectedValue;
 8005246:	f243 234c 	movw	r3, #12876	; 0x324c
 800524a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	f243 2358 	movw	r3, #12888	; 0x3258
 8005254:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005258:	601a      	str	r2, [r3, #0]

	return xReturn;
 800525a:	687b      	ldr	r3, [r7, #4]
}
 800525c:	4618      	mov	r0, r3
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <vStartLEDFlashTasks>:
static portTASK_FUNCTION_PROTO( vLEDFlashTask, pvParameters );

/*-----------------------------------------------------------*/

void vStartLEDFlashTasks( UBaseType_t uxPriority )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af04      	add	r7, sp, #16
 800526e:	6078      	str	r0, [r7, #4]
BaseType_t xLEDTask;

	/* Create the three tasks. */
	for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	e016      	b.n	80052a4 <vStartLEDFlashTasks+0x3c>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	2300      	movs	r3, #0
 800527c:	9301      	str	r3, [sp, #4]
 800527e:	2300      	movs	r3, #0
 8005280:	9302      	str	r3, [sp, #8]
 8005282:	2300      	movs	r3, #0
 8005284:	9303      	str	r3, [sp, #12]
 8005286:	f245 20b1 	movw	r0, #21169	; 0x52b1
 800528a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800528e:	f247 41d0 	movw	r1, #29904	; 0x74d0
 8005292:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005296:	2282      	movs	r2, #130	; 0x82
 8005298:	2300      	movs	r3, #0
 800529a:	f7fc f86b 	bl	8001374 <xTaskGenericCreate>
void vStartLEDFlashTasks( UBaseType_t uxPriority )
{
BaseType_t xLEDTask;

	/* Create the three tasks. */
	for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3301      	adds	r3, #1
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	dde5      	ble.n	8005276 <vStartLEDFlashTasks+0xe>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
	}
}
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <vLEDFlashTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vLEDFlashTask, pvParameters )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]

	/* The parameters are not used. */
	( void ) pvParameters;

	/* Calculate the LED and flash rate. */
	portENTER_CRITICAL();
 80052b8:	f7fe fa38 	bl	800372c <vPortEnterCritical>
	{
		/* See which of the eight LED's we should use. */
		uxLED = uxFlashTaskNumber;
 80052bc:	f243 235c 	movw	r3, #12892	; 0x325c
 80052c0:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	617b      	str	r3, [r7, #20]

		/* Update so the next task uses the next LED. */
		uxFlashTaskNumber++;
 80052c8:	f243 235c 	movw	r3, #12892	; 0x325c
 80052cc:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	f243 235c 	movw	r3, #12892	; 0x325c
 80052d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80052dc:	601a      	str	r2, [r3, #0]
	}
	portEXIT_CRITICAL();
 80052de:	f7fe fa4d 	bl	800377c <vPortExitCritical>

	xFlashRate = ledFLASH_RATE_BASE + ( ledFLASH_RATE_BASE * ( TickType_t ) uxLED );
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	3301      	adds	r3, #1
 80052e6:	f240 124d 	movw	r2, #333	; 0x14d
 80052ea:	fb02 f303 	mul.w	r3, r2, r3
 80052ee:	613b      	str	r3, [r7, #16]
	xFlashRate /= portTICK_PERIOD_MS;

	/* We will turn the LED on and off again in the delay period, so each
	delay is only half the total period. */
	xFlashRate /= ( TickType_t ) 2;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	085b      	lsrs	r3, r3, #1
 80052f4:	613b      	str	r3, [r7, #16]

	/* We need to initialise xLastFlashTime prior to the first call to 
	vTaskDelayUntil(). */
	xLastFlashTime = xTaskGetTickCount();
 80052f6:	f7fc fd47 	bl	8001d88 <xTaskGetTickCount>
 80052fa:	4603      	mov	r3, r0
 80052fc:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		/* Delay for half the flash period then turn the LED on. */
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 80052fe:	f107 030c 	add.w	r3, r7, #12
 8005302:	4618      	mov	r0, r3
 8005304:	6939      	ldr	r1, [r7, #16]
 8005306:	f7fc f995 	bl	8001634 <vTaskDelayUntil>
		vParTestToggleLED( uxLED );
 800530a:	6978      	ldr	r0, [r7, #20]
 800530c:	f7fb fed8 	bl	80010c0 <vParTestToggleLED>

		/* Delay for half the flash period then turn the LED off. */
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 8005310:	f107 030c 	add.w	r3, r7, #12
 8005314:	4618      	mov	r0, r3
 8005316:	6939      	ldr	r1, [r7, #16]
 8005318:	f7fc f98c 	bl	8001634 <vTaskDelayUntil>
		vParTestToggleLED( uxLED );
 800531c:	6978      	ldr	r0, [r7, #20]
 800531e:	f7fb fecf 	bl	80010c0 <vParTestToggleLED>
	}
 8005322:	e7ec      	b.n	80052fe <vLEDFlashTask+0x4e>

08005324 <vStartMathTasks>:
static volatile uint16_t usTaskCheck[ mathNUMBER_OF_TASKS ] = { ( uint16_t ) 0 };

/*-----------------------------------------------------------*/

void vStartMathTasks( UBaseType_t uxPriority )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af04      	add	r7, sp, #16
 800532a:	6078      	str	r0, [r7, #4]
	xTaskCreate( vCompetingMathTask1, "Math1", mathSTACK_SIZE, ( void * ) &( usTaskCheck[ 0 ] ), uxPriority, NULL );
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	2300      	movs	r3, #0
 8005332:	9301      	str	r3, [sp, #4]
 8005334:	2300      	movs	r3, #0
 8005336:	9302      	str	r3, [sp, #8]
 8005338:	2300      	movs	r3, #0
 800533a:	9303      	str	r3, [sp, #12]
 800533c:	f245 30e9 	movw	r0, #21481	; 0x53e9
 8005340:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005344:	f247 41d8 	movw	r1, #29912	; 0x74d8
 8005348:	f6c0 0100 	movt	r1, #2048	; 0x800
 800534c:	2282      	movs	r2, #130	; 0x82
 800534e:	f243 2360 	movw	r3, #12896	; 0x3260
 8005352:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005356:	f7fc f80d 	bl	8001374 <xTaskGenericCreate>
	xTaskCreate( vCompetingMathTask2, "Math2", mathSTACK_SIZE, ( void * ) &( usTaskCheck[ 1 ] ), uxPriority, NULL );
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	2300      	movs	r3, #0
 8005360:	9301      	str	r3, [sp, #4]
 8005362:	2300      	movs	r3, #0
 8005364:	9302      	str	r3, [sp, #8]
 8005366:	2300      	movs	r3, #0
 8005368:	9303      	str	r3, [sp, #12]
 800536a:	f245 40e1 	movw	r0, #21729	; 0x54e1
 800536e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005372:	f247 41e0 	movw	r1, #29920	; 0x74e0
 8005376:	f6c0 0100 	movt	r1, #2048	; 0x800
 800537a:	2282      	movs	r2, #130	; 0x82
 800537c:	4b16      	ldr	r3, [pc, #88]	; (80053d8 <vStartMathTasks+0xb4>)
 800537e:	f7fb fff9 	bl	8001374 <xTaskGenericCreate>
	xTaskCreate( vCompetingMathTask3, "Math3", mathSTACK_SIZE, ( void * ) &( usTaskCheck[ 2 ] ), uxPriority, NULL );
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	2300      	movs	r3, #0
 8005388:	9301      	str	r3, [sp, #4]
 800538a:	2300      	movs	r3, #0
 800538c:	9302      	str	r3, [sp, #8]
 800538e:	2300      	movs	r3, #0
 8005390:	9303      	str	r3, [sp, #12]
 8005392:	f245 50d9 	movw	r0, #21977	; 0x55d9
 8005396:	f6c0 0000 	movt	r0, #2048	; 0x800
 800539a:	f247 41e8 	movw	r1, #29928	; 0x74e8
 800539e:	f6c0 0100 	movt	r1, #2048	; 0x800
 80053a2:	2282      	movs	r2, #130	; 0x82
 80053a4:	4b0d      	ldr	r3, [pc, #52]	; (80053dc <vStartMathTasks+0xb8>)
 80053a6:	f7fb ffe5 	bl	8001374 <xTaskGenericCreate>
	xTaskCreate( vCompetingMathTask4, "Math4", mathSTACK_SIZE, ( void * ) &( usTaskCheck[ 3 ] ), uxPriority, NULL );
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	2300      	movs	r3, #0
 80053b0:	9301      	str	r3, [sp, #4]
 80053b2:	2300      	movs	r3, #0
 80053b4:	9302      	str	r3, [sp, #8]
 80053b6:	2300      	movs	r3, #0
 80053b8:	9303      	str	r3, [sp, #12]
 80053ba:	f245 7009 	movw	r0, #22281	; 0x5709
 80053be:	f6c0 0000 	movt	r0, #2048	; 0x800
 80053c2:	f247 41f0 	movw	r1, #29936	; 0x74f0
 80053c6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80053ca:	2282      	movs	r2, #130	; 0x82
 80053cc:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <vStartMathTasks+0xbc>)
 80053ce:	f7fb ffd1 	bl	8001374 <xTaskGenericCreate>
}
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	20013262 	.word	0x20013262
 80053dc:	20013264 	.word	0x20013264
 80053e0:	20013266 	.word	0x20013266
 80053e4:	00000000 	.word	0x00000000

080053e8 <vCompetingMathTask1>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompetingMathTask1, pvParameters )
{
 80053e8:	b5b0      	push	{r4, r5, r7, lr}
 80053ea:	b08e      	sub	sp, #56	; 0x38
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
volatile portDOUBLE d1, d2, d3, d4;
volatile uint16_t *pusTaskCheckVariable;
volatile portDOUBLE dAnswer;
short sError = pdFALSE;
 80053f0:	2300      	movs	r3, #0
 80053f2:	86fb      	strh	r3, [r7, #54]	; 0x36
	/* Some ports require that tasks that use a hardware floating point unit
	tell the kernel that they require a floating point context before any
	floating point instructions are executed. */
	portTASK_USES_FLOATING_POINT();

	d1 = 123.4567;
 80053f4:	a332      	add	r3, pc, #200	; (adr r3, 80054c0 <vCompetingMathTask1+0xd8>)
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	d2 = 2345.6789;
 80053fe:	a332      	add	r3, pc, #200	; (adr r3, 80054c8 <vCompetingMathTask1+0xe0>)
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	e9c7 2308 	strd	r2, r3, [r7, #32]
	d3 = -918.222;
 8005408:	a331      	add	r3, pc, #196	; (adr r3, 80054d0 <vCompetingMathTask1+0xe8>)
 800540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	dAnswer = ( d1 + d2 ) * d3;
 8005412:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005416:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800541a:	f7fa ff1f 	bl	800025c <__adddf3>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	4610      	mov	r0, r2
 8005424:	4619      	mov	r1, r3
 8005426:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800542a:	f7fb f8c9 	bl	80005c0 <__aeabi_dmul>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	e9c7 2302 	strd	r2, r3, [r7, #8]

	/* The variable this task increments to show it is still running is passed in
	as the parameter. */
	pusTaskCheckVariable = ( uint16_t * ) pvParameters;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	633b      	str	r3, [r7, #48]	; 0x30

	/* Keep performing a calculation and checking the result against a constant. */
	for(;;)
	{
		d1 = 123.4567;
 800543a:	a321      	add	r3, pc, #132	; (adr r3, 80054c0 <vCompetingMathTask1+0xd8>)
 800543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005440:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		d2 = 2345.6789;
 8005444:	a320      	add	r3, pc, #128	; (adr r3, 80054c8 <vCompetingMathTask1+0xe0>)
 8005446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		d3 = -918.222;
 800544e:	a320      	add	r3, pc, #128	; (adr r3, 80054d0 <vCompetingMathTask1+0xe8>)
 8005450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005454:	e9c7 2306 	strd	r2, r3, [r7, #24]

		d4 = ( d1 + d2 ) * d3;
 8005458:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800545c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005460:	f7fa fefc 	bl	800025c <__adddf3>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4610      	mov	r0, r2
 800546a:	4619      	mov	r1, r3
 800546c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005470:	f7fb f8a6 	bl	80005c0 <__aeabi_dmul>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	e9c7 2304 	strd	r2, r3, [r7, #16]
			taskYIELD();
		#endif

		/* If the calculation does not match the expected constant, stop the
		increment of the check variable. */
		if( fabs( d4 - dAnswer ) > 0.001 )
 800547c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005484:	f7fa fee8 	bl	8000258 <__aeabi_dsub>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4614      	mov	r4, r2
 800548e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005492:	4620      	mov	r0, r4
 8005494:	4629      	mov	r1, r5
 8005496:	a310      	add	r3, pc, #64	; (adr r3, 80054d8 <vCompetingMathTask1+0xf0>)
 8005498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549c:	f7fb fb20 	bl	8000ae0 <__aeabi_dcmpgt>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <vCompetingMathTask1+0xc2>
		{
			sError = pdTRUE;
 80054a6:	2301      	movs	r3, #1
 80054a8:	86fb      	strh	r3, [r7, #54]	; 0x36
		}

		if( sError == pdFALSE )
 80054aa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d103      	bne.n	80054ba <vCompetingMathTask1+0xd2>
		{
			/* If the calculation has always been correct then set set the check
			variable.  The check variable will get set to pdFALSE each time
			xAreMathsTaskStillRunning() is executed. */
			( *pusTaskCheckVariable ) = pdTRUE;
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	2201      	movs	r2, #1
 80054b6:	801a      	strh	r2, [r3, #0]

		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

	}
 80054b8:	e7bf      	b.n	800543a <vCompetingMathTask1+0x52>
 80054ba:	e7be      	b.n	800543a <vCompetingMathTask1+0x52>
 80054bc:	f3af 8000 	nop.w
 80054c0:	a0000000 	.word	0xa0000000
 80054c4:	405edd3a 	.word	0x405edd3a
 80054c8:	a0000000 	.word	0xa0000000
 80054cc:	40a2535b 	.word	0x40a2535b
 80054d0:	a0000000 	.word	0xa0000000
 80054d4:	c08cb1c6 	.word	0xc08cb1c6
 80054d8:	e0000000 	.word	0xe0000000
 80054dc:	3f50624d 	.word	0x3f50624d

080054e0 <vCompetingMathTask2>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompetingMathTask2, pvParameters )
{
 80054e0:	b5b0      	push	{r4, r5, r7, lr}
 80054e2:	b08e      	sub	sp, #56	; 0x38
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
volatile portDOUBLE d1, d2, d3, d4;
volatile uint16_t *pusTaskCheckVariable;
volatile portDOUBLE dAnswer;
short sError = pdFALSE;
 80054e8:	2300      	movs	r3, #0
 80054ea:	86fb      	strh	r3, [r7, #54]	; 0x36
	/* Some ports require that tasks that use a hardware floating point unit
	tell the kernel that they require a floating point context before any
	floating point instructions are executed. */
	portTASK_USES_FLOATING_POINT();

	d1 = -389.38;
 80054ec:	a334      	add	r3, pc, #208	; (adr r3, 80055c0 <vCompetingMathTask2+0xe0>)
 80054ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	d2 = 32498.2;
 80054f6:	a334      	add	r3, pc, #208	; (adr r3, 80055c8 <vCompetingMathTask2+0xe8>)
 80054f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	d3 = -2.0001;
 8005500:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8005504:	f04f 0334 	mov.w	r3, #52	; 0x34
 8005508:	f2cc 0300 	movt	r3, #49152	; 0xc000
 800550c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	dAnswer = ( d1 / d2 ) * d3;
 8005510:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005514:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005518:	f7fb f97c 	bl	8000814 <__aeabi_ddiv>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4610      	mov	r0, r2
 8005522:	4619      	mov	r1, r3
 8005524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005528:	f7fb f84a 	bl	80005c0 <__aeabi_dmul>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	e9c7 2302 	strd	r2, r3, [r7, #8]


	/* The variable this task increments to show it is still running is passed in
	as the parameter. */
	pusTaskCheckVariable = ( uint16_t * ) pvParameters;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	633b      	str	r3, [r7, #48]	; 0x30

	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		d1 = -389.38;
 8005538:	a321      	add	r3, pc, #132	; (adr r3, 80055c0 <vCompetingMathTask2+0xe0>)
 800553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		d2 = 32498.2;
 8005542:	a321      	add	r3, pc, #132	; (adr r3, 80055c8 <vCompetingMathTask2+0xe8>)
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	e9c7 2308 	strd	r2, r3, [r7, #32]
		d3 = -2.0001;
 800554c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8005550:	f04f 0334 	mov.w	r3, #52	; 0x34
 8005554:	f2cc 0300 	movt	r3, #49152	; 0xc000
 8005558:	e9c7 2306 	strd	r2, r3, [r7, #24]

		d4 = ( d1 / d2 ) * d3;
 800555c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005560:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005564:	f7fb f956 	bl	8000814 <__aeabi_ddiv>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4610      	mov	r0, r2
 800556e:	4619      	mov	r1, r3
 8005570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005574:	f7fb f824 	bl	80005c0 <__aeabi_dmul>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	e9c7 2304 	strd	r2, r3, [r7, #16]
			taskYIELD();
		#endif

		/* If the calculation does not match the expected constant, stop the
		increment of the check variable. */
		if( fabs( d4 - dAnswer ) > 0.001 )
 8005580:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005584:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005588:	f7fa fe66 	bl	8000258 <__aeabi_dsub>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4614      	mov	r4, r2
 8005592:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005596:	4620      	mov	r0, r4
 8005598:	4629      	mov	r1, r5
 800559a:	a30d      	add	r3, pc, #52	; (adr r3, 80055d0 <vCompetingMathTask2+0xf0>)
 800559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a0:	f7fb fa9e 	bl	8000ae0 <__aeabi_dcmpgt>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <vCompetingMathTask2+0xce>
		{
			sError = pdTRUE;
 80055aa:	2301      	movs	r3, #1
 80055ac:	86fb      	strh	r3, [r7, #54]	; 0x36
		}

		if( sError == pdFALSE )
 80055ae:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d103      	bne.n	80055be <vCompetingMathTask2+0xde>
		{
			/* If the calculation has always been correct then set set the check
			variable.  The check variable will get set to pdFALSE each time
			xAreMathsTaskStillRunning() is executed. */
			( *pusTaskCheckVariable ) = pdTRUE;
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	2201      	movs	r2, #1
 80055ba:	801a      	strh	r2, [r3, #0]
		}

		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif
	}
 80055bc:	e7bc      	b.n	8005538 <vCompetingMathTask2+0x58>
 80055be:	e7bb      	b.n	8005538 <vCompetingMathTask2+0x58>
 80055c0:	80000000 	.word	0x80000000
 80055c4:	c0785614 	.word	0xc0785614
 80055c8:	c0000000 	.word	0xc0000000
 80055cc:	40dfbc8c 	.word	0x40dfbc8c
 80055d0:	e0000000 	.word	0xe0000000
 80055d4:	3f50624d 	.word	0x3f50624d

080055d8 <vCompetingMathTask3>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompetingMathTask3, pvParameters )
{
 80055d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055da:	b08f      	sub	sp, #60	; 0x3c
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
volatile portDOUBLE *pdArray, dTotal1, dTotal2, dDifference;
volatile uint16_t *pusTaskCheckVariable;
const size_t xArraySize = 10;
 80055e0:	230a      	movs	r3, #10
 80055e2:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xPosition;
short sError = pdFALSE;
 80055e4:	2300      	movs	r3, #0
 80055e6:	867b      	strh	r3, [r7, #50]	; 0x32
	floating point instructions are executed. */
	portTASK_USES_FLOATING_POINT();

	/* The variable this task increments to show it is still running is passed in
	as the parameter. */
	pusTaskCheckVariable = ( uint16_t * ) pvParameters;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	62bb      	str	r3, [r7, #40]	; 0x28

	pdArray = ( portDOUBLE * ) pvPortMalloc( xArraySize * sizeof( portDOUBLE ) );
 80055ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fe fc9f 	bl	8003f34 <pvPortMalloc>
 80055f6:	6278      	str	r0, [r7, #36]	; 0x24
	/* Keep filling an array, keeping a running total of the values placed in the
	array.  Then run through the array adding up all the values.  If the two totals
	do not match, stop the check variable from incrementing. */
	for( ;; )
	{
		dTotal1 = 0.0;
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	e9c7 2306 	strd	r2, r3, [r7, #24]
		dTotal2 = 0.0;
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	f04f 0300 	mov.w	r3, #0
 800560c:	e9c7 2304 	strd	r2, r3, [r7, #16]

		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 8005610:	2300      	movs	r3, #0
 8005612:	637b      	str	r3, [r7, #52]	; 0x34
 8005614:	e034      	b.n	8005680 <vCompetingMathTask3+0xa8>
		{
			pdArray[ xPosition ] = ( portDOUBLE ) xPosition + 5.5;
 8005616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561c:	18d6      	adds	r6, r2, r3
 800561e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005620:	f7fa ff58 	bl	80004d4 <__aeabi_ui2d>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4610      	mov	r0, r2
 800562a:	4619      	mov	r1, r3
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	f2c4 0316 	movt	r3, #16406	; 0x4016
 8005638:	f7fa fe10 	bl	800025c <__adddf3>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	e9c6 2300 	strd	r2, r3, [r6]
			dTotal1 += ( portDOUBLE ) xPosition + 5.5;
 8005644:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005646:	f7fa ff45 	bl	80004d4 <__aeabi_ui2d>
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	4610      	mov	r0, r2
 8005650:	4619      	mov	r1, r3
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	f04f 0300 	mov.w	r3, #0
 800565a:	f2c4 0316 	movt	r3, #16406	; 0x4016
 800565e:	f7fa fdfd 	bl	800025c <__adddf3>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4610      	mov	r0, r2
 8005668:	4619      	mov	r1, r3
 800566a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800566e:	f7fa fdf5 	bl	800025c <__adddf3>
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for( ;; )
	{
		dTotal1 = 0.0;
		dTotal2 = 0.0;

		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 800567a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567c:	3301      	adds	r3, #1
 800567e:	637b      	str	r3, [r7, #52]	; 0x34
 8005680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005684:	429a      	cmp	r2, r3
 8005686:	d3c6      	bcc.n	8005616 <vCompetingMathTask3+0x3e>

		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 8005688:	2300      	movs	r3, #0
 800568a:	637b      	str	r3, [r7, #52]	; 0x34
 800568c:	e010      	b.n	80056b0 <vCompetingMathTask3+0xd8>
		{
			dTotal2 += pdArray[ xPosition ];
 800568e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005694:	4413      	add	r3, r2
 8005696:	e9d3 0100 	ldrd	r0, r1, [r3]
 800569a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800569e:	f7fa fddd 	bl	800025c <__adddf3>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	e9c7 2304 	strd	r2, r3, [r7, #16]

		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 80056aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ac:	3301      	adds	r3, #1
 80056ae:	637b      	str	r3, [r7, #52]	; 0x34
 80056b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d3ea      	bcc.n	800568e <vCompetingMathTask3+0xb6>
		{
			dTotal2 += pdArray[ xPosition ];
		}

		dDifference = dTotal1 - dTotal2;
 80056b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80056bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80056c0:	f7fa fdca 	bl	8000258 <__aeabi_dsub>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		if( fabs( dDifference ) > 0.001 )
 80056cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056d0:	4614      	mov	r4, r2
 80056d2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80056d6:	4620      	mov	r0, r4
 80056d8:	4629      	mov	r1, r5
 80056da:	a309      	add	r3, pc, #36	; (adr r3, 8005700 <vCompetingMathTask3+0x128>)
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	f7fb f9fe 	bl	8000ae0 <__aeabi_dcmpgt>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <vCompetingMathTask3+0x116>
		{
			sError = pdTRUE;
 80056ea:	2301      	movs	r3, #1
 80056ec:	867b      	strh	r3, [r7, #50]	; 0x32

		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		if( sError == pdFALSE )
 80056ee:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d103      	bne.n	80056fe <vCompetingMathTask3+0x126>
		{
			/* If the calculation has always been correct then set set the check
			variable.  The check variable will get set to pdFALSE each time
			xAreMathsTaskStillRunning() is executed. */
			( *pusTaskCheckVariable ) = pdTRUE;
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	2201      	movs	r2, #1
 80056fa:	801a      	strh	r2, [r3, #0]
		}
	}
 80056fc:	e77c      	b.n	80055f8 <vCompetingMathTask3+0x20>
 80056fe:	e77b      	b.n	80055f8 <vCompetingMathTask3+0x20>
 8005700:	e0000000 	.word	0xe0000000
 8005704:	3f50624d 	.word	0x3f50624d

08005708 <vCompetingMathTask4>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompetingMathTask4, pvParameters )
{
 8005708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800570a:	b08f      	sub	sp, #60	; 0x3c
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
volatile portDOUBLE *pdArray, dTotal1, dTotal2, dDifference;
volatile uint16_t *pusTaskCheckVariable;
const size_t xArraySize = 10;
 8005710:	230a      	movs	r3, #10
 8005712:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xPosition;
short sError = pdFALSE;
 8005714:	2300      	movs	r3, #0
 8005716:	867b      	strh	r3, [r7, #50]	; 0x32
	floating point instructions are executed. */
	portTASK_USES_FLOATING_POINT();

	/* The variable this task increments to show it is still running is passed in
	as the parameter. */
	pusTaskCheckVariable = ( uint16_t * ) pvParameters;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	62bb      	str	r3, [r7, #40]	; 0x28

	pdArray = ( portDOUBLE * ) pvPortMalloc( xArraySize * sizeof( portDOUBLE ) );
 800571c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	4618      	mov	r0, r3
 8005722:	f7fe fc07 	bl	8003f34 <pvPortMalloc>
 8005726:	6278      	str	r0, [r7, #36]	; 0x24
	/* Keep filling an array, keeping a running total of the values placed in the
	array.  Then run through the array adding up all the values.  If the two totals
	do not match, stop the check variable from incrementing. */
	for( ;; )
	{
		dTotal1 = 0.0;
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	e9c7 2306 	strd	r2, r3, [r7, #24]
		dTotal2 = 0.0;
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	e9c7 2304 	strd	r2, r3, [r7, #16]

		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 8005740:	2300      	movs	r3, #0
 8005742:	637b      	str	r3, [r7, #52]	; 0x34
 8005744:	e02e      	b.n	80057a4 <vCompetingMathTask4+0x9c>
		{
			pdArray[ xPosition ] = ( portDOUBLE ) xPosition * 12.123;
 8005746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574c:	18d6      	adds	r6, r2, r3
 800574e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005750:	f7fa fec0 	bl	80004d4 <__aeabi_ui2d>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	4610      	mov	r0, r2
 800575a:	4619      	mov	r1, r3
 800575c:	a332      	add	r3, pc, #200	; (adr r3, 8005828 <vCompetingMathTask4+0x120>)
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	f7fa ff2d 	bl	80005c0 <__aeabi_dmul>
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	e9c6 2300 	strd	r2, r3, [r6]
			dTotal1 += ( portDOUBLE ) xPosition * 12.123;
 800576e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005770:	f7fa feb0 	bl	80004d4 <__aeabi_ui2d>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	4610      	mov	r0, r2
 800577a:	4619      	mov	r1, r3
 800577c:	a32a      	add	r3, pc, #168	; (adr r3, 8005828 <vCompetingMathTask4+0x120>)
 800577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005782:	f7fa ff1d 	bl	80005c0 <__aeabi_dmul>
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	4610      	mov	r0, r2
 800578c:	4619      	mov	r1, r3
 800578e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005792:	f7fa fd63 	bl	800025c <__adddf3>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for( ;; )
	{
		dTotal1 = 0.0;
		dTotal2 = 0.0;

		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 800579e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a0:	3301      	adds	r3, #1
 80057a2:	637b      	str	r3, [r7, #52]	; 0x34
 80057a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d3cc      	bcc.n	8005746 <vCompetingMathTask4+0x3e>

		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 80057ac:	2300      	movs	r3, #0
 80057ae:	637b      	str	r3, [r7, #52]	; 0x34
 80057b0:	e010      	b.n	80057d4 <vCompetingMathTask4+0xcc>
		{
			dTotal2 += pdArray[ xPosition ];
 80057b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b8:	4413      	add	r3, r2
 80057ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80057be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80057c2:	f7fa fd4b 	bl	800025c <__adddf3>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	e9c7 2304 	strd	r2, r3, [r7, #16]

		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		for( xPosition = 0; xPosition < xArraySize; xPosition++ )
 80057ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d0:	3301      	adds	r3, #1
 80057d2:	637b      	str	r3, [r7, #52]	; 0x34
 80057d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d8:	429a      	cmp	r2, r3
 80057da:	d3ea      	bcc.n	80057b2 <vCompetingMathTask4+0xaa>
		{
			dTotal2 += pdArray[ xPosition ];
		}

		dDifference = dTotal1 - dTotal2;
 80057dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80057e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80057e4:	f7fa fd38 	bl	8000258 <__aeabi_dsub>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	e9c7 2302 	strd	r2, r3, [r7, #8]
		if( fabs( dDifference ) > 0.001 )
 80057f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057f4:	4614      	mov	r4, r2
 80057f6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80057fa:	4620      	mov	r0, r4
 80057fc:	4629      	mov	r1, r5
 80057fe:	a30c      	add	r3, pc, #48	; (adr r3, 8005830 <vCompetingMathTask4+0x128>)
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	f7fb f96c 	bl	8000ae0 <__aeabi_dcmpgt>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <vCompetingMathTask4+0x10a>
		{
			sError = pdTRUE;
 800580e:	2301      	movs	r3, #1
 8005810:	867b      	strh	r3, [r7, #50]	; 0x32

		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		if( sError == pdFALSE )
 8005812:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005816:	2b00      	cmp	r3, #0
 8005818:	d103      	bne.n	8005822 <vCompetingMathTask4+0x11a>
		{
			/* If the calculation has always been correct then set set the check
			variable.  The check variable will get set to pdFALSE each time
			xAreMathsTaskStillRunning() is executed. */
			( *pusTaskCheckVariable ) = pdTRUE;
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	2201      	movs	r2, #1
 800581e:	801a      	strh	r2, [r3, #0]
		}
	}
 8005820:	e782      	b.n	8005728 <vCompetingMathTask4+0x20>
 8005822:	e781      	b.n	8005728 <vCompetingMathTask4+0x20>
 8005824:	f3af 8000 	nop.w
 8005828:	e0000000 	.word	0xe0000000
 800582c:	40283ef9 	.word	0x40283ef9
 8005830:	e0000000 	.word	0xe0000000
 8005834:	3f50624d 	.word	0x3f50624d

08005838 <xAreMathsTaskStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreMathsTaskStillRunning( void )
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
BaseType_t xReturn = pdPASS, xTask;
 800583e:	2301      	movs	r3, #1
 8005840:	607b      	str	r3, [r7, #4]

	/* Check the maths tasks are still running by ensuring their check variables
	have been set to pdPASS. */
	for( xTask = 0; xTask < mathNUMBER_OF_TASKS; xTask++ )
 8005842:	2300      	movs	r3, #0
 8005844:	603b      	str	r3, [r7, #0]
 8005846:	e017      	b.n	8005878 <xAreMathsTaskStillRunning+0x40>
	{
		if( usTaskCheck[ xTask ] != pdTRUE )
 8005848:	f243 2360 	movw	r3, #12896	; 0x3260
 800584c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005856:	b29b      	uxth	r3, r3
 8005858:	2b01      	cmp	r3, #1
 800585a:	d002      	beq.n	8005862 <xAreMathsTaskStillRunning+0x2a>
		{
			/* The check has not been set so the associated task has either
			stalled or detected an error. */
			xReturn = pdFAIL;
 800585c:	2300      	movs	r3, #0
 800585e:	607b      	str	r3, [r7, #4]
 8005860:	e007      	b.n	8005872 <xAreMathsTaskStillRunning+0x3a>
		}
		else
		{
			/* Reset the variable so it can be checked again the next time this
			function is executed. */
			usTaskCheck[ xTask ] = pdFALSE;
 8005862:	f243 2360 	movw	r3, #12896	; 0x3260
 8005866:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	2100      	movs	r1, #0
 800586e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
{
BaseType_t xReturn = pdPASS, xTask;

	/* Check the maths tasks are still running by ensuring their check variables
	have been set to pdPASS. */
	for( xTask = 0; xTask < mathNUMBER_OF_TASKS; xTask++ )
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	3301      	adds	r3, #1
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2b03      	cmp	r3, #3
 800587c:	dde4      	ble.n	8005848 <xAreMathsTaskStillRunning+0x10>
			function is executed. */
			usTaskCheck[ xTask ] = pdFALSE;
		}
	}

	return xReturn;
 800587e:	687b      	ldr	r3, [r7, #4]
}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <vStartGenericQueueTasks>:
static SemaphoreHandle_t xISRMutex = NULL;

/*-----------------------------------------------------------*/

void vStartGenericQueueTasks( UBaseType_t uxPriority )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af04      	add	r7, sp, #16
 8005892:	6078      	str	r0, [r7, #4]
QueueHandle_t xQueue;
SemaphoreHandle_t xMutex;

	xISRMutex = xSemaphoreCreateMutex();
 8005894:	2001      	movs	r0, #1
 8005896:	f7fd f931 	bl	8002afc <xQueueCreateMutex>
 800589a:	4602      	mov	r2, r0
 800589c:	f243 2380 	movw	r3, #12928	; 0x3280
 80058a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80058a4:	601a      	str	r2, [r3, #0]
	configASSERT( xISRMutex );
 80058a6:	f243 2380 	movw	r3, #12928	; 0x3280
 80058aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d102      	bne.n	80058ba <vStartGenericQueueTasks+0x2e>
 80058b4:	f7fd ff84 	bl	80037c0 <ulPortSetInterruptMask>
 80058b8:	e7fe      	b.n	80058b8 <vStartGenericQueueTasks+0x2c>

	/* Create the queue that we are going to use for the
	prvSendFrontAndBackTest demo. */
	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( uint32_t ) );
 80058ba:	2005      	movs	r0, #5
 80058bc:	2104      	movs	r1, #4
 80058be:	2200      	movs	r2, #0
 80058c0:	f7fd f8da 	bl	8002a78 <xQueueGenericCreate>
 80058c4:	60f8      	str	r0, [r7, #12]
	in use.  The queue registry is provided as a means for kernel aware
	debuggers to locate queues and has no purpose if a kernel aware debugger
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
	defined to be less than 1. */
	vQueueAddToRegistry( xQueue, "Gen_Queue_Test" );
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f247 41f8 	movw	r1, #29944	; 0x74f8
 80058cc:	f6c0 0100 	movt	r1, #2048	; 0x800
 80058d0:	f7fd fd1e 	bl	8003310 <vQueueAddToRegistry>

	/* Create the demo task and pass it the queue just created.  We are
	passing the queue handle by value so it does not matter that it is
	declared on the stack here. */
	xTaskCreate( prvSendFrontAndBackTest, "GenQ", configMINIMAL_STACK_SIZE, ( void * ) xQueue, uxPriority, NULL );
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	2300      	movs	r3, #0
 80058da:	9301      	str	r3, [sp, #4]
 80058dc:	2300      	movs	r3, #0
 80058de:	9302      	str	r3, [sp, #8]
 80058e0:	2300      	movs	r3, #0
 80058e2:	9303      	str	r3, [sp, #12]
 80058e4:	f645 109d 	movw	r0, #22941	; 0x599d
 80058e8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80058ec:	f247 5108 	movw	r1, #29960	; 0x7508
 80058f0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80058f4:	2282      	movs	r2, #130	; 0x82
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f7fb fd3c 	bl	8001374 <xTaskGenericCreate>

	/* Create the mutex used by the prvMutexTest task. */
	xMutex = xSemaphoreCreateMutex();
 80058fc:	2001      	movs	r0, #1
 80058fe:	f7fd f8fd 	bl	8002afc <xQueueCreateMutex>
 8005902:	60b8      	str	r0, [r7, #8]
	in use.  The registry is provided as a means for kernel aware
	debuggers to locate mutexes and has no purpose if a kernel aware debugger
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
	defined to be less than 1. */
	vQueueAddToRegistry( ( QueueHandle_t ) xMutex, "Gen_Queue_Mutex" );
 8005904:	68b8      	ldr	r0, [r7, #8]
 8005906:	f247 5110 	movw	r1, #29968	; 0x7510
 800590a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800590e:	f7fd fcff 	bl	8003310 <vQueueAddToRegistry>

	/* Create the mutex demo tasks and pass it the mutex just created.  We are
	passing the mutex handle by value so it does not matter that it is declared
	on the stack here. */
	xTaskCreate( prvLowPriorityMutexTask, "MuLow", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_LOW_PRIORITY, NULL );
 8005912:	2300      	movs	r3, #0
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	2300      	movs	r3, #0
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	2300      	movs	r3, #0
 800591c:	9302      	str	r3, [sp, #8]
 800591e:	2300      	movs	r3, #0
 8005920:	9303      	str	r3, [sp, #12]
 8005922:	f246 0061 	movw	r0, #24673	; 0x6061
 8005926:	f6c0 0000 	movt	r0, #2048	; 0x800
 800592a:	f247 5120 	movw	r1, #29984	; 0x7520
 800592e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005932:	2282      	movs	r2, #130	; 0x82
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f7fb fd1d 	bl	8001374 <xTaskGenericCreate>
	xTaskCreate( prvMediumPriorityMutexTask, "MuMed", configMINIMAL_STACK_SIZE, NULL, genqMUTEX_MEDIUM_PRIORITY, &xMediumPriorityMutexTask );
 800593a:	2302      	movs	r3, #2
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	f243 237c 	movw	r3, #12924	; 0x327c
 8005942:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005946:	9301      	str	r3, [sp, #4]
 8005948:	2300      	movs	r3, #0
 800594a:	9302      	str	r3, [sp, #8]
 800594c:	2300      	movs	r3, #0
 800594e:	9303      	str	r3, [sp, #12]
 8005950:	f246 00c1 	movw	r0, #24769	; 0x60c1
 8005954:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005958:	f247 5128 	movw	r1, #29992	; 0x7528
 800595c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005960:	2282      	movs	r2, #130	; 0x82
 8005962:	2300      	movs	r3, #0
 8005964:	f7fb fd06 	bl	8001374 <xTaskGenericCreate>
	xTaskCreate( prvHighPriorityMutexTask, "MuHigh", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_HIGH_PRIORITY, &xHighPriorityMutexTask );
 8005968:	2303      	movs	r3, #3
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	f243 2378 	movw	r3, #12920	; 0x3278
 8005970:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005974:	9301      	str	r3, [sp, #4]
 8005976:	2300      	movs	r3, #0
 8005978:	9302      	str	r3, [sp, #8]
 800597a:	2300      	movs	r3, #0
 800597c:	9303      	str	r3, [sp, #12]
 800597e:	f246 00e9 	movw	r0, #24809	; 0x60e9
 8005982:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005986:	f247 5130 	movw	r1, #30000	; 0x7530
 800598a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800598e:	2282      	movs	r2, #130	; 0x82
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f7fb fcef 	bl	8001374 <xTaskGenericCreate>
	#ifdef _WINDOWS_
	{
		xTaskCreate( vInterruptMutexTask, "IntMu", configMINIMAL_STACK_SIZE, NULL, genqMUTEX_MEDIUM_PRIORITY, NULL );
	}
	#endif /* __WINDOWS__ */
}
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <prvSendFrontAndBackTest>:
/*-----------------------------------------------------------*/

static void prvSendFrontAndBackTest( void *pvParameters )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]

		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	xQueue = ( QueueHandle_t ) pvParameters;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	617b      	str	r3, [r7, #20]
	{
		/* The queue is empty, so sending an item to the back of the queue
		should have the same efect as sending it to the front of the queue.

		First send to the front and check everything is as expected. */
		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
 80059a8:	6978      	ldr	r0, [r7, #20]
 80059aa:	f243 216c 	movw	r1, #12908	; 0x326c
 80059ae:	f2c2 0101 	movt	r1, #8193	; 0x2001
 80059b2:	2200      	movs	r2, #0
 80059b4:	2301      	movs	r3, #1
 80059b6:	f7fd f96f 	bl	8002c98 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 80059ba:	6978      	ldr	r0, [r7, #20]
 80059bc:	f7fd fb84 	bl	80030c8 <uxQueueMessagesWaiting>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d005      	beq.n	80059d2 <prvSendFrontAndBackTest+0x36>
		{
			xErrorDetected = pdTRUE;
 80059c6:	f243 2368 	movw	r3, #12904	; 0x3268
 80059ca:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80059ce:	2201      	movs	r2, #1
 80059d0:	601a      	str	r2, [r3, #0]
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
 80059d2:	f107 0310 	add.w	r3, r7, #16
 80059d6:	6978      	ldr	r0, [r7, #20]
 80059d8:	4619      	mov	r1, r3
 80059da:	2200      	movs	r2, #0
 80059dc:	2300      	movs	r3, #0
 80059de:	f7fd fa95 	bl	8002f0c <xQueueGenericReceive>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d005      	beq.n	80059f4 <prvSendFrontAndBackTest+0x58>
		{
			xErrorDetected = pdTRUE;
 80059e8:	f243 2368 	movw	r3, #12904	; 0x3268
 80059ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80059f0:	2201      	movs	r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
		}

		/* The data we sent to the queue should equal the data we just received
		from the queue. */
		if( ulLoopCounter != ulData )
 80059f4:	f243 236c 	movw	r3, #12908	; 0x326c
 80059f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d005      	beq.n	8005a10 <prvSendFrontAndBackTest+0x74>
		{
			xErrorDetected = pdTRUE;
 8005a04:	f243 2368 	movw	r3, #12904	; 0x3268
 8005a08:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]
		}

		/* Then do the same, sending the data to the back, checking everything
		is as expected. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8005a10:	6978      	ldr	r0, [r7, #20]
 8005a12:	f7fd fb59 	bl	80030c8 <uxQueueMessagesWaiting>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d005      	beq.n	8005a28 <prvSendFrontAndBackTest+0x8c>
		{
			xErrorDetected = pdTRUE;
 8005a1c:	f243 2368 	movw	r3, #12904	; 0x3268
 8005a20:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005a24:	2201      	movs	r2, #1
 8005a26:	601a      	str	r2, [r3, #0]
		}

		xQueueSendToBack( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
 8005a28:	6978      	ldr	r0, [r7, #20]
 8005a2a:	f243 216c 	movw	r1, #12908	; 0x326c
 8005a2e:	f2c2 0101 	movt	r1, #8193	; 0x2001
 8005a32:	2200      	movs	r2, #0
 8005a34:	2300      	movs	r3, #0
 8005a36:	f7fd f92f 	bl	8002c98 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 8005a3a:	6978      	ldr	r0, [r7, #20]
 8005a3c:	f7fd fb44 	bl	80030c8 <uxQueueMessagesWaiting>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d005      	beq.n	8005a52 <prvSendFrontAndBackTest+0xb6>
		{
			xErrorDetected = pdTRUE;
 8005a46:	f243 2368 	movw	r3, #12904	; 0x3268
 8005a4a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005a4e:	2201      	movs	r2, #1
 8005a50:	601a      	str	r2, [r3, #0]
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
 8005a52:	f107 0310 	add.w	r3, r7, #16
 8005a56:	6978      	ldr	r0, [r7, #20]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f7fd fa55 	bl	8002f0c <xQueueGenericReceive>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d005      	beq.n	8005a74 <prvSendFrontAndBackTest+0xd8>
		{
			xErrorDetected = pdTRUE;
 8005a68:	f243 2368 	movw	r3, #12904	; 0x3268
 8005a6c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005a70:	2201      	movs	r2, #1
 8005a72:	601a      	str	r2, [r3, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8005a74:	6978      	ldr	r0, [r7, #20]
 8005a76:	f7fd fb27 	bl	80030c8 <uxQueueMessagesWaiting>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <prvSendFrontAndBackTest+0xf0>
		{
			xErrorDetected = pdTRUE;
 8005a80:	f243 2368 	movw	r3, #12904	; 0x3268
 8005a84:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005a88:	2201      	movs	r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]
		}

		/* The data we sent to the queue should equal the data we just received
		from the queue. */
		if( ulLoopCounter != ulData )
 8005a8c:	f243 236c 	movw	r3, #12908	; 0x326c
 8005a90:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d005      	beq.n	8005aa8 <prvSendFrontAndBackTest+0x10c>
		{
			xErrorDetected = pdTRUE;
 8005a9c:	f243 2368 	movw	r3, #12904	; 0x3268
 8005aa0:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	613b      	str	r3, [r7, #16]
 8005aac:	e00a      	b.n	8005ac4 <prvSendFrontAndBackTest+0x128>
		{
			xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK );
 8005aae:	f107 0310 	add.w	r3, r7, #16
 8005ab2:	6978      	ldr	r0, [r7, #20]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f7fd f8ed 	bl	8002c98 <xQueueGenericSend>
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	613b      	str	r3, [r7, #16]
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d9f1      	bls.n	8005aae <prvSendFrontAndBackTest+0x112>
			xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK );
		}

		/* Now the order in the queue should be 2, 3, 4, with 2 being the first
		thing to be read out.  Now add 1 then 0 to the front of the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 3 )
 8005aca:	6978      	ldr	r0, [r7, #20]
 8005acc:	f7fd fafc 	bl	80030c8 <uxQueueMessagesWaiting>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d005      	beq.n	8005ae2 <prvSendFrontAndBackTest+0x146>
		{
			xErrorDetected = pdTRUE;
 8005ad6:	f243 2368 	movw	r3, #12904	; 0x3268
 8005ada:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005ade:	2201      	movs	r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]
		}
		ulData = 1;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	613b      	str	r3, [r7, #16]
		xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
 8005ae6:	f107 0310 	add.w	r3, r7, #16
 8005aea:	6978      	ldr	r0, [r7, #20]
 8005aec:	4619      	mov	r1, r3
 8005aee:	2200      	movs	r2, #0
 8005af0:	2301      	movs	r3, #1
 8005af2:	f7fd f8d1 	bl	8002c98 <xQueueGenericSend>
		ulData = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	613b      	str	r3, [r7, #16]
		xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
 8005afa:	f107 0310 	add.w	r3, r7, #16
 8005afe:	6978      	ldr	r0, [r7, #20]
 8005b00:	4619      	mov	r1, r3
 8005b02:	2200      	movs	r2, #0
 8005b04:	2301      	movs	r3, #1
 8005b06:	f7fd f8c7 	bl	8002c98 <xQueueGenericSend>

		/* Now the queue should be full, and when we read the data out we
		should receive 0, 1, 2, 3, 4. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 8005b0a:	6978      	ldr	r0, [r7, #20]
 8005b0c:	f7fd fadc 	bl	80030c8 <uxQueueMessagesWaiting>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b05      	cmp	r3, #5
 8005b14:	d005      	beq.n	8005b22 <prvSendFrontAndBackTest+0x186>
		{
			xErrorDetected = pdTRUE;
 8005b16:	f243 2368 	movw	r3, #12904	; 0x3268
 8005b1a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005b1e:	2201      	movs	r2, #1
 8005b20:	601a      	str	r2, [r3, #0]
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 8005b22:	f107 0310 	add.w	r3, r7, #16
 8005b26:	6978      	ldr	r0, [r7, #20]
 8005b28:	4619      	mov	r1, r3
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	f7fd f8b3 	bl	8002c98 <xQueueGenericSend>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d005      	beq.n	8005b44 <prvSendFrontAndBackTest+0x1a8>
		{
			xErrorDetected = pdTRUE;
 8005b38:	f243 2368 	movw	r3, #12904	; 0x3268
 8005b3c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005b40:	2201      	movs	r2, #1
 8005b42:	601a      	str	r2, [r3, #0]
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 8005b44:	f107 0310 	add.w	r3, r7, #16
 8005b48:	6978      	ldr	r0, [r7, #20]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f7fd f8a2 	bl	8002c98 <xQueueGenericSend>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d005      	beq.n	8005b66 <prvSendFrontAndBackTest+0x1ca>
		{
			xErrorDetected = pdTRUE;
 8005b5a:	f243 2368 	movw	r3, #12904	; 0x3268
 8005b5e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005b62:	2201      	movs	r2, #1
 8005b64:	601a      	str	r2, [r3, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 8005b66:	2300      	movs	r3, #0
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	e03b      	b.n	8005be4 <prvSendFrontAndBackTest+0x248>
		{
			/* Try peeking the data first. */
			if( xQueuePeek( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 8005b6c:	f107 030c 	add.w	r3, r7, #12
 8005b70:	6978      	ldr	r0, [r7, #20]
 8005b72:	4619      	mov	r1, r3
 8005b74:	2200      	movs	r2, #0
 8005b76:	2301      	movs	r3, #1
 8005b78:	f7fd f9c8 	bl	8002f0c <xQueueGenericReceive>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d005      	beq.n	8005b8e <prvSendFrontAndBackTest+0x1f2>
			{
				xErrorDetected = pdTRUE;
 8005b82:	f243 2368 	movw	r3, #12904	; 0x3268
 8005b86:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
			}

			if( ulData != ulData2 )
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d005      	beq.n	8005ba2 <prvSendFrontAndBackTest+0x206>
			{
				xErrorDetected = pdTRUE;
 8005b96:	f243 2368 	movw	r3, #12904	; 0x3268
 8005b9a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]
			}


			/* Now try receiving the data for real.  The value should be the
			same.  Clobber the value first so we know we really received it. */
			ulData2 = ~ulData2;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	60fb      	str	r3, [r7, #12]
			if( xQueueReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 8005ba8:	f107 030c 	add.w	r3, r7, #12
 8005bac:	6978      	ldr	r0, [r7, #20]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f7fd f9aa 	bl	8002f0c <xQueueGenericReceive>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d005      	beq.n	8005bca <prvSendFrontAndBackTest+0x22e>
			{
				xErrorDetected = pdTRUE;
 8005bbe:	f243 2368 	movw	r3, #12904	; 0x3268
 8005bc2:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]
			}

			if( ulData != ulData2 )
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d005      	beq.n	8005bde <prvSendFrontAndBackTest+0x242>
			{
				xErrorDetected = pdTRUE;
 8005bd2:	f243 2368 	movw	r3, #12904	; 0x3268
 8005bd6:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005bda:	2201      	movs	r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	3301      	adds	r3, #1
 8005be2:	613b      	str	r3, [r7, #16]
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d9c0      	bls.n	8005b6c <prvSendFrontAndBackTest+0x1d0>
				xErrorDetected = pdTRUE;
			}
		}

		/* The queue should now be empty again. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8005bea:	6978      	ldr	r0, [r7, #20]
 8005bec:	f7fd fa6c 	bl	80030c8 <uxQueueMessagesWaiting>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d005      	beq.n	8005c02 <prvSendFrontAndBackTest+0x266>
		{
			xErrorDetected = pdTRUE;
 8005bf6:	f243 2368 	movw	r3, #12904	; 0x3268
 8005bfa:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005bfe:	2201      	movs	r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
			taskYIELD();
		#endif


		/* Our queue is empty once more, add 10, 11 to the back. */
		ulData = 10;
 8005c02:	230a      	movs	r3, #10
 8005c04:	613b      	str	r3, [r7, #16]
		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
 8005c06:	f107 0310 	add.w	r3, r7, #16
 8005c0a:	6978      	ldr	r0, [r7, #20]
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2300      	movs	r3, #0
 8005c12:	f7fd f841 	bl	8002c98 <xQueueGenericSend>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d005      	beq.n	8005c28 <prvSendFrontAndBackTest+0x28c>
		{
			xErrorDetected = pdTRUE;
 8005c1c:	f243 2368 	movw	r3, #12904	; 0x3268
 8005c20:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005c24:	2201      	movs	r2, #1
 8005c26:	601a      	str	r2, [r3, #0]
		}
		ulData = 11;
 8005c28:	230b      	movs	r3, #11
 8005c2a:	613b      	str	r3, [r7, #16]
		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
 8005c2c:	f107 0310 	add.w	r3, r7, #16
 8005c30:	6978      	ldr	r0, [r7, #20]
 8005c32:	4619      	mov	r1, r3
 8005c34:	2200      	movs	r2, #0
 8005c36:	2300      	movs	r3, #0
 8005c38:	f7fd f82e 	bl	8002c98 <xQueueGenericSend>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d005      	beq.n	8005c4e <prvSendFrontAndBackTest+0x2b2>
		{
			xErrorDetected = pdTRUE;
 8005c42:	f243 2368 	movw	r3, #12904	; 0x3268
 8005c46:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 2 )
 8005c4e:	6978      	ldr	r0, [r7, #20]
 8005c50:	f7fd fa3a 	bl	80030c8 <uxQueueMessagesWaiting>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d005      	beq.n	8005c66 <prvSendFrontAndBackTest+0x2ca>
		{
			xErrorDetected = pdTRUE;
 8005c5a:	f243 2368 	movw	r3, #12904	; 0x3268
 8005c5e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005c62:	2201      	movs	r2, #1
 8005c64:	601a      	str	r2, [r3, #0]
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
 8005c66:	2309      	movs	r3, #9
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	e013      	b.n	8005c94 <prvSendFrontAndBackTest+0x2f8>
		{
			if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
 8005c6c:	f107 0310 	add.w	r3, r7, #16
 8005c70:	6978      	ldr	r0, [r7, #20]
 8005c72:	4619      	mov	r1, r3
 8005c74:	2200      	movs	r2, #0
 8005c76:	2301      	movs	r3, #1
 8005c78:	f7fd f80e 	bl	8002c98 <xQueueGenericSend>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d005      	beq.n	8005c8e <prvSendFrontAndBackTest+0x2f2>
			{
				xErrorDetected = pdTRUE;
 8005c82:	f243 2368 	movw	r3, #12904	; 0x3268
 8005c86:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]
			xErrorDetected = pdTRUE;
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	3b01      	subs	r3, #1
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	2b06      	cmp	r3, #6
 8005c98:	d8e8      	bhi.n	8005c6c <prvSendFrontAndBackTest+0x2d0>
			}
		}

		/* Now check that the queue is full, and that receiving data provides
		the expected sequence of 7, 8, 9, 10, 11. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 8005c9a:	6978      	ldr	r0, [r7, #20]
 8005c9c:	f7fd fa14 	bl	80030c8 <uxQueueMessagesWaiting>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b05      	cmp	r3, #5
 8005ca4:	d005      	beq.n	8005cb2 <prvSendFrontAndBackTest+0x316>
		{
			xErrorDetected = pdTRUE;
 8005ca6:	f243 2368 	movw	r3, #12904	; 0x3268
 8005caa:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005cae:	2201      	movs	r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 8005cb2:	f107 0310 	add.w	r3, r7, #16
 8005cb6:	6978      	ldr	r0, [r7, #20]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	f7fc ffeb 	bl	8002c98 <xQueueGenericSend>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d005      	beq.n	8005cd4 <prvSendFrontAndBackTest+0x338>
		{
			xErrorDetected = pdTRUE;
 8005cc8:	f243 2368 	movw	r3, #12904	; 0x3268
 8005ccc:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 8005cd4:	f107 0310 	add.w	r3, r7, #16
 8005cd8:	6978      	ldr	r0, [r7, #20]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f7fc ffda 	bl	8002c98 <xQueueGenericSend>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <prvSendFrontAndBackTest+0x35a>
		{
			xErrorDetected = pdTRUE;
 8005cea:	f243 2368 	movw	r3, #12904	; 0x3268
 8005cee:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 8005cf6:	2307      	movs	r3, #7
 8005cf8:	613b      	str	r3, [r7, #16]
 8005cfa:	e01d      	b.n	8005d38 <prvSendFrontAndBackTest+0x39c>
		{
			if( xQueueReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 8005cfc:	f107 030c 	add.w	r3, r7, #12
 8005d00:	6978      	ldr	r0, [r7, #20]
 8005d02:	4619      	mov	r1, r3
 8005d04:	2200      	movs	r2, #0
 8005d06:	2300      	movs	r3, #0
 8005d08:	f7fd f900 	bl	8002f0c <xQueueGenericReceive>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d005      	beq.n	8005d1e <prvSendFrontAndBackTest+0x382>
			{
				xErrorDetected = pdTRUE;
 8005d12:	f243 2368 	movw	r3, #12904	; 0x3268
 8005d16:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]
			}

			if( ulData != ulData2 )
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d005      	beq.n	8005d32 <prvSendFrontAndBackTest+0x396>
			{
				xErrorDetected = pdTRUE;
 8005d26:	f243 2368 	movw	r3, #12904	; 0x3268
 8005d2a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005d2e:	2201      	movs	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	3301      	adds	r3, #1
 8005d36:	613b      	str	r3, [r7, #16]
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	2b0b      	cmp	r3, #11
 8005d3c:	d9de      	bls.n	8005cfc <prvSendFrontAndBackTest+0x360>
			{
				xErrorDetected = pdTRUE;
			}
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8005d3e:	6978      	ldr	r0, [r7, #20]
 8005d40:	f7fd f9c2 	bl	80030c8 <uxQueueMessagesWaiting>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d005      	beq.n	8005d56 <prvSendFrontAndBackTest+0x3ba>
		{
			xErrorDetected = pdTRUE;
 8005d4a:	f243 2368 	movw	r3, #12904	; 0x3268
 8005d4e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005d52:	2201      	movs	r2, #1
 8005d54:	601a      	str	r2, [r3, #0]
		}

		ulLoopCounter++;
 8005d56:	f243 236c 	movw	r3, #12908	; 0x326c
 8005d5a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	f243 236c 	movw	r3, #12908	; 0x326c
 8005d66:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005d6a:	601a      	str	r2, [r3, #0]
	}
 8005d6c:	e61c      	b.n	80059a8 <prvSendFrontAndBackTest+0xc>
 8005d6e:	bf00      	nop

08005d70 <prvTakeTwoMutexesReturnInDifferentOrder>:
}
/*-----------------------------------------------------------*/

static void prvTakeTwoMutexesReturnInDifferentOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
	/* Take the mutex.  It should be available now. */
	if( xSemaphoreTake( xMutex, genqNO_BLOCK ) != pdPASS )
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	2200      	movs	r2, #0
 8005d80:	2300      	movs	r3, #0
 8005d82:	f7fd f8c3 	bl	8002f0c <xQueueGenericReceive>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d005      	beq.n	8005d98 <prvTakeTwoMutexesReturnInDifferentOrder+0x28>
	{
		xErrorDetected = pdTRUE;
 8005d8c:	f243 2368 	movw	r3, #12904	; 0x3268
 8005d90:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005d94:	2201      	movs	r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
	}

	/* Set the guarded variable to a known start value. */
	ulGuardedVariable = 0;
 8005d98:	f243 2374 	movw	r3, #12916	; 0x3274
 8005d9c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]

	/* This task's priority should be as per that assigned when the task was
	created. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 8005da4:	2000      	movs	r0, #0
 8005da6:	f7fb fd0d 	bl	80017c4 <uxTaskPriorityGet>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <prvTakeTwoMutexesReturnInDifferentOrder+0x4c>
	{
		xErrorDetected = pdTRUE;
 8005db0:	f243 2368 	movw	r3, #12904	; 0x3268
 8005db4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005db8:	2201      	movs	r2, #1
 8005dba:	601a      	str	r2, [r3, #0]
	}

	/* Now unsuspend the high priority task.  This will attempt to take the
	mutex, and block when it finds it cannot obtain it. */
	vTaskResume( xHighPriorityMutexTask );
 8005dbc:	f243 2378 	movw	r3, #12920	; 0x3278
 8005dc0:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fb fe90 	bl	8001aec <vTaskResume>
	}
	#endif /* INCLUDE_eTaskGetState */

	/* The priority of the high priority task should now have been inherited
	as by now it will have attempted to get the mutex. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8005dcc:	2000      	movs	r0, #0
 8005dce:	f7fb fcf9 	bl	80017c4 <uxTaskPriorityGet>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	d005      	beq.n	8005de4 <prvTakeTwoMutexesReturnInDifferentOrder+0x74>
	{
		xErrorDetected = pdTRUE;
 8005dd8:	f243 2368 	movw	r3, #12904	; 0x3268
 8005ddc:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005de0:	2201      	movs	r2, #1
 8005de2:	601a      	str	r2, [r3, #0]
	}

	/* Attempt to set the priority of this task to the test priority -
	between the	idle priority and the medium/high test priorities, but the
	actual priority should remain at the high priority. */
	vTaskPrioritySet( NULL, genqMUTEX_TEST_PRIORITY );
 8005de4:	2000      	movs	r0, #0
 8005de6:	2101      	movs	r1, #1
 8005de8:	f7fb fd08 	bl	80017fc <vTaskPrioritySet>
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8005dec:	2000      	movs	r0, #0
 8005dee:	f7fb fce9 	bl	80017c4 <uxTaskPriorityGet>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d005      	beq.n	8005e04 <prvTakeTwoMutexesReturnInDifferentOrder+0x94>
	{
		xErrorDetected = pdTRUE;
 8005df8:	f243 2368 	movw	r3, #12904	; 0x3268
 8005dfc:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005e00:	2201      	movs	r2, #1
 8005e02:	601a      	str	r2, [r3, #0]
	}

	/* Now unsuspend the medium priority task.  This should not run as the
	inherited priority of this task is above that of the medium priority
	task. */
	vTaskResume( xMediumPriorityMutexTask );
 8005e04:	f243 237c 	movw	r3, #12924	; 0x327c
 8005e08:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fb fe6c 	bl	8001aec <vTaskResume>

	/* If the medium priority task did run then it will have incremented the
	guarded variable. */
	if( ulGuardedVariable != 0 )
 8005e14:	f243 2374 	movw	r3, #12916	; 0x3274
 8005e18:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d005      	beq.n	8005e2e <prvTakeTwoMutexesReturnInDifferentOrder+0xbe>
	{
		xErrorDetected = pdTRUE;
 8005e22:	f243 2368 	movw	r3, #12904	; 0x3268
 8005e26:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]
	}

	/* Take the local mutex too, so two mutexes are now held. */
	if( xSemaphoreTake( xLocalMutex, genqNO_BLOCK ) != pdPASS )
 8005e2e:	6838      	ldr	r0, [r7, #0]
 8005e30:	2100      	movs	r1, #0
 8005e32:	2200      	movs	r2, #0
 8005e34:	2300      	movs	r3, #0
 8005e36:	f7fd f869 	bl	8002f0c <xQueueGenericReceive>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d005      	beq.n	8005e4c <prvTakeTwoMutexesReturnInDifferentOrder+0xdc>
	{
		xErrorDetected = pdTRUE;
 8005e40:	f243 2368 	movw	r3, #12904	; 0x3268
 8005e44:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005e48:	2201      	movs	r2, #1
 8005e4a:	601a      	str	r2, [r3, #0]
	yet be disinherited because the local mutex is still held.  This is a
	simplification to allow FreeRTOS to be integrated with middleware that
	attempts to hold multiple mutexes without bloating the code with complex
	algorithms.  It is possible that the high priority mutex task will
	execute as it shares a priority with this task. */
	if( xSemaphoreGive( xMutex ) != pdPASS )
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	2100      	movs	r1, #0
 8005e50:	2200      	movs	r2, #0
 8005e52:	2300      	movs	r3, #0
 8005e54:	f7fc ff20 	bl	8002c98 <xQueueGenericSend>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d005      	beq.n	8005e6a <prvTakeTwoMutexesReturnInDifferentOrder+0xfa>
	{
		xErrorDetected = pdTRUE;
 8005e5e:	f243 2368 	movw	r3, #12904	; 0x3268
 8005e62:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005e66:	2201      	movs	r2, #1
 8005e68:	601a      	str	r2, [r3, #0]
	#endif

	/* The guarded variable is only incremented by the medium priority task,
	which still should not have executed as this task should remain at the
	higher priority, ensure this is the case. */
	if( ulGuardedVariable != 0 )
 8005e6a:	f243 2374 	movw	r3, #12916	; 0x3274
 8005e6e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <prvTakeTwoMutexesReturnInDifferentOrder+0x114>
	{
		xErrorDetected = pdTRUE;
 8005e78:	f243 2368 	movw	r3, #12904	; 0x3268
 8005e7c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005e80:	2201      	movs	r2, #1
 8005e82:	601a      	str	r2, [r3, #0]
	}

	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8005e84:	2000      	movs	r0, #0
 8005e86:	f7fb fc9d 	bl	80017c4 <uxTaskPriorityGet>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d005      	beq.n	8005e9c <prvTakeTwoMutexesReturnInDifferentOrder+0x12c>
	{
		xErrorDetected = pdTRUE;
 8005e90:	f243 2368 	movw	r3, #12904	; 0x3268
 8005e94:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005e98:	2201      	movs	r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]
	This time the priority of this task should be disinherited back to the
	priority to which it was set while the mutex was held.  This means
	the medium priority task should execute and increment the guarded
	variable.   When this task next	runs both the high and medium priority
	tasks will have been suspended again. */
	if( xSemaphoreGive( xLocalMutex ) != pdPASS )
 8005e9c:	6838      	ldr	r0, [r7, #0]
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f7fc fef8 	bl	8002c98 <xQueueGenericSend>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d005      	beq.n	8005eba <prvTakeTwoMutexesReturnInDifferentOrder+0x14a>
	{
		xErrorDetected = pdTRUE;
 8005eae:	f243 2368 	movw	r3, #12904	; 0x3268
 8005eb2:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]
	#if configUSE_PREEMPTION == 0
		taskYIELD();
	#endif

	/* Check the guarded variable did indeed increment... */
	if( ulGuardedVariable != 1 )
 8005eba:	f243 2374 	movw	r3, #12916	; 0x3274
 8005ebe:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d005      	beq.n	8005ed4 <prvTakeTwoMutexesReturnInDifferentOrder+0x164>
	{
		xErrorDetected = pdTRUE;
 8005ec8:	f243 2368 	movw	r3, #12904	; 0x3268
 8005ecc:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]
	}

	/* ... and that the priority of this task has been disinherited to
	genqMUTEX_TEST_PRIORITY. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_TEST_PRIORITY )
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	f7fb fc75 	bl	80017c4 <uxTaskPriorityGet>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d005      	beq.n	8005eec <prvTakeTwoMutexesReturnInDifferentOrder+0x17c>
	{
		xErrorDetected = pdTRUE;
 8005ee0:	f243 2368 	movw	r3, #12904	; 0x3268
 8005ee4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005ee8:	2201      	movs	r2, #1
 8005eea:	601a      	str	r2, [r3, #0]
	}

	/* Set the priority of this task back to its original value, ready for
	the next loop around this test. */
	vTaskPrioritySet( NULL, genqMUTEX_LOW_PRIORITY );
 8005eec:	2000      	movs	r0, #0
 8005eee:	2100      	movs	r1, #0
 8005ef0:	f7fb fc84 	bl	80017fc <vTaskPrioritySet>
}
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop

08005efc <prvTakeTwoMutexesReturnInSameOrder>:
/*-----------------------------------------------------------*/

static void prvTakeTwoMutexesReturnInSameOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
	/* Take the mutex.  It should be available now. */
	if( xSemaphoreTake( xMutex, genqNO_BLOCK ) != pdPASS )
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	2100      	movs	r1, #0
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f7fc fffd 	bl	8002f0c <xQueueGenericReceive>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d005      	beq.n	8005f24 <prvTakeTwoMutexesReturnInSameOrder+0x28>
	{
		xErrorDetected = pdTRUE;
 8005f18:	f243 2368 	movw	r3, #12904	; 0x3268
 8005f1c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005f20:	2201      	movs	r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
	}

	/* Set the guarded variable to a known start value. */
	ulGuardedVariable = 0;
 8005f24:	f243 2374 	movw	r3, #12916	; 0x3274
 8005f28:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]

	/* This task's priority should be as per that assigned when the task was
	created. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 8005f30:	2000      	movs	r0, #0
 8005f32:	f7fb fc47 	bl	80017c4 <uxTaskPriorityGet>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d005      	beq.n	8005f48 <prvTakeTwoMutexesReturnInSameOrder+0x4c>
	{
		xErrorDetected = pdTRUE;
 8005f3c:	f243 2368 	movw	r3, #12904	; 0x3268
 8005f40:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005f44:	2201      	movs	r2, #1
 8005f46:	601a      	str	r2, [r3, #0]
	}

	/* Now unsuspend the high priority task.  This will attempt to take the
	mutex, and block when it finds it cannot obtain it. */
	vTaskResume( xHighPriorityMutexTask );
 8005f48:	f243 2378 	movw	r3, #12920	; 0x3278
 8005f4c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fb fdca 	bl	8001aec <vTaskResume>
	}
	#endif /* INCLUDE_eTaskGetState */

	/* The priority of the high priority task should now have been inherited
	as by now it will have attempted to get the mutex. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8005f58:	2000      	movs	r0, #0
 8005f5a:	f7fb fc33 	bl	80017c4 <uxTaskPriorityGet>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d005      	beq.n	8005f70 <prvTakeTwoMutexesReturnInSameOrder+0x74>
	{
		xErrorDetected = pdTRUE;
 8005f64:	f243 2368 	movw	r3, #12904	; 0x3268
 8005f68:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
	}

	/* Now unsuspend the medium priority task.  This should not run as the
	inherited priority of this task is above that of the medium priority
	task. */
	vTaskResume( xMediumPriorityMutexTask );
 8005f70:	f243 237c 	movw	r3, #12924	; 0x327c
 8005f74:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fb fdb6 	bl	8001aec <vTaskResume>

	/* If the medium priority task did run then it will have incremented the
	guarded variable. */
	if( ulGuardedVariable != 0 )
 8005f80:	f243 2374 	movw	r3, #12916	; 0x3274
 8005f84:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <prvTakeTwoMutexesReturnInSameOrder+0x9e>
	{
		xErrorDetected = pdTRUE;
 8005f8e:	f243 2368 	movw	r3, #12904	; 0x3268
 8005f92:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005f96:	2201      	movs	r2, #1
 8005f98:	601a      	str	r2, [r3, #0]
	}

	/* Take the local mutex too, so two mutexes are now held. */
	if( xSemaphoreTake( xLocalMutex, genqNO_BLOCK ) != pdPASS )
 8005f9a:	6838      	ldr	r0, [r7, #0]
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f7fc ffb3 	bl	8002f0c <xQueueGenericReceive>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d005      	beq.n	8005fb8 <prvTakeTwoMutexesReturnInSameOrder+0xbc>
	{
		xErrorDetected = pdTRUE;
 8005fac:	f243 2368 	movw	r3, #12904	; 0x3268
 8005fb0:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
	not	yet be disinherited because the shared mutex is still held.  This is a
	simplification to allow FreeRTOS to be integrated with middleware that
	attempts to hold multiple mutexes without bloating the code with complex
	algorithms.  It is possible that the high priority mutex task will
	execute as it shares a priority with this task. */
	if( xSemaphoreGive( xLocalMutex ) != pdPASS )
 8005fb8:	6838      	ldr	r0, [r7, #0]
 8005fba:	2100      	movs	r1, #0
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f7fc fe6a 	bl	8002c98 <xQueueGenericSend>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d005      	beq.n	8005fd6 <prvTakeTwoMutexesReturnInSameOrder+0xda>
	{
		xErrorDetected = pdTRUE;
 8005fca:	f243 2368 	movw	r3, #12904	; 0x3268
 8005fce:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]
	#endif

	/* The guarded variable is only incremented by the medium priority task,
	which still should not have executed as this task should remain at the
	higher priority, ensure this is the case. */
	if( ulGuardedVariable != 0 )
 8005fd6:	f243 2374 	movw	r3, #12916	; 0x3274
 8005fda:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d005      	beq.n	8005ff0 <prvTakeTwoMutexesReturnInSameOrder+0xf4>
	{
		xErrorDetected = pdTRUE;
 8005fe4:	f243 2368 	movw	r3, #12904	; 0x3268
 8005fe8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005fec:	2201      	movs	r2, #1
 8005fee:	601a      	str	r2, [r3, #0]
	}

	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	f7fb fbe7 	bl	80017c4 <uxTaskPriorityGet>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d005      	beq.n	8006008 <prvTakeTwoMutexesReturnInSameOrder+0x10c>
	{
		xErrorDetected = pdTRUE;
 8005ffc:	f243 2368 	movw	r3, #12904	; 0x3268
 8006000:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006004:	2201      	movs	r2, #1
 8006006:	601a      	str	r2, [r3, #0]
	/* Now also give back the shared mutex, taking the held count back to 0.
	This time the priority of this task should be disinherited back to the
	priority at which it was created.  This means the medium priority task
	should execute and increment the guarded variable.  When this task next runs
	both the high and medium priority tasks will have been suspended again. */
	if( xSemaphoreGive( xMutex ) != pdPASS )
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	2100      	movs	r1, #0
 800600c:	2200      	movs	r2, #0
 800600e:	2300      	movs	r3, #0
 8006010:	f7fc fe42 	bl	8002c98 <xQueueGenericSend>
 8006014:	4603      	mov	r3, r0
 8006016:	2b01      	cmp	r3, #1
 8006018:	d005      	beq.n	8006026 <prvTakeTwoMutexesReturnInSameOrder+0x12a>
	{
		xErrorDetected = pdTRUE;
 800601a:	f243 2368 	movw	r3, #12904	; 0x3268
 800601e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006022:	2201      	movs	r2, #1
 8006024:	601a      	str	r2, [r3, #0]
	#if configUSE_PREEMPTION == 0
		taskYIELD();
	#endif

	/* Check the guarded variable did indeed increment... */
	if( ulGuardedVariable != 1 )
 8006026:	f243 2374 	movw	r3, #12916	; 0x3274
 800602a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d005      	beq.n	8006040 <prvTakeTwoMutexesReturnInSameOrder+0x144>
	{
		xErrorDetected = pdTRUE;
 8006034:	f243 2368 	movw	r3, #12904	; 0x3268
 8006038:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800603c:	2201      	movs	r2, #1
 800603e:	601a      	str	r2, [r3, #0]
	}

	/* ... and that the priority of this task has been disinherited to
	genqMUTEX_LOW_PRIORITY. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 8006040:	2000      	movs	r0, #0
 8006042:	f7fb fbbf 	bl	80017c4 <uxTaskPriorityGet>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d005      	beq.n	8006058 <prvTakeTwoMutexesReturnInSameOrder+0x15c>
	{
		xErrorDetected = pdTRUE;
 800604c:	f243 2368 	movw	r3, #12904	; 0x3268
 8006050:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006054:	2201      	movs	r2, #1
 8006056:	601a      	str	r2, [r3, #0]
	}
}
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop

08006060 <prvLowPriorityMutexTask>:
/*-----------------------------------------------------------*/

static void prvLowPriorityMutexTask( void *pvParameters )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
SemaphoreHandle_t xMutex = ( SemaphoreHandle_t ) pvParameters, xLocalMutex;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	60fb      	str	r3, [r7, #12]
		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	/* The local mutex is used to check the 'mutexs held' count. */
	xLocalMutex = xSemaphoreCreateMutex();
 800606c:	2001      	movs	r0, #1
 800606e:	f7fc fd45 	bl	8002afc <xQueueCreateMutex>
 8006072:	60b8      	str	r0, [r7, #8]
	configASSERT( xLocalMutex );
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d102      	bne.n	8006080 <prvLowPriorityMutexTask+0x20>
 800607a:	f7fd fba1 	bl	80037c0 <ulPortSetInterruptMask>
 800607e:	e7fe      	b.n	800607e <prvLowPriorityMutexTask+0x1e>
	for( ;; )
	{
		/* The first tests exercise the priority inheritance when two mutexes
		are taken then returned in a different order to which they were
		taken. */
		prvTakeTwoMutexesReturnInDifferentOrder( xMutex, xLocalMutex );
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	68b9      	ldr	r1, [r7, #8]
 8006084:	f7ff fe74 	bl	8005d70 <prvTakeTwoMutexesReturnInDifferentOrder>

		/* Just to show this task is still running. */
		ulLoopCounter2++;
 8006088:	f243 2370 	movw	r3, #12912	; 0x3270
 800608c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	f243 2370 	movw	r3, #12912	; 0x3270
 8006098:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800609c:	601a      	str	r2, [r3, #0]
			taskYIELD();
		#endif

		/* The second tests exercise the priority inheritance when two mutexes
		are taken then returned in the same order in which they were taken. */
		prvTakeTwoMutexesReturnInSameOrder( xMutex, xLocalMutex );
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	68b9      	ldr	r1, [r7, #8]
 80060a2:	f7ff ff2b 	bl	8005efc <prvTakeTwoMutexesReturnInSameOrder>

		/* Just to show this task is still running. */
		ulLoopCounter2++;
 80060a6:	f243 2370 	movw	r3, #12912	; 0x3270
 80060aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	f243 2370 	movw	r3, #12912	; 0x3270
 80060b6:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80060ba:	601a      	str	r2, [r3, #0]

		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif
	}
 80060bc:	e7e0      	b.n	8006080 <prvLowPriorityMutexTask+0x20>
 80060be:	bf00      	nop

080060c0 <prvMediumPriorityMutexTask>:
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityMutexTask( void *pvParameters )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* The medium priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
 80060c8:	2000      	movs	r0, #0
 80060ca:	f7fb fc4d 	bl	8001968 <vTaskSuspend>

		/* When this task unsuspends all it does is increment the guarded
		variable, this is so the low priority task knows that it has
		executed. */
		ulGuardedVariable++;
 80060ce:	f243 2374 	movw	r3, #12916	; 0x3274
 80060d2:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	f243 2374 	movw	r3, #12916	; 0x3274
 80060de:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80060e2:	601a      	str	r2, [r3, #0]
	}
 80060e4:	e7f0      	b.n	80060c8 <prvMediumPriorityMutexTask+0x8>
 80060e6:	bf00      	nop

080060e8 <prvHighPriorityMutexTask>:
}
/*-----------------------------------------------------------*/

static void prvHighPriorityMutexTask( void *pvParameters )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
SemaphoreHandle_t xMutex = ( SemaphoreHandle_t ) pvParameters;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	60fb      	str	r3, [r7, #12]

	for( ;; )
	{
		/* The high priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
 80060f4:	2000      	movs	r0, #0
 80060f6:	f7fb fc37 	bl	8001968 <vTaskSuspend>

		/* When this task unsuspends all it does is attempt to obtain
		the mutex.  It should find the mutex is not available so a
		block time is specified. */
		if( xSemaphoreTake( xMutex, portMAX_DELAY ) != pdPASS )
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	2100      	movs	r1, #0
 80060fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006102:	2300      	movs	r3, #0
 8006104:	f7fc ff02 	bl	8002f0c <xQueueGenericReceive>
 8006108:	4603      	mov	r3, r0
 800610a:	2b01      	cmp	r3, #1
 800610c:	d005      	beq.n	800611a <prvHighPriorityMutexTask+0x32>
		{
			xErrorDetected = pdTRUE;
 800610e:	f243 2368 	movw	r3, #12904	; 0x3268
 8006112:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006116:	2201      	movs	r2, #1
 8006118:	601a      	str	r2, [r3, #0]
		}

		/* When the mutex is eventually obtained it is just given back before
		returning to suspend ready for the next cycle. */
		if( xSemaphoreGive( xMutex ) != pdPASS )
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	2100      	movs	r1, #0
 800611e:	2200      	movs	r2, #0
 8006120:	2300      	movs	r3, #0
 8006122:	f7fc fdb9 	bl	8002c98 <xQueueGenericSend>
 8006126:	4603      	mov	r3, r0
 8006128:	2b01      	cmp	r3, #1
 800612a:	d006      	beq.n	800613a <prvHighPriorityMutexTask+0x52>
		{
			xErrorDetected = pdTRUE;
 800612c:	f243 2368 	movw	r3, #12904	; 0x3268
 8006130:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006134:	2201      	movs	r2, #1
 8006136:	601a      	str	r2, [r3, #0]
		}
	}
 8006138:	e7dc      	b.n	80060f4 <prvHighPriorityMutexTask+0xc>
 800613a:	e7db      	b.n	80060f4 <prvHighPriorityMutexTask+0xc>

0800613c <xAreGenericQueueTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreGenericQueueTasksStillRunning( void )
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
static uint32_t ulLastLoopCounter = 0, ulLastLoopCounter2 = 0;

	/* If the demo task is still running then we expect the loop counters to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
 8006140:	f243 2384 	movw	r3, #12932	; 0x3284
 8006144:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	f243 236c 	movw	r3, #12908	; 0x326c
 800614e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d105      	bne.n	8006164 <xAreGenericQueueTasksStillRunning+0x28>
	{
		xErrorDetected = pdTRUE;
 8006158:	f243 2368 	movw	r3, #12904	; 0x3268
 800615c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006160:	2201      	movs	r2, #1
 8006162:	601a      	str	r2, [r3, #0]
	}

	if( ulLastLoopCounter2 == ulLoopCounter2 )
 8006164:	f243 2388 	movw	r3, #12936	; 0x3288
 8006168:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	f243 2370 	movw	r3, #12912	; 0x3270
 8006172:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d105      	bne.n	8006188 <xAreGenericQueueTasksStillRunning+0x4c>
	{
		xErrorDetected = pdTRUE;
 800617c:	f243 2368 	movw	r3, #12904	; 0x3268
 8006180:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006184:	2201      	movs	r2, #1
 8006186:	601a      	str	r2, [r3, #0]
	}

	ulLastLoopCounter = ulLoopCounter;
 8006188:	f243 236c 	movw	r3, #12908	; 0x326c
 800618c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	f243 2384 	movw	r3, #12932	; 0x3284
 8006196:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800619a:	601a      	str	r2, [r3, #0]
	ulLastLoopCounter2 = ulLoopCounter2;
 800619c:	f243 2370 	movw	r3, #12912	; 0x3270
 80061a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	f243 2388 	movw	r3, #12936	; 0x3288
 80061aa:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80061ae:	601a      	str	r2, [r3, #0]

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return ( BaseType_t ) !xErrorDetected;
 80061b0:	f243 2368 	movw	r3, #12904	; 0x3268
 80061b4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	bf14      	ite	ne
 80061be:	2300      	movne	r3, #0
 80061c0:	2301      	moveq	r3, #1
 80061c2:	b2db      	uxtb	r3, r3
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop

080061d0 <vStartIntegerMathTasks>:
static volatile BaseType_t xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( BaseType_t ) pdFALSE };

/*-----------------------------------------------------------*/

void vStartIntegerMathTasks( UBaseType_t uxPriority )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af04      	add	r7, sp, #16
 80061d6:	6078      	str	r0, [r7, #4]
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 80061d8:	2300      	movs	r3, #0
 80061da:	81fb      	strh	r3, [r7, #14]
 80061dc:	e01d      	b.n	800621a <vStartIntegerMathTasks+0x4a>
	{
		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( TaskHandle_t * ) NULL );
 80061de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80061e2:	009a      	lsls	r2, r3, #2
 80061e4:	f243 238c 	movw	r3, #12940	; 0x328c
 80061e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80061ec:	4413      	add	r3, r2
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	9200      	str	r2, [sp, #0]
 80061f2:	2200      	movs	r2, #0
 80061f4:	9201      	str	r2, [sp, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	9202      	str	r2, [sp, #8]
 80061fa:	2200      	movs	r2, #0
 80061fc:	9203      	str	r2, [sp, #12]
 80061fe:	f246 2029 	movw	r0, #25129	; 0x6229
 8006202:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006206:	f247 5138 	movw	r1, #30008	; 0x7538
 800620a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800620e:	2282      	movs	r2, #130	; 0x82
 8006210:	f7fb f8b0 	bl	8001374 <xTaskGenericCreate>

void vStartIntegerMathTasks( UBaseType_t uxPriority )
{
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 8006214:	89fb      	ldrh	r3, [r7, #14]
 8006216:	3301      	adds	r3, #1
 8006218:	81fb      	strh	r3, [r7, #14]
 800621a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800621e:	2b00      	cmp	r3, #0
 8006220:	dddd      	ble.n	80061de <vStartIntegerMathTasks+0xe>
	{
		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( TaskHandle_t * ) NULL );
	}
}
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <vCompeteingIntMathTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
/* These variables are all effectively set to constants so they are volatile to
ensure the compiler does not just get rid of them. */
volatile long lValue;
short sError = pdFALSE;
 8006230:	2300      	movs	r3, #0
 8006232:	82fb      	strh	r3, [r7, #22]
volatile BaseType_t *pxTaskHasExecuted;

	/* Set a pointer to the variable we are going to set to true each
	iteration.  This is also a good test of the parameter passing mechanism
	within each port. */
	pxTaskHasExecuted = ( volatile BaseType_t * ) pvParameters;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	613b      	str	r3, [r7, #16]
	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		/* Perform the calculation.  This will store partial value in
		registers, resulting in a good test of the context switch mechanism. */
		lValue = intgCONST1;
 8006238:	237b      	movs	r3, #123	; 0x7b
 800623a:	60fb      	str	r3, [r7, #12]
		lValue += intgCONST2;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f503 3365 	add.w	r3, r3, #234496	; 0x39400
 8006242:	3347      	adds	r3, #71	; 0x47
 8006244:	60fb      	str	r3, [r7, #12]
			taskYIELD();
		}
		#endif

		/* Finish off the calculation. */
		lValue *= intgCONST3;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	461a      	mov	r2, r3
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	60fb      	str	r3, [r7, #12]
		lValue /= intgCONST4;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f242 4293 	movw	r2, #9363	; 0x2493
 8006256:	f2c9 2249 	movt	r2, #37449	; 0x9249
 800625a:	fb82 1203 	smull	r1, r2, r2, r3
 800625e:	441a      	add	r2, r3
 8006260:	1092      	asrs	r2, r2, #2
 8006262:	17db      	asrs	r3, r3, #31
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	60fb      	str	r3, [r7, #12]

		/* If the calculation is found to be incorrect we stop setting the 
		TaskHasExecuted variable so the check task can see an error has 
		occurred. */
		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised out. */
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	f247 731b 	movw	r3, #30491	; 0x771b
 800626e:	f6cf 73fe 	movt	r3, #65534	; 0xfffe
 8006272:	429a      	cmp	r2, r3
 8006274:	d001      	beq.n	800627a <vCompeteingIntMathTask+0x52>
		{
			sError = pdTRUE;
 8006276:	2301      	movs	r3, #1
 8006278:	82fb      	strh	r3, [r7, #22]
		}

		if( sError == pdFALSE )
 800627a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d107      	bne.n	8006292 <vCompeteingIntMathTask+0x6a>
		{
			/* We have not encountered any errors, so set the flag that show
			we are still executing.  This will be periodically cleared by
			the check task. */
			portENTER_CRITICAL();
 8006282:	f7fd fa53 	bl	800372c <vPortEnterCritical>
				*pxTaskHasExecuted = pdTRUE;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	2201      	movs	r2, #1
 800628a:	601a      	str	r2, [r3, #0]
			portEXIT_CRITICAL();
 800628c:	f7fd fa76 	bl	800377c <vPortExitCritical>
		#if configUSE_PREEMPTION == 0
		{
			taskYIELD();
		}
		#endif
	}
 8006290:	e7d2      	b.n	8006238 <vCompeteingIntMathTask+0x10>
 8006292:	e7d1      	b.n	8006238 <vCompeteingIntMathTask+0x10>

08006294 <xAreIntegerMathsTaskStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreIntegerMathsTaskStillRunning( void )
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
BaseType_t xReturn = pdTRUE;
 800629a:	2301      	movs	r3, #1
 800629c:	607b      	str	r3, [r7, #4]
short sTask;

	/* Check the maths tasks are still running by ensuring their check variables 
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 800629e:	2300      	movs	r3, #0
 80062a0:	807b      	strh	r3, [r7, #2]
 80062a2:	e017      	b.n	80062d4 <xAreIntegerMathsTaskStillRunning+0x40>
	{
		if( xTaskCheck[ sTask ] == pdFALSE )
 80062a4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80062a8:	f243 238c 	movw	r3, #12940	; 0x328c
 80062ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80062b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <xAreIntegerMathsTaskStillRunning+0x28>
		{
			/* The check has not incremented so an error exists. */
			xReturn = pdFALSE;
 80062b8:	2300      	movs	r3, #0
 80062ba:	607b      	str	r3, [r7, #4]
		}

		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
 80062bc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80062c0:	f243 238c 	movw	r3, #12940	; 0x328c
 80062c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80062c8:	2100      	movs	r1, #0
 80062ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
BaseType_t xReturn = pdTRUE;
short sTask;

	/* Check the maths tasks are still running by ensuring their check variables 
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 80062ce:	887b      	ldrh	r3, [r7, #2]
 80062d0:	3301      	adds	r3, #1
 80062d2:	807b      	strh	r3, [r7, #2]
 80062d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	dde3      	ble.n	80062a4 <xAreIntegerMathsTaskStillRunning+0x10>
		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
	}

	return xReturn;
 80062dc:	687b      	ldr	r3, [r7, #4]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop

080062ec <vStartPolledQueueTasks>:
static volatile BaseType_t xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCount = pollqINITIAL_VALUE;

/*-----------------------------------------------------------*/

void vStartPolledQueueTasks( UBaseType_t uxPriority )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af04      	add	r7, sp, #16
 80062f2:	6078      	str	r0, [r7, #4]
static QueueHandle_t xPolledQueue;

	/* Create the queue used by the producer and consumer. */
	xPolledQueue = xQueueCreate( pollqQUEUE_SIZE, ( UBaseType_t ) sizeof( uint16_t ) );
 80062f4:	200a      	movs	r0, #10
 80062f6:	2102      	movs	r1, #2
 80062f8:	2200      	movs	r2, #0
 80062fa:	f7fc fbbd 	bl	8002a78 <xQueueGenericCreate>
 80062fe:	4602      	mov	r2, r0
 8006300:	f243 2398 	movw	r3, #12952	; 0x3298
 8006304:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006308:	601a      	str	r2, [r3, #0]
	in use.  The queue registry is provided as a means for kernel aware 
	debuggers to locate queues and has no purpose if a kernel aware debugger
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
	defined to be less than 1. */
	vQueueAddToRegistry( xPolledQueue, "Poll_Test_Queue" );
 800630a:	f243 2398 	movw	r3, #12952	; 0x3298
 800630e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4618      	mov	r0, r3
 8006316:	f247 5140 	movw	r1, #30016	; 0x7540
 800631a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800631e:	f7fc fff7 	bl	8003310 <vQueueAddToRegistry>

	/* Spawn the producer and consumer. */
	xTaskCreate( vPolledQueueConsumer, "QConsNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	2300      	movs	r3, #0
 8006328:	9301      	str	r3, [sp, #4]
 800632a:	2300      	movs	r3, #0
 800632c:	9302      	str	r3, [sp, #8]
 800632e:	2300      	movs	r3, #0
 8006330:	9303      	str	r3, [sp, #12]
 8006332:	f246 30fd 	movw	r0, #25597	; 0x63fd
 8006336:	f6c0 0000 	movt	r0, #2048	; 0x800
 800633a:	f247 5150 	movw	r1, #30032	; 0x7550
 800633e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8006342:	2282      	movs	r2, #130	; 0x82
 8006344:	f243 2398 	movw	r3, #12952	; 0x3298
 8006348:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800634c:	f7fb f812 	bl	8001374 <xTaskGenericCreate>
	xTaskCreate( vPolledQueueProducer, "QProdNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	2300      	movs	r3, #0
 8006356:	9301      	str	r3, [sp, #4]
 8006358:	2300      	movs	r3, #0
 800635a:	9302      	str	r3, [sp, #8]
 800635c:	2300      	movs	r3, #0
 800635e:	9303      	str	r3, [sp, #12]
 8006360:	f246 3085 	movw	r0, #25477	; 0x6385
 8006364:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006368:	f247 5158 	movw	r1, #30040	; 0x7558
 800636c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8006370:	2282      	movs	r2, #130	; 0x82
 8006372:	f243 2398 	movw	r3, #12952	; 0x3298
 8006376:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800637a:	f7fa fffb 	bl	8001374 <xTaskGenericCreate>
}
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <vPolledQueueProducer>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueProducer, pvParameters )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
uint16_t usValue = ( uint16_t ) 0;
 800638c:	2300      	movs	r3, #0
 800638e:	81fb      	strh	r3, [r7, #14]
BaseType_t xError = pdFALSE, xLoop;
 8006390:	2300      	movs	r3, #0
 8006392:	617b      	str	r3, [r7, #20]

	for( ;; )
	{		
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
 8006394:	2300      	movs	r3, #0
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	e028      	b.n	80063ec <vPolledQueueProducer+0x68>
		{
			/* Send an incrementing number on the queue without blocking. */
			if( xQueueSend( *( ( QueueHandle_t * ) pvParameters ), ( void * ) &usValue, pollqNO_DELAY ) != pdPASS )
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	f107 030e 	add.w	r3, r7, #14
 80063a2:	4610      	mov	r0, r2
 80063a4:	4619      	mov	r1, r3
 80063a6:	2200      	movs	r2, #0
 80063a8:	2300      	movs	r3, #0
 80063aa:	f7fc fc75 	bl	8002c98 <xQueueGenericSend>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d002      	beq.n	80063ba <vPolledQueueProducer+0x36>
			{
				/* We should never find the queue full so if we get here there
				has been an error. */
				xError = pdTRUE;
 80063b4:	2301      	movs	r3, #1
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	e015      	b.n	80063e6 <vPolledQueueProducer+0x62>
			}
			else
			{
				if( xError == pdFALSE )
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10e      	bne.n	80063de <vPolledQueueProducer+0x5a>
				{
					/* If an error has ever been recorded we stop incrementing the
					check variable. */
					portENTER_CRITICAL();
 80063c0:	f7fd f9b4 	bl	800372c <vPortEnterCritical>
						xPollingProducerCount++;
 80063c4:	f243 2394 	movw	r3, #12948	; 0x3294
 80063c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	f243 2394 	movw	r3, #12948	; 0x3294
 80063d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80063d8:	601a      	str	r2, [r3, #0]
					portEXIT_CRITICAL();
 80063da:	f7fd f9cf 	bl	800377c <vPortExitCritical>
				}

				/* Update the value we are going to post next time around. */
				usValue++;
 80063de:	89fb      	ldrh	r3, [r7, #14]
 80063e0:	3301      	adds	r3, #1
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	81fb      	strh	r3, [r7, #14]
uint16_t usValue = ( uint16_t ) 0;
BaseType_t xError = pdFALSE, xLoop;

	for( ;; )
	{		
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	3301      	adds	r3, #1
 80063ea:	613b      	str	r3, [r7, #16]
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	ddd3      	ble.n	800639a <vPolledQueueProducer+0x16>
			}
		}

		/* Wait before we start posting again to ensure the consumer runs and
		empties the queue. */
		vTaskDelay( pollqPRODUCER_DELAY );
 80063f2:	20c8      	movs	r0, #200	; 0xc8
 80063f4:	f7fb f99a 	bl	800172c <vTaskDelay>
	}
 80063f8:	e7cc      	b.n	8006394 <vPolledQueueProducer+0x10>
 80063fa:	bf00      	nop

080063fc <vPolledQueueConsumer>:
}  /*lint !e818 Function prototype must conform to API. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueConsumer, pvParameters )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
uint16_t usData, usExpectedValue = ( uint16_t ) 0;
 8006404:	2300      	movs	r3, #0
 8006406:	82fb      	strh	r3, [r7, #22]
BaseType_t xError = pdFALSE;
 8006408:	2300      	movs	r3, #0
 800640a:	613b      	str	r3, [r7, #16]

	for( ;; )
	{		
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
 800640c:	e02a      	b.n	8006464 <vPolledQueueConsumer+0x68>
		{
			if( xQueueReceive( *( ( QueueHandle_t * ) pvParameters ), &usData, pollqNO_DELAY ) == pdPASS )
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	f107 030e 	add.w	r3, r7, #14
 8006416:	4610      	mov	r0, r2
 8006418:	4619      	mov	r1, r3
 800641a:	2200      	movs	r2, #0
 800641c:	2300      	movs	r3, #0
 800641e:	f7fc fd75 	bl	8002f0c <xQueueGenericReceive>
 8006422:	4603      	mov	r3, r0
 8006424:	2b01      	cmp	r3, #1
 8006426:	d11d      	bne.n	8006464 <vPolledQueueConsumer+0x68>
			{
				if( usData != usExpectedValue )
 8006428:	89fb      	ldrh	r3, [r7, #14]
 800642a:	8afa      	ldrh	r2, [r7, #22]
 800642c:	429a      	cmp	r2, r3
 800642e:	d004      	beq.n	800643a <vPolledQueueConsumer+0x3e>
				{
					/* This is not what we expected to receive so an error has
					occurred. */
					xError = pdTRUE;
 8006430:	2301      	movs	r3, #1
 8006432:	613b      	str	r3, [r7, #16]

					/* Catch-up to the value we received so our next expected
					value should again be correct. */
					usExpectedValue = usData;
 8006434:	89fb      	ldrh	r3, [r7, #14]
 8006436:	82fb      	strh	r3, [r7, #22]
 8006438:	e011      	b.n	800645e <vPolledQueueConsumer+0x62>
				}
				else
				{
					if( xError == pdFALSE )
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10e      	bne.n	800645e <vPolledQueueConsumer+0x62>
					{
						/* Only increment the check variable if no errors have
						occurred. */
						portENTER_CRITICAL();
 8006440:	f7fd f974 	bl	800372c <vPortEnterCritical>
							xPollingConsumerCount++;
 8006444:	f243 2390 	movw	r3, #12944	; 0x3290
 8006448:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	f243 2390 	movw	r3, #12944	; 0x3290
 8006454:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006458:	601a      	str	r2, [r3, #0]
						portEXIT_CRITICAL();
 800645a:	f7fd f98f 	bl	800377c <vPortExitCritical>
					}
				}

				/* Next time round we would expect the number to be one higher. */
				usExpectedValue++;
 800645e:	8afb      	ldrh	r3, [r7, #22]
 8006460:	3301      	adds	r3, #1
 8006462:	82fb      	strh	r3, [r7, #22]
BaseType_t xError = pdFALSE;

	for( ;; )
	{		
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4618      	mov	r0, r3
 800646a:	f7fc fe2d 	bl	80030c8 <uxQueueMessagesWaiting>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1cc      	bne.n	800640e <vPolledQueueConsumer+0x12>
			}
		}

		/* Now the queue is empty we block, allowing the producer to place more
		items in the queue. */
		vTaskDelay( pollqCONSUMER_DELAY );
 8006474:	20b4      	movs	r0, #180	; 0xb4
 8006476:	f7fb f959 	bl	800172c <vTaskDelay>
	}
 800647a:	bf00      	nop
BaseType_t xError = pdFALSE;

	for( ;; )
	{		
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
 800647c:	e7f2      	b.n	8006464 <vPolledQueueConsumer+0x68>
 800647e:	bf00      	nop

08006480 <xArePollingQueuesStillRunning>:
} /*lint !e818 Function prototype must conform to API. */
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running with no errors. */
BaseType_t xArePollingQueuesStillRunning( void )
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0

	/* Check both the consumer and producer poll count to check they have both
	been changed since out last trip round.  We do not need a critical section
	around the check variables as this is called from a higher priority than
	the other tasks that access the same variables. */
	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
 8006486:	f243 2390 	movw	r3, #12944	; 0x3290
 800648a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d006      	beq.n	80064a2 <xArePollingQueuesStillRunning+0x22>
		( xPollingProducerCount == pollqINITIAL_VALUE )
 8006494:	f243 2394 	movw	r3, #12948	; 0x3294
 8006498:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800649c:	681b      	ldr	r3, [r3, #0]

	/* Check both the consumer and producer poll count to check they have both
	been changed since out last trip round.  We do not need a critical section
	around the check variables as this is called from a higher priority than
	the other tasks that access the same variables. */
	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d102      	bne.n	80064a8 <xArePollingQueuesStillRunning+0x28>
		( xPollingProducerCount == pollqINITIAL_VALUE )
	  )
	{
		xReturn = pdFALSE;
 80064a2:	2300      	movs	r3, #0
 80064a4:	607b      	str	r3, [r7, #4]
 80064a6:	e001      	b.n	80064ac <xArePollingQueuesStillRunning+0x2c>
	}
	else
	{
		xReturn = pdTRUE;
 80064a8:	2301      	movs	r3, #1
 80064aa:	607b      	str	r3, [r7, #4]
	}

	/* Set the check variables back down so we know if they have been
	incremented the next time around. */
	xPollingConsumerCount = pollqINITIAL_VALUE;
 80064ac:	f243 2390 	movw	r3, #12944	; 0x3290
 80064b0:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]
	xPollingProducerCount = pollqINITIAL_VALUE;
 80064b8:	f243 2394 	movw	r3, #12948	; 0x3294
 80064bc:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80064c0:	2200      	movs	r2, #0
 80064c2:	601a      	str	r2, [r3, #0]

	return xReturn;
 80064c4:	687b      	ldr	r3, [r7, #4]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop

080064d4 <vStartRecursiveMutexTasks>:
static TaskHandle_t xControllingTaskHandle, xBlockingTaskHandle;

/*-----------------------------------------------------------*/

void vStartRecursiveMutexTasks( void )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af04      	add	r7, sp, #16
	/* Just creates the mutex and the three tasks. */

	xMutex = xSemaphoreCreateRecursiveMutex();
 80064da:	2004      	movs	r0, #4
 80064dc:	f7fc fb0e 	bl	8002afc <xQueueCreateMutex>
 80064e0:	4602      	mov	r2, r0
 80064e2:	f243 239c 	movw	r3, #12956	; 0x329c
 80064e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80064ea:	601a      	str	r2, [r3, #0]
	in use.  The registry is provided as a means for kernel aware
	debuggers to locate mutex and has no purpose if a kernel aware debugger
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
	defined to be less than 1. */
	vQueueAddToRegistry( ( QueueHandle_t ) xMutex, "Recursive_Mutex" );
 80064ec:	f243 239c 	movw	r3, #12956	; 0x329c
 80064f0:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f247 5160 	movw	r1, #30048	; 0x7560
 80064fc:	f6c0 0100 	movt	r1, #2048	; 0x800
 8006500:	f7fc ff06 	bl	8003310 <vQueueAddToRegistry>


	if( xMutex != NULL )
 8006504:	f243 239c 	movw	r3, #12956	; 0x329c
 8006508:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d041      	beq.n	8006596 <vStartRecursiveMutexTasks+0xc2>
	{
		xTaskCreate( prvRecursiveMutexControllingTask, "Rec1", configMINIMAL_STACK_SIZE, NULL, recmuCONTROLLING_TASK_PRIORITY, &xControllingTaskHandle );
 8006512:	2302      	movs	r3, #2
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	f243 23b8 	movw	r3, #12984	; 0x32b8
 800651a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	2300      	movs	r3, #0
 8006522:	9302      	str	r3, [sp, #8]
 8006524:	2300      	movs	r3, #0
 8006526:	9303      	str	r3, [sp, #12]
 8006528:	f246 509d 	movw	r0, #26013	; 0x659d
 800652c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006530:	f247 5170 	movw	r1, #30064	; 0x7570
 8006534:	f6c0 0100 	movt	r1, #2048	; 0x800
 8006538:	2282      	movs	r2, #130	; 0x82
 800653a:	2300      	movs	r3, #0
 800653c:	f7fa ff1a 	bl	8001374 <xTaskGenericCreate>
        xTaskCreate( prvRecursiveMutexBlockingTask, "Rec2", configMINIMAL_STACK_SIZE, NULL, recmuBLOCKING_TASK_PRIORITY, &xBlockingTaskHandle );
 8006540:	2301      	movs	r3, #1
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	f243 23bc 	movw	r3, #12988	; 0x32bc
 8006548:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800654c:	9301      	str	r3, [sp, #4]
 800654e:	2300      	movs	r3, #0
 8006550:	9302      	str	r3, [sp, #8]
 8006552:	2300      	movs	r3, #0
 8006554:	9303      	str	r3, [sp, #12]
 8006556:	f246 6095 	movw	r0, #26261	; 0x6695
 800655a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800655e:	f247 5178 	movw	r1, #30072	; 0x7578
 8006562:	f6c0 0100 	movt	r1, #2048	; 0x800
 8006566:	2282      	movs	r2, #130	; 0x82
 8006568:	2300      	movs	r3, #0
 800656a:	f7fa ff03 	bl	8001374 <xTaskGenericCreate>
        xTaskCreate( prvRecursiveMutexPollingTask, "Rec3", configMINIMAL_STACK_SIZE, NULL, recmuPOLLING_TASK_PRIORITY, NULL );
 800656e:	2300      	movs	r3, #0
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	2300      	movs	r3, #0
 8006574:	9301      	str	r3, [sp, #4]
 8006576:	2300      	movs	r3, #0
 8006578:	9302      	str	r3, [sp, #8]
 800657a:	2300      	movs	r3, #0
 800657c:	9303      	str	r3, [sp, #12]
 800657e:	f246 7061 	movw	r0, #26465	; 0x6761
 8006582:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006586:	f247 5180 	movw	r1, #30080	; 0x7580
 800658a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800658e:	2282      	movs	r2, #130	; 0x82
 8006590:	2300      	movs	r3, #0
 8006592:	f7fa feef 	bl	8001374 <xTaskGenericCreate>
	}
}
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop

0800659c <prvRecursiveMutexControllingTask>:
/*-----------------------------------------------------------*/

static void prvRecursiveMutexControllingTask( void *pvParameters )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
	{
		/* Should not be able to 'give' the mutex, as we have not yet 'taken'
		it.   The first time through, the mutex will not have been used yet,
		subsequent times through, at this point the mutex will be held by the
		polling task. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
 80065a4:	f243 239c 	movw	r3, #12956	; 0x329c
 80065a8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fc faec 	bl	8002b8c <xQueueGiveMutexRecursive>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d105      	bne.n	80065c6 <prvRecursiveMutexControllingTask+0x2a>
		{
			xErrorOccurred = pdTRUE;
 80065ba:	f243 23a0 	movw	r3, #12960	; 0x32a0
 80065be:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80065c2:	2201      	movs	r2, #1
 80065c4:	601a      	str	r2, [r3, #0]
		}

		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	e017      	b.n	80065fc <prvRecursiveMutexControllingTask+0x60>
			at this point and this Take will cause the polling task to inherit
			the priority of this task.  In this case the block time must be
			long enough to ensure the polling task will execute again before the
			block time expires.  If the block time does expire then the error
			flag will be set here. */
			if( xSemaphoreTakeRecursive( xMutex, recmuEIGHT_TICK_DELAY ) != pdPASS )
 80065cc:	f243 239c 	movw	r3, #12956	; 0x329c
 80065d0:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4618      	mov	r0, r3
 80065d8:	2108      	movs	r1, #8
 80065da:	f7fc fb03 	bl	8002be4 <xQueueTakeMutexRecursive>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d005      	beq.n	80065f0 <prvRecursiveMutexControllingTask+0x54>
			{
				xErrorOccurred = pdTRUE;
 80065e4:	f243 23a0 	movw	r3, #12960	; 0x32a0
 80065e8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80065ec:	2201      	movs	r2, #1
 80065ee:	601a      	str	r2, [r3, #0]

			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute to ensure they either block
			(where a block time is specified) or return an error (where no
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
 80065f0:	2014      	movs	r0, #20
 80065f2:	f7fb f89b 	bl	800172c <vTaskDelay>
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
		{
			xErrorOccurred = pdTRUE;
		}

		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3301      	adds	r3, #1
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b09      	cmp	r3, #9
 8006600:	d9e4      	bls.n	80065cc <prvRecursiveMutexControllingTask+0x30>
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
		}

		/* For each time we took the mutex, give it back. */
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	e016      	b.n	8006636 <prvRecursiveMutexControllingTask+0x9a>
		{
			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute. */
			vTaskDelay( recmuSHORT_DELAY );
 8006608:	2014      	movs	r0, #20
 800660a:	f7fb f88f 	bl	800172c <vTaskDelay>
			/* We should now be able to give the mutex as many times as we
			took it.  When the mutex is available again the Blocking task
			should be unblocked but not run because it has a lower priority
			than this task.  The polling task should also not run at this point
			as it too has a lower priority than this task. */
			if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 800660e:	f243 239c 	movw	r3, #12956	; 0x329c
 8006612:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4618      	mov	r0, r3
 800661a:	f7fc fab7 	bl	8002b8c <xQueueGiveMutexRecursive>
 800661e:	4603      	mov	r3, r0
 8006620:	2b01      	cmp	r3, #1
 8006622:	d005      	beq.n	8006630 <prvRecursiveMutexControllingTask+0x94>
			{
				xErrorOccurred = pdTRUE;
 8006624:	f243 23a0 	movw	r3, #12960	; 0x32a0
 8006628:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800662c:	2201      	movs	r2, #1
 800662e:	601a      	str	r2, [r3, #0]
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
		}

		/* For each time we took the mutex, give it back. */
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3301      	adds	r3, #1
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2b09      	cmp	r3, #9
 800663a:	d9e5      	bls.n	8006608 <prvRecursiveMutexControllingTask+0x6c>
			}
		}

		/* Having given it back the same number of times as it was taken, we
		should no longer be the mutex owner, so the next give should fail. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
 800663c:	f243 239c 	movw	r3, #12956	; 0x329c
 8006640:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4618      	mov	r0, r3
 8006648:	f7fc faa0 	bl	8002b8c <xQueueGiveMutexRecursive>
 800664c:	4603      	mov	r3, r0
 800664e:	2b01      	cmp	r3, #1
 8006650:	d105      	bne.n	800665e <prvRecursiveMutexControllingTask+0xc2>
		{
			xErrorOccurred = pdTRUE;
 8006652:	f243 23a0 	movw	r3, #12960	; 0x32a0
 8006656:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800665a:	2201      	movs	r2, #1
 800665c:	601a      	str	r2, [r3, #0]
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxControllingCycles++;
 800665e:	f243 23ac 	movw	r3, #12972	; 0x32ac
 8006662:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	1c5a      	adds	r2, r3, #1
 800666a:	f243 23ac 	movw	r3, #12972	; 0x32ac
 800666e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006672:	601a      	str	r2, [r3, #0]

		/* Suspend ourselves so the blocking task can execute. */
		xControllingIsSuspended = pdTRUE;
 8006674:	f243 23a4 	movw	r3, #12964	; 0x32a4
 8006678:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800667c:	2201      	movs	r2, #1
 800667e:	601a      	str	r2, [r3, #0]
		vTaskSuspend( NULL );
 8006680:	2000      	movs	r0, #0
 8006682:	f7fb f971 	bl	8001968 <vTaskSuspend>
		xControllingIsSuspended = pdFALSE;
 8006686:	f243 23a4 	movw	r3, #12964	; 0x32a4
 800668a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]
	}
 8006692:	e787      	b.n	80065a4 <prvRecursiveMutexControllingTask+0x8>

08006694 <prvRecursiveMutexBlockingTask>:
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexBlockingTask( void *pvParameters )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
		this call should block until the controlling task has given up the
		mutex, and not actually execute	past this call until the controlling
		task is suspended.  portMAX_DELAY - 1 is used instead of portMAX_DELAY
		to ensure the task's state is reported as Blocked and not Suspended in
		a later call to configASSERT() (within the polling task). */
		if( xSemaphoreTakeRecursive( xMutex, ( portMAX_DELAY - 1 ) ) == pdPASS )
 800669c:	f243 239c 	movw	r3, #12956	; 0x329c
 80066a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f06f 0101 	mvn.w	r1, #1
 80066ac:	f7fc fa9a 	bl	8002be4 <xQueueTakeMutexRecursive>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d12e      	bne.n	8006714 <prvRecursiveMutexBlockingTask+0x80>
		{
			if( xControllingIsSuspended != pdTRUE )
 80066b6:	f243 23a4 	movw	r3, #12964	; 0x32a4
 80066ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d006      	beq.n	80066d2 <prvRecursiveMutexBlockingTask+0x3e>
			{
				/* Did not expect to execute until the controlling task was
				suspended. */
				xErrorOccurred = pdTRUE;
 80066c4:	f243 23a0 	movw	r3, #12960	; 0x32a0
 80066c8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80066cc:	2201      	movs	r2, #1
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	e026      	b.n	8006720 <prvRecursiveMutexBlockingTask+0x8c>
			}
			else
			{
				/* Give the mutex back before suspending ourselves to allow
				the polling task to obtain the mutex. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 80066d2:	f243 239c 	movw	r3, #12956	; 0x329c
 80066d6:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fc fa55 	bl	8002b8c <xQueueGiveMutexRecursive>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d005      	beq.n	80066f4 <prvRecursiveMutexBlockingTask+0x60>
				{
					xErrorOccurred = pdTRUE;
 80066e8:	f243 23a0 	movw	r3, #12960	; 0x32a0
 80066ec:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80066f0:	2201      	movs	r2, #1
 80066f2:	601a      	str	r2, [r3, #0]
				}

				xBlockingIsSuspended = pdTRUE;
 80066f4:	f243 23a8 	movw	r3, #12968	; 0x32a8
 80066f8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80066fc:	2201      	movs	r2, #1
 80066fe:	601a      	str	r2, [r3, #0]
				vTaskSuspend( NULL );
 8006700:	2000      	movs	r0, #0
 8006702:	f7fb f931 	bl	8001968 <vTaskSuspend>
				xBlockingIsSuspended = pdFALSE;
 8006706:	f243 23a8 	movw	r3, #12968	; 0x32a8
 800670a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	e005      	b.n	8006720 <prvRecursiveMutexBlockingTask+0x8c>
		}
		else
		{
			/* We should not leave the xSemaphoreTakeRecursive() function
			until the mutex was obtained. */
			xErrorOccurred = pdTRUE;
 8006714:	f243 23a0 	movw	r3, #12960	; 0x32a0
 8006718:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800671c:	2201      	movs	r2, #1
 800671e:	601a      	str	r2, [r3, #0]
		}

		/* The controlling and blocking tasks should be in lock step. */
		if( uxControllingCycles != ( uxBlockingCycles + 1 ) )
 8006720:	f243 23b0 	movw	r3, #12976	; 0x32b0
 8006724:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	f243 23ac 	movw	r3, #12972	; 0x32ac
 8006730:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	429a      	cmp	r2, r3
 8006738:	d005      	beq.n	8006746 <prvRecursiveMutexBlockingTask+0xb2>
		{
			xErrorOccurred = pdTRUE;
 800673a:	f243 23a0 	movw	r3, #12960	; 0x32a0
 800673e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006742:	2201      	movs	r2, #1
 8006744:	601a      	str	r2, [r3, #0]
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxBlockingCycles++;
 8006746:	f243 23b0 	movw	r3, #12976	; 0x32b0
 800674a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	f243 23b0 	movw	r3, #12976	; 0x32b0
 8006756:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800675a:	601a      	str	r2, [r3, #0]
	}
 800675c:	e79e      	b.n	800669c <prvRecursiveMutexBlockingTask+0x8>
 800675e:	bf00      	nop

08006760 <prvRecursiveMutexPollingTask>:
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexPollingTask( void *pvParameters )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
		/* Keep attempting to obtain the mutex.  We should only obtain it when
		the blocking task has suspended itself, which in turn should only
		happen when the controlling task is also suspended. */
		if( xSemaphoreTakeRecursive( xMutex, recmuNO_DELAY ) == pdPASS )
 8006768:	f243 239c 	movw	r3, #12956	; 0x329c
 800676c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4618      	mov	r0, r3
 8006774:	2100      	movs	r1, #0
 8006776:	f7fc fa35 	bl	8002be4 <xQueueTakeMutexRecursive>
 800677a:	4603      	mov	r3, r0
 800677c:	2b01      	cmp	r3, #1
 800677e:	d166      	bne.n	800684e <prvRecursiveMutexPollingTask+0xee>
				configASSERT( eTaskGetState( xBlockingTaskHandle ) == eSuspended );
			}
			#endif /* INCLUDE_eTaskGetState */

			/* Is the blocking task suspended? */
			if( ( xBlockingIsSuspended != pdTRUE ) || ( xControllingIsSuspended != pdTRUE ) )
 8006780:	f243 23a8 	movw	r3, #12968	; 0x32a8
 8006784:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d106      	bne.n	800679c <prvRecursiveMutexPollingTask+0x3c>
 800678e:	f243 23a4 	movw	r3, #12964	; 0x32a4
 8006792:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d006      	beq.n	80067aa <prvRecursiveMutexPollingTask+0x4a>
			{
				xErrorOccurred = pdTRUE;
 800679c:	f243 23a0 	movw	r3, #12960	; 0x32a0
 80067a0:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80067a4:	2201      	movs	r2, #1
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	e051      	b.n	800684e <prvRecursiveMutexPollingTask+0xee>
			}
			else
			{
				/* Keep count of the number of cycles this task has performed
				so a stall can be detected. */
				uxPollingCycles++;
 80067aa:	f243 23b4 	movw	r3, #12980	; 0x32b4
 80067ae:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	f243 23b4 	movw	r3, #12980	; 0x32b4
 80067ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80067be:	601a      	str	r2, [r3, #0]
				will then inherit the higher priority.  The Blocking task will
				block indefinitely when it attempts to obtain the mutex, the
				Controlling task will only block for a fixed period and an
				error will be latched if the polling task has not returned the
				mutex by the time this fixed period has expired. */
				vTaskResume( xBlockingTaskHandle );
 80067c0:	f243 23bc 	movw	r3, #12988	; 0x32bc
 80067c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fb f98e 	bl	8001aec <vTaskResume>
                vTaskResume( xControllingTaskHandle );
 80067d0:	f243 23b8 	movw	r3, #12984	; 0x32b8
 80067d4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fb f986 	bl	8001aec <vTaskResume>

				/* The other two tasks should now have executed and no longer
				be suspended. */
				if( ( xBlockingIsSuspended == pdTRUE ) || ( xControllingIsSuspended == pdTRUE ) )
 80067e0:	f243 23a8 	movw	r3, #12968	; 0x32a8
 80067e4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d006      	beq.n	80067fc <prvRecursiveMutexPollingTask+0x9c>
 80067ee:	f243 23a4 	movw	r3, #12964	; 0x32a4
 80067f2:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d105      	bne.n	8006808 <prvRecursiveMutexPollingTask+0xa8>
				{
					xErrorOccurred = pdTRUE;
 80067fc:	f243 23a0 	movw	r3, #12960	; 0x32a0
 8006800:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006804:	2201      	movs	r2, #1
 8006806:	601a      	str	r2, [r3, #0]
				}

				#if( INCLUDE_uxTaskPriorityGet == 1 )
				{
					/* Check priority inherited. */
					configASSERT( uxTaskPriorityGet( NULL ) == recmuCONTROLLING_TASK_PRIORITY );
 8006808:	2000      	movs	r0, #0
 800680a:	f7fa ffdb 	bl	80017c4 <uxTaskPriorityGet>
 800680e:	4603      	mov	r3, r0
 8006810:	2b02      	cmp	r3, #2
 8006812:	d002      	beq.n	800681a <prvRecursiveMutexPollingTask+0xba>
 8006814:	f7fc ffd4 	bl	80037c0 <ulPortSetInterruptMask>
 8006818:	e7fe      	b.n	8006818 <prvRecursiveMutexPollingTask+0xb8>
					configASSERT( eTaskGetState( xBlockingTaskHandle ) == eBlocked );
				}
				#endif /* INCLUDE_eTaskGetState */

				/* Release the mutex, disinheriting the higher priority again. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 800681a:	f243 239c 	movw	r3, #12956	; 0x329c
 800681e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4618      	mov	r0, r3
 8006826:	f7fc f9b1 	bl	8002b8c <xQueueGiveMutexRecursive>
 800682a:	4603      	mov	r3, r0
 800682c:	2b01      	cmp	r3, #1
 800682e:	d005      	beq.n	800683c <prvRecursiveMutexPollingTask+0xdc>
				{
					xErrorOccurred = pdTRUE;
 8006830:	f243 23a0 	movw	r3, #12960	; 0x32a0
 8006834:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006838:	2201      	movs	r2, #1
 800683a:	601a      	str	r2, [r3, #0]
				}

				#if( INCLUDE_uxTaskPriorityGet == 1 )
				{
					/* Check priority disinherited. */
					configASSERT( uxTaskPriorityGet( NULL ) == recmuPOLLING_TASK_PRIORITY );
 800683c:	2000      	movs	r0, #0
 800683e:	f7fa ffc1 	bl	80017c4 <uxTaskPriorityGet>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <prvRecursiveMutexPollingTask+0xee>
 8006848:	f7fc ffba 	bl	80037c0 <ulPortSetInterruptMask>
 800684c:	e7fe      	b.n	800684c <prvRecursiveMutexPollingTask+0xec>
		#if configUSE_PREEMPTION == 0
		{
			taskYIELD();
		}
		#endif
	}
 800684e:	e78b      	b.n	8006768 <prvRecursiveMutexPollingTask+0x8>

08006850 <xAreRecursiveMutexTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreRecursiveMutexTasksStillRunning( void )
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
BaseType_t xReturn;
static UBaseType_t uxLastControllingCycles = 0, uxLastBlockingCycles = 0, uxLastPollingCycles = 0;

	/* Is the controlling task still cycling? */
	if( uxLastControllingCycles == uxControllingCycles )
 8006856:	f243 23c0 	movw	r3, #12992	; 0x32c0
 800685a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	f243 23ac 	movw	r3, #12972	; 0x32ac
 8006864:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d106      	bne.n	800687c <xAreRecursiveMutexTasksStillRunning+0x2c>
	{
		xErrorOccurred = pdTRUE;
 800686e:	f243 23a0 	movw	r3, #12960	; 0x32a0
 8006872:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006876:	2201      	movs	r2, #1
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	e009      	b.n	8006890 <xAreRecursiveMutexTasksStillRunning+0x40>
	}
	else
	{
		uxLastControllingCycles = uxControllingCycles;
 800687c:	f243 23ac 	movw	r3, #12972	; 0x32ac
 8006880:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	f243 23c0 	movw	r3, #12992	; 0x32c0
 800688a:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800688e:	601a      	str	r2, [r3, #0]
	}

	/* Is the blocking task still cycling? */
	if( uxLastBlockingCycles == uxBlockingCycles )
 8006890:	f243 23c4 	movw	r3, #12996	; 0x32c4
 8006894:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	f243 23b0 	movw	r3, #12976	; 0x32b0
 800689e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d106      	bne.n	80068b6 <xAreRecursiveMutexTasksStillRunning+0x66>
	{
		xErrorOccurred = pdTRUE;
 80068a8:	f243 23a0 	movw	r3, #12960	; 0x32a0
 80068ac:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80068b0:	2201      	movs	r2, #1
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	e009      	b.n	80068ca <xAreRecursiveMutexTasksStillRunning+0x7a>
	}
	else
	{
		uxLastBlockingCycles = uxBlockingCycles;
 80068b6:	f243 23b0 	movw	r3, #12976	; 0x32b0
 80068ba:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	f243 23c4 	movw	r3, #12996	; 0x32c4
 80068c4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80068c8:	601a      	str	r2, [r3, #0]
	}

	/* Is the polling task still cycling? */
	if( uxLastPollingCycles == uxPollingCycles )
 80068ca:	f243 23c8 	movw	r3, #13000	; 0x32c8
 80068ce:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	f243 23b4 	movw	r3, #12980	; 0x32b4
 80068d8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d106      	bne.n	80068f0 <xAreRecursiveMutexTasksStillRunning+0xa0>
	{
		xErrorOccurred = pdTRUE;
 80068e2:	f243 23a0 	movw	r3, #12960	; 0x32a0
 80068e6:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80068ea:	2201      	movs	r2, #1
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	e009      	b.n	8006904 <xAreRecursiveMutexTasksStillRunning+0xb4>
	}
	else
	{
		uxLastPollingCycles = uxPollingCycles;
 80068f0:	f243 23b4 	movw	r3, #12980	; 0x32b4
 80068f4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	f243 23c8 	movw	r3, #13000	; 0x32c8
 80068fe:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006902:	601a      	str	r2, [r3, #0]
	}

	if( xErrorOccurred == pdTRUE )
 8006904:	f243 23a0 	movw	r3, #12960	; 0x32a0
 8006908:	f2c2 0301 	movt	r3, #8193	; 0x2001
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d102      	bne.n	8006918 <xAreRecursiveMutexTasksStillRunning+0xc8>
	{
		xReturn = pdFAIL;
 8006912:	2300      	movs	r3, #0
 8006914:	607b      	str	r3, [r7, #4]
 8006916:	e001      	b.n	800691c <xAreRecursiveMutexTasksStillRunning+0xcc>
	}
	else
	{
		xReturn = pdTRUE;
 8006918:	2301      	movs	r3, #1
 800691a:	607b      	str	r3, [r7, #4]
	}

	return xReturn;
 800691c:	687b      	ldr	r3, [r7, #4]
}
 800691e:	4618      	mov	r0, r3
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop

0800692c <vStartSemaphoreTasks>:
static volatile short sNextCheckVariable = 0;

/*-----------------------------------------------------------*/

void vStartSemaphoreTasks( UBaseType_t uxPriority )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08a      	sub	sp, #40	; 0x28
 8006930:	af04      	add	r7, sp, #16
 8006932:	6078      	str	r0, [r7, #4]
xSemaphoreParameters *pxFirstSemaphoreParameters, *pxSecondSemaphoreParameters;
const TickType_t xBlockTime = ( TickType_t ) 100;
 8006934:	2364      	movs	r3, #100	; 0x64
 8006936:	617b      	str	r3, [r7, #20]

	/* Create the structure used to pass parameters to the first two tasks. */
	pxFirstSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters ) );
 8006938:	200c      	movs	r0, #12
 800693a:	f7fd fafb 	bl	8003f34 <pvPortMalloc>
 800693e:	6138      	str	r0, [r7, #16]

	if( pxFirstSemaphoreParameters != NULL )
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d048      	beq.n	80069d8 <vStartSemaphoreTasks+0xac>
	{
		/* Create the semaphore used by the first two tasks. */
		pxFirstSemaphoreParameters->xSemaphore = xSemaphoreCreateBinary();
 8006946:	2001      	movs	r0, #1
 8006948:	2100      	movs	r1, #0
 800694a:	2203      	movs	r2, #3
 800694c:	f7fc f894 	bl	8002a78 <xQueueGenericCreate>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	601a      	str	r2, [r3, #0]
		xSemaphoreGive( pxFirstSemaphoreParameters->xSemaphore );
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4618      	mov	r0, r3
 800695c:	2100      	movs	r1, #0
 800695e:	2200      	movs	r2, #0
 8006960:	2300      	movs	r3, #0
 8006962:	f7fc f999 	bl	8002c98 <xQueueGenericSend>

		if( pxFirstSemaphoreParameters->xSemaphore != NULL )
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d034      	beq.n	80069d8 <vStartSemaphoreTasks+0xac>
		{
			/* Create the variable which is to be shared by the first two tasks. */
			pxFirstSemaphoreParameters->pulSharedVariable = ( uint32_t * ) pvPortMalloc( sizeof( uint32_t ) );
 800696e:	2004      	movs	r0, #4
 8006970:	f7fd fae0 	bl	8003f34 <pvPortMalloc>
 8006974:	4602      	mov	r2, r0
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	605a      	str	r2, [r3, #4]

			/* Initialise the share variable to the value the tasks expect. */
			*( pxFirstSemaphoreParameters->pulSharedVariable ) = semtstNON_BLOCKING_EXPECTED_VALUE;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	22ff      	movs	r2, #255	; 0xff
 8006980:	601a      	str	r2, [r3, #0]

			/* The first two tasks do not block on semaphore calls. */
			pxFirstSemaphoreParameters->xBlockTime = ( TickType_t ) 0;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	2200      	movs	r2, #0
 8006986:	609a      	str	r2, [r3, #8]

			/* Spawn the first two tasks.  As they poll they operate at the idle priority. */
			xTaskCreate( prvSemaphoreTest, "PolSEM1", semtstSTACK_SIZE, ( void * ) pxFirstSemaphoreParameters, tskIDLE_PRIORITY, ( TaskHandle_t * ) NULL );
 8006988:	2300      	movs	r3, #0
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	2300      	movs	r3, #0
 800698e:	9301      	str	r3, [sp, #4]
 8006990:	2300      	movs	r3, #0
 8006992:	9302      	str	r3, [sp, #8]
 8006994:	2300      	movs	r3, #0
 8006996:	9303      	str	r3, [sp, #12]
 8006998:	f646 20a5 	movw	r0, #27301	; 0x6aa5
 800699c:	f6c0 0000 	movt	r0, #2048	; 0x800
 80069a0:	f247 5188 	movw	r1, #30088	; 0x7588
 80069a4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80069a8:	2282      	movs	r2, #130	; 0x82
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f7fa fce2 	bl	8001374 <xTaskGenericCreate>
			xTaskCreate( prvSemaphoreTest, "PolSEM2", semtstSTACK_SIZE, ( void * ) pxFirstSemaphoreParameters, tskIDLE_PRIORITY, ( TaskHandle_t * ) NULL );
 80069b0:	2300      	movs	r3, #0
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	2300      	movs	r3, #0
 80069b6:	9301      	str	r3, [sp, #4]
 80069b8:	2300      	movs	r3, #0
 80069ba:	9302      	str	r3, [sp, #8]
 80069bc:	2300      	movs	r3, #0
 80069be:	9303      	str	r3, [sp, #12]
 80069c0:	f646 20a5 	movw	r0, #27301	; 0x6aa5
 80069c4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80069c8:	f247 5190 	movw	r1, #30096	; 0x7590
 80069cc:	f6c0 0100 	movt	r1, #2048	; 0x800
 80069d0:	2282      	movs	r2, #130	; 0x82
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f7fa fcce 	bl	8001374 <xTaskGenericCreate>
		}
	}

	/* Do exactly the same to create the second set of tasks, only this time 
	provide a block time for the semaphore calls. */
	pxSecondSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters ) );
 80069d8:	200c      	movs	r0, #12
 80069da:	f7fd faab 	bl	8003f34 <pvPortMalloc>
 80069de:	60f8      	str	r0, [r7, #12]
	if( pxSecondSemaphoreParameters != NULL )
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d049      	beq.n	8006a7a <vStartSemaphoreTasks+0x14e>
	{
		pxSecondSemaphoreParameters->xSemaphore = xSemaphoreCreateBinary();
 80069e6:	2001      	movs	r0, #1
 80069e8:	2100      	movs	r1, #0
 80069ea:	2203      	movs	r2, #3
 80069ec:	f7fc f844 	bl	8002a78 <xQueueGenericCreate>
 80069f0:	4602      	mov	r2, r0
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	601a      	str	r2, [r3, #0]
		xSemaphoreGive( pxSecondSemaphoreParameters->xSemaphore );
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	2100      	movs	r1, #0
 80069fe:	2200      	movs	r2, #0
 8006a00:	2300      	movs	r3, #0
 8006a02:	f7fc f949 	bl	8002c98 <xQueueGenericSend>

		if( pxSecondSemaphoreParameters->xSemaphore != NULL )
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d035      	beq.n	8006a7a <vStartSemaphoreTasks+0x14e>
		{
			pxSecondSemaphoreParameters->pulSharedVariable = ( uint32_t * ) pvPortMalloc( sizeof( uint32_t ) );
 8006a0e:	2004      	movs	r0, #4
 8006a10:	f7fd fa90 	bl	8003f34 <pvPortMalloc>
 8006a14:	4602      	mov	r2, r0
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	605a      	str	r2, [r3, #4]
			*( pxSecondSemaphoreParameters->pulSharedVariable ) = semtstBLOCKING_EXPECTED_VALUE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006a22:	601a      	str	r2, [r3, #0]
			pxSecondSemaphoreParameters->xBlockTime = xBlockTime / portTICK_PERIOD_MS;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	609a      	str	r2, [r3, #8]

			xTaskCreate( prvSemaphoreTest, "BlkSEM1", semtstSTACK_SIZE, ( void * ) pxSecondSemaphoreParameters, uxPriority, ( TaskHandle_t * ) NULL );
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	2300      	movs	r3, #0
 8006a30:	9301      	str	r3, [sp, #4]
 8006a32:	2300      	movs	r3, #0
 8006a34:	9302      	str	r3, [sp, #8]
 8006a36:	2300      	movs	r3, #0
 8006a38:	9303      	str	r3, [sp, #12]
 8006a3a:	f646 20a5 	movw	r0, #27301	; 0x6aa5
 8006a3e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006a42:	f247 5198 	movw	r1, #30104	; 0x7598
 8006a46:	f6c0 0100 	movt	r1, #2048	; 0x800
 8006a4a:	2282      	movs	r2, #130	; 0x82
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f7fa fc91 	bl	8001374 <xTaskGenericCreate>
			xTaskCreate( prvSemaphoreTest, "BlkSEM2", semtstSTACK_SIZE, ( void * ) pxSecondSemaphoreParameters, uxPriority, ( TaskHandle_t * ) NULL );
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	2300      	movs	r3, #0
 8006a58:	9301      	str	r3, [sp, #4]
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	9302      	str	r3, [sp, #8]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	9303      	str	r3, [sp, #12]
 8006a62:	f646 20a5 	movw	r0, #27301	; 0x6aa5
 8006a66:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006a6a:	f247 51a0 	movw	r1, #30112	; 0x75a0
 8006a6e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8006a72:	2282      	movs	r2, #130	; 0x82
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f7fa fc7d 	bl	8001374 <xTaskGenericCreate>
	in use.  The registry is provided as a means for kernel aware 
	debuggers to locate semaphores and has no purpose if a kernel aware debugger
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
	defined to be less than 1. */
	vQueueAddToRegistry( ( QueueHandle_t ) pxFirstSemaphoreParameters->xSemaphore, "Counting_Sem_1" );
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f247 51a8 	movw	r1, #30120	; 0x75a8
 8006a84:	f6c0 0100 	movt	r1, #2048	; 0x800
 8006a88:	f7fc fc42 	bl	8003310 <vQueueAddToRegistry>
	vQueueAddToRegistry( ( QueueHandle_t ) pxSecondSemaphoreParameters->xSemaphore, "Counting_Sem_2" );
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f247 51b8 	movw	r1, #30136	; 0x75b8
 8006a96:	f6c0 0100 	movt	r1, #2048	; 0x800
 8006a9a:	f7fc fc39 	bl	8003310 <vQueueAddToRegistry>
}
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <prvSemaphoreTest>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvSemaphoreTest, pvParameters )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
xSemaphoreParameters *pxParameters;
volatile uint32_t *pulSharedVariable, ulExpectedValue;
uint32_t ulCounter;
short sError = pdFALSE, sCheckVariableToUse;
 8006aac:	2300      	movs	r3, #0
 8006aae:	837b      	strh	r3, [r7, #26]

	/* See which check variable to use.  sNextCheckVariable is not semaphore 
	protected! */
	portENTER_CRITICAL();
 8006ab0:	f7fc fe3c 	bl	800372c <vPortEnterCritical>
		sCheckVariableToUse = sNextCheckVariable;
 8006ab4:	f243 23d4 	movw	r3, #13012	; 0x32d4
 8006ab8:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	833b      	strh	r3, [r7, #24]
		sNextCheckVariable++;
 8006ac0:	f243 23d4 	movw	r3, #13012	; 0x32d4
 8006ac4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	3301      	adds	r3, #1
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	f243 23d4 	movw	r3, #13012	; 0x32d4
 8006ad6:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006ada:	801a      	strh	r2, [r3, #0]
	portEXIT_CRITICAL();
 8006adc:	f7fc fe4e 	bl	800377c <vPortExitCritical>

	/* A structure is passed in as the parameter.  This contains the shared 
	variable being guarded. */
	pxParameters = ( xSemaphoreParameters * ) pvParameters;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	617b      	str	r3, [r7, #20]
	pulSharedVariable = pxParameters->pulSharedVariable;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	613b      	str	r3, [r7, #16]

	/* If we are blocking we use a much higher count to ensure loads of context
	switches occur during the count. */
	if( pxParameters->xBlockTime > ( TickType_t ) 0 )
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <prvSemaphoreTest+0x56>
	{
		ulExpectedValue = semtstBLOCKING_EXPECTED_VALUE;
 8006af2:	f640 73ff 	movw	r3, #4095	; 0xfff
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	e001      	b.n	8006afe <prvSemaphoreTest+0x5a>
	}
	else
	{
		ulExpectedValue = semtstNON_BLOCKING_EXPECTED_VALUE;
 8006afa:	23ff      	movs	r3, #255	; 0xff
 8006afc:	60fb      	str	r3, [r7, #12]
	}

	for( ;; )
	{
		/* Try to obtain the semaphore. */
		if( xSemaphoreTake( pxParameters->xSemaphore, pxParameters->xBlockTime ) == pdPASS )
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	4610      	mov	r0, r2
 8006b08:	2100      	movs	r1, #0
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	f7fc f9fd 	bl	8002f0c <xQueueGenericReceive>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d14b      	bne.n	8006bb0 <prvSemaphoreTest+0x10c>
		{
			/* We have the semaphore and so expect any other tasks using the
			shared variable to have left it in the state we expect to find
			it. */
			if( *pulSharedVariable != ulExpectedValue )
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d001      	beq.n	8006b26 <prvSemaphoreTest+0x82>
			{
				sError = pdTRUE;
 8006b22:	2301      	movs	r3, #1
 8006b24:	837b      	strh	r3, [r7, #26]
			}
			
			/* Clear the variable, then count it back up to the expected value
			before releasing the semaphore.  Would expect a context switch or
			two during this time. */
			for( ulCounter = ( uint32_t ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 8006b26:	2300      	movs	r3, #0
 8006b28:	61fb      	str	r3, [r7, #28]
 8006b2a:	e00c      	b.n	8006b46 <prvSemaphoreTest+0xa2>
			{
				*pulSharedVariable = ulCounter;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	69fa      	ldr	r2, [r7, #28]
 8006b30:	601a      	str	r2, [r3, #0]
				if( *pulSharedVariable != ulCounter )
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d001      	beq.n	8006b40 <prvSemaphoreTest+0x9c>
				{
					sError = pdTRUE;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	837b      	strh	r3, [r7, #26]
			}
			
			/* Clear the variable, then count it back up to the expected value
			before releasing the semaphore.  Would expect a context switch or
			two during this time. */
			for( ulCounter = ( uint32_t ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	3301      	adds	r3, #1
 8006b44:	61fb      	str	r3, [r7, #28]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	69fa      	ldr	r2, [r7, #28]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d9ee      	bls.n	8006b2c <prvSemaphoreTest+0x88>
				}
			}

			/* Release the semaphore, and if no errors have occurred increment the check
			variable. */
			if(	xSemaphoreGive( pxParameters->xSemaphore ) == pdFALSE )
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4618      	mov	r0, r3
 8006b54:	2100      	movs	r1, #0
 8006b56:	2200      	movs	r2, #0
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f7fc f89d 	bl	8002c98 <xQueueGenericSend>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <prvSemaphoreTest+0xc4>
			{
				sError = pdTRUE;
 8006b64:	2301      	movs	r3, #1
 8006b66:	837b      	strh	r3, [r7, #26]
			}

			if( sError == pdFALSE )
 8006b68:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d115      	bne.n	8006b9c <prvSemaphoreTest+0xf8>
			{
				if( sCheckVariableToUse < semtstNUM_TASKS )
 8006b70:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006b74:	2b03      	cmp	r3, #3
 8006b76:	dc11      	bgt.n	8006b9c <prvSemaphoreTest+0xf8>
				{
					( sCheckVariables[ sCheckVariableToUse ] )++;
 8006b78:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006b7c:	f243 23cc 	movw	r3, #13004	; 0x32cc
 8006b80:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006b84:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	b299      	uxth	r1, r3
 8006b90:	f243 23cc 	movw	r3, #13004	; 0x32cc
 8006b94:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006b98:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			/* If we have a block time then we are running at a priority higher
			than the idle priority.  This task takes a long time to complete
			a cycle	(deliberately so to test the guarding) so will be starving
			out lower priority tasks.  Block for some time to allow give lower
			priority tasks some processor time. */
			vTaskDelay( pxParameters->xBlockTime * semtstDELAY_FACTOR );
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7fa fdbf 	bl	800172c <vTaskDelay>
 8006bae:	e006      	b.n	8006bbe <prvSemaphoreTest+0x11a>
		}
		else
		{
			if( pxParameters->xBlockTime == ( TickType_t ) 0 )
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d102      	bne.n	8006bbe <prvSemaphoreTest+0x11a>
			{
				/* We have not got the semaphore yet, so no point using the
				processor.  We are not blocking when attempting to obtain the
				semaphore. */
				taskYIELD();
 8006bb8:	f7fc fda6 	bl	8003708 <vPortYield>
			}
		}
	}
 8006bbc:	e79f      	b.n	8006afe <prvSemaphoreTest+0x5a>
 8006bbe:	e79e      	b.n	8006afe <prvSemaphoreTest+0x5a>

08006bc0 <xAreSemaphoreTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreSemaphoreTasksStillRunning( void )
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
static short sLastCheckVariables[ semtstNUM_TASKS ] = { 0 };
BaseType_t xTask, xReturn = pdTRUE;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	603b      	str	r3, [r7, #0]

	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 8006bca:	2300      	movs	r3, #0
 8006bcc:	607b      	str	r3, [r7, #4]
 8006bce:	e026      	b.n	8006c1e <xAreSemaphoreTasksStillRunning+0x5e>
	{
		if( sLastCheckVariables[ xTask ] == sCheckVariables[ xTask ] )
 8006bd0:	f243 23d8 	movw	r3, #13016	; 0x32d8
 8006bd4:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006bde:	f243 23cc 	movw	r3, #13004	; 0x32cc
 8006be2:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	b212      	sxth	r2, r2
 8006bf0:	b21b      	sxth	r3, r3
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d101      	bne.n	8006bfa <xAreSemaphoreTasksStillRunning+0x3a>
		{
			xReturn = pdFALSE;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	603b      	str	r3, [r7, #0]
		}

		sLastCheckVariables[ xTask ] = sCheckVariables[ xTask ];
 8006bfa:	f243 23cc 	movw	r3, #13004	; 0x32cc
 8006bfe:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006c08:	b299      	uxth	r1, r3
 8006c0a:	f243 23d8 	movw	r3, #13016	; 0x32d8
 8006c0e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
BaseType_t xAreSemaphoreTasksStillRunning( void )
{
static short sLastCheckVariables[ semtstNUM_TASKS ] = { 0 };
BaseType_t xTask, xReturn = pdTRUE;

	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	607b      	str	r3, [r7, #4]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	ddd5      	ble.n	8006bd0 <xAreSemaphoreTasksStillRunning+0x10>
		}

		sLastCheckVariables[ xTask ] = sCheckVariables[ xTask ];
	}

	return xReturn;
 8006c24:	683b      	ldr	r3, [r7, #0]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop

08006c34 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8006c3e:	79fa      	ldrb	r2, [r7, #7]
 8006c40:	f247 63c8 	movw	r3, #30408	; 0x76c8
 8006c44:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	2101      	movs	r1, #1
 8006c50:	f000 fa44 	bl	80070dc <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8006c54:	79fa      	ldrb	r2, [r7, #7]
 8006c56:	f247 63c0 	movw	r3, #30400	; 0x76c0
 8006c5a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006c5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006c62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8006c64:	2301      	movs	r3, #1
 8006c66:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006c70:	2302      	movs	r3, #2
 8006c72:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8006c74:	79fa      	ldrb	r2, [r7, #7]
 8006c76:	f240 0310 	movw	r3, #16
 8006c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006c7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c82:	f107 0308 	add.w	r3, r7, #8
 8006c86:	4610      	mov	r0, r2
 8006c88:	4619      	mov	r1, r3
 8006c8a:	f000 f8f9 	bl	8006e80 <GPIO_Init>
}
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8006c9e:	79fa      	ldrb	r2, [r7, #7]
 8006ca0:	f240 0310 	movw	r3, #16
 8006ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006ca8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006cac:	79f9      	ldrb	r1, [r7, #7]
 8006cae:	f240 0310 	movw	r3, #16
 8006cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006cb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006cba:	6959      	ldr	r1, [r3, #20]
 8006cbc:	79f8      	ldrb	r0, [r7, #7]
 8006cbe:	f247 63c0 	movw	r3, #30400	; 0x76c0
 8006cc2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006cc6:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8006cca:	404b      	eors	r3, r1
 8006ccc:	6153      	str	r3, [r2, #20]
}
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ce6:	d016      	beq.n	8006d16 <NVIC_PriorityGroupConfig+0x3e>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006cee:	d012      	beq.n	8006d16 <NVIC_PriorityGroupConfig+0x3e>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006cf6:	d00e      	beq.n	8006d16 <NVIC_PriorityGroupConfig+0x3e>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cfe:	d00a      	beq.n	8006d16 <NVIC_PriorityGroupConfig+0x3e>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d06:	d006      	beq.n	8006d16 <NVIC_PriorityGroupConfig+0x3e>
 8006d08:	f247 50c8 	movw	r0, #30152	; 0x75c8
 8006d0c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006d10:	2173      	movs	r1, #115	; 0x73
 8006d12:	f7fa f9bb 	bl	800108c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8006d16:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8006d1a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 8006d24:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006d28:	60da      	str	r2, [r3, #12]
}
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	73fb      	strb	r3, [r7, #15]
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	73bb      	strb	r3, [r7, #14]
 8006d40:	230f      	movs	r3, #15
 8006d42:	737b      	strb	r3, [r7, #13]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	78db      	ldrb	r3, [r3, #3]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00a      	beq.n	8006d62 <NVIC_Init+0x32>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	78db      	ldrb	r3, [r3, #3]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d006      	beq.n	8006d62 <NVIC_Init+0x32>
 8006d54:	f247 50c8 	movw	r0, #30152	; 0x75c8
 8006d58:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006d5c:	2187      	movs	r1, #135	; 0x87
 8006d5e:	f7fa f995 	bl	800108c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	785b      	ldrb	r3, [r3, #1]
 8006d66:	2b0f      	cmp	r3, #15
 8006d68:	d906      	bls.n	8006d78 <NVIC_Init+0x48>
 8006d6a:	f247 50c8 	movw	r0, #30152	; 0x75c8
 8006d6e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006d72:	2188      	movs	r1, #136	; 0x88
 8006d74:	f7fa f98a 	bl	800108c <assert_failed>
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	789b      	ldrb	r3, [r3, #2]
 8006d7c:	2b0f      	cmp	r3, #15
 8006d7e:	d906      	bls.n	8006d8e <NVIC_Init+0x5e>
 8006d80:	f247 50c8 	movw	r0, #30152	; 0x75c8
 8006d84:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006d88:	2189      	movs	r1, #137	; 0x89
 8006d8a:	f7fa f97f 	bl	800108c <assert_failed>
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	78db      	ldrb	r3, [r3, #3]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d040      	beq.n	8006e18 <NVIC_Init+0xe8>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8006d96:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8006d9a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	43db      	mvns	r3, r3
 8006da2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006da6:	0a1b      	lsrs	r3, r3, #8
 8006da8:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	f1c3 0304 	rsb	r3, r3, #4
 8006db0:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8006db2:	7b7a      	ldrb	r2, [r7, #13]
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
 8006db6:	fa42 f303 	asr.w	r3, r2, r3
 8006dba:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	785b      	ldrb	r3, [r3, #1]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	7bbb      	ldrb	r3, [r7, #14]
 8006dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc8:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	789a      	ldrb	r2, [r3, #2]
 8006dce:	7b7b      	ldrb	r3, [r7, #13]
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
 8006ddc:	011b      	lsls	r3, r3, #4
 8006dde:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8006de0:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8006de4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	7812      	ldrb	r2, [r2, #0]
 8006dec:	4413      	add	r3, r2
 8006dee:	7bfa      	ldrb	r2, [r7, #15]
 8006df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8006df4:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8006df8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	7812      	ldrb	r2, [r2, #0]
 8006e00:	0952      	lsrs	r2, r2, #5
 8006e02:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	7809      	ldrb	r1, [r1, #0]
 8006e08:	f001 011f 	and.w	r1, r1, #31
 8006e0c:	2001      	movs	r0, #1
 8006e0e:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8006e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006e16:	e011      	b.n	8006e3c <NVIC_Init+0x10c>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8006e18:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8006e1c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	7812      	ldrb	r2, [r2, #0]
 8006e24:	0952      	lsrs	r2, r2, #5
 8006e26:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8006e28:	6879      	ldr	r1, [r7, #4]
 8006e2a:	7809      	ldrb	r1, [r1, #0]
 8006e2c:	f001 011f 	and.w	r1, r1, #31
 8006e30:	2001      	movs	r0, #1
 8006e32:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8006e36:	3220      	adds	r2, #32
 8006e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop

08006e44 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	0ddb      	lsrs	r3, r3, #23
 8006e50:	05db      	lsls	r3, r3, #23
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d102      	bne.n	8006e5c <EXTI_ClearITPendingBit+0x18>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d107      	bne.n	8006e6c <EXTI_ClearITPendingBit+0x28>
 8006e5c:	f247 50f8 	movw	r0, #30200	; 0x75f8
 8006e60:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006e64:	f240 111d 	movw	r1, #285	; 0x11d
 8006e68:	f7fa f910 	bl	800108c <assert_failed>
  
  EXTI->PR = EXTI_Line;
 8006e6c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e70:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	615a      	str	r2, [r3, #20]
}
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop

08006e80 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	617b      	str	r3, [r7, #20]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	613b      	str	r3, [r7, #16]
 8006e92:	2300      	movs	r3, #0
 8006e94:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d03e      	beq.n	8006f20 <GPIO_Init+0xa0>
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ea8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d037      	beq.n	8006f20 <GPIO_Init+0xa0>
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006eb6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d030      	beq.n	8006f20 <GPIO_Init+0xa0>
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006ec4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d029      	beq.n	8006f20 <GPIO_Init+0xa0>
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ed2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d022      	beq.n	8006f20 <GPIO_Init+0xa0>
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d01b      	beq.n	8006f20 <GPIO_Init+0xa0>
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006eee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d014      	beq.n	8006f20 <GPIO_Init+0xa0>
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006efc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d00d      	beq.n	8006f20 <GPIO_Init+0xa0>
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d006      	beq.n	8006f20 <GPIO_Init+0xa0>
 8006f12:	f247 6034 	movw	r0, #30260	; 0x7634
 8006f16:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006f1a:	21bb      	movs	r1, #187	; 0xbb
 8006f1c:	f7fa f8b6 	bl	800108c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d106      	bne.n	8006f36 <GPIO_Init+0xb6>
 8006f28:	f247 6034 	movw	r0, #30260	; 0x7634
 8006f2c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006f30:	21bc      	movs	r1, #188	; 0xbc
 8006f32:	f7fa f8ab 	bl	800108c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	791b      	ldrb	r3, [r3, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d012      	beq.n	8006f64 <GPIO_Init+0xe4>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	791b      	ldrb	r3, [r3, #4]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d00e      	beq.n	8006f64 <GPIO_Init+0xe4>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	791b      	ldrb	r3, [r3, #4]
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d00a      	beq.n	8006f64 <GPIO_Init+0xe4>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	791b      	ldrb	r3, [r3, #4]
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	d006      	beq.n	8006f64 <GPIO_Init+0xe4>
 8006f56:	f247 6034 	movw	r0, #30260	; 0x7634
 8006f5a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006f5e:	21bd      	movs	r1, #189	; 0xbd
 8006f60:	f7fa f894 	bl	800108c <assert_failed>
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	79db      	ldrb	r3, [r3, #7]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00e      	beq.n	8006f8a <GPIO_Init+0x10a>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	79db      	ldrb	r3, [r3, #7]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d00a      	beq.n	8006f8a <GPIO_Init+0x10a>
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	79db      	ldrb	r3, [r3, #7]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d006      	beq.n	8006f8a <GPIO_Init+0x10a>
 8006f7c:	f247 6034 	movw	r0, #30260	; 0x7634
 8006f80:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006f84:	21be      	movs	r1, #190	; 0xbe
 8006f86:	f7fa f881 	bl	800108c <assert_failed>

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	617b      	str	r3, [r7, #20]
 8006f8e:	e09d      	b.n	80070cc <GPIO_Init+0x24c>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2201      	movs	r2, #1
 8006f94:	fa02 f303 	lsl.w	r3, r2, r3
 8006f98:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	f040 808c 	bne.w	80070c6 <GPIO_Init+0x246>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	005b      	lsls	r3, r3, #1
 8006fb6:	2103      	movs	r1, #3
 8006fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8006fbc:	43db      	mvns	r3, r3
 8006fbe:	401a      	ands	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	791b      	ldrb	r3, [r3, #4]
 8006fcc:	4619      	mov	r1, r3
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	005b      	lsls	r3, r3, #1
 8006fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	791b      	ldrb	r3, [r3, #4]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d003      	beq.n	8006fec <GPIO_Init+0x16c>
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	791b      	ldrb	r3, [r3, #4]
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d154      	bne.n	8007096 <GPIO_Init+0x216>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	795b      	ldrb	r3, [r3, #5]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d012      	beq.n	800701a <GPIO_Init+0x19a>
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	795b      	ldrb	r3, [r3, #5]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d00e      	beq.n	800701a <GPIO_Init+0x19a>
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	795b      	ldrb	r3, [r3, #5]
 8007000:	2b02      	cmp	r3, #2
 8007002:	d00a      	beq.n	800701a <GPIO_Init+0x19a>
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	795b      	ldrb	r3, [r3, #5]
 8007008:	2b03      	cmp	r3, #3
 800700a:	d006      	beq.n	800701a <GPIO_Init+0x19a>
 800700c:	f247 6034 	movw	r0, #30260	; 0x7634
 8007010:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007014:	21d0      	movs	r1, #208	; 0xd0
 8007016:	f7fa f839 	bl	800108c <assert_failed>

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	005b      	lsls	r3, r3, #1
 8007022:	2103      	movs	r1, #3
 8007024:	fa01 f303 	lsl.w	r3, r1, r3
 8007028:	43db      	mvns	r3, r3
 800702a:	401a      	ands	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689a      	ldr	r2, [r3, #8]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	795b      	ldrb	r3, [r3, #5]
 8007038:	4619      	mov	r1, r3
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	005b      	lsls	r3, r3, #1
 800703e:	fa01 f303 	lsl.w	r3, r1, r3
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	799b      	ldrb	r3, [r3, #6]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00a      	beq.n	8007066 <GPIO_Init+0x1e6>
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	799b      	ldrb	r3, [r3, #6]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d006      	beq.n	8007066 <GPIO_Init+0x1e6>
 8007058:	f247 6034 	movw	r0, #30260	; 0x7634
 800705c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007060:	21d7      	movs	r1, #215	; 0xd7
 8007062:	f7fa f813 	bl	800108c <assert_failed>

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	b29b      	uxth	r3, r3
 800706e:	2101      	movs	r1, #1
 8007070:	fa01 f303 	lsl.w	r3, r1, r3
 8007074:	43db      	mvns	r3, r3
 8007076:	401a      	ands	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	799b      	ldrb	r3, [r3, #6]
 8007084:	4619      	mov	r1, r3
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	b29b      	uxth	r3, r3
 800708a:	fa01 f303 	lsl.w	r3, r1, r3
 800708e:	b29b      	uxth	r3, r3
 8007090:	431a      	orrs	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	b29b      	uxth	r3, r3
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	2103      	movs	r1, #3
 80070a2:	fa01 f303 	lsl.w	r3, r1, r3
 80070a6:	43db      	mvns	r3, r3
 80070a8:	401a      	ands	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68da      	ldr	r2, [r3, #12]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	79db      	ldrb	r3, [r3, #7]
 80070b6:	4619      	mov	r1, r3
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	fa01 f303 	lsl.w	r3, r1, r3
 80070c0:	431a      	orrs	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	3301      	adds	r3, #1
 80070ca:	617b      	str	r3, [r7, #20]
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	2b0f      	cmp	r3, #15
 80070d0:	f67f af5e 	bls.w	8006f90 <GPIO_Init+0x110>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop

080070dc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	f44f 436e 	mov.w	r3, #60928	; 0xee00
 80070ee:	f2c8 138b 	movt	r3, #33163	; 0x818b
 80070f2:	4013      	ands	r3, r2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d102      	bne.n	80070fe <RCC_AHB1PeriphClockCmd+0x22>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d107      	bne.n	800710e <RCC_AHB1PeriphClockCmd+0x32>
 80070fe:	f247 6070 	movw	r0, #30320	; 0x7670
 8007102:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007106:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800710a:	f7f9 ffbf 	bl	800108c <assert_failed>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800710e:	78fb      	ldrb	r3, [r7, #3]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00a      	beq.n	800712a <RCC_AHB1PeriphClockCmd+0x4e>
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d007      	beq.n	800712a <RCC_AHB1PeriphClockCmd+0x4e>
 800711a:	f247 6070 	movw	r0, #30320	; 0x7670
 800711e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007122:	f240 4142 	movw	r1, #1090	; 0x442
 8007126:	f7f9 ffb1 	bl	800108c <assert_failed>
  if (NewState != DISABLE)
 800712a:	78fb      	ldrb	r3, [r7, #3]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00c      	beq.n	800714a <RCC_AHB1PeriphClockCmd+0x6e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8007130:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007134:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007138:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800713c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007140:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	430a      	orrs	r2, r1
 8007146:	631a      	str	r2, [r3, #48]	; 0x30
 8007148:	e00c      	b.n	8007164 <RCC_AHB1PeriphClockCmd+0x88>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800714a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800714e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007152:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007156:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800715a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	43d2      	mvns	r2, r2
 8007160:	400a      	ands	r2, r1
 8007162:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop

0800716c <atexit>:
 800716c:	4601      	mov	r1, r0
 800716e:	2000      	movs	r0, #0
 8007170:	4602      	mov	r2, r0
 8007172:	4603      	mov	r3, r0
 8007174:	f000 b8c6 	b.w	8007304 <__register_exitproc>

08007178 <__libc_fini_array>:
 8007178:	b538      	push	{r3, r4, r5, lr}
 800717a:	f247 7404 	movw	r4, #30468	; 0x7704
 800717e:	f247 7500 	movw	r5, #30464	; 0x7700
 8007182:	f6c0 0500 	movt	r5, #2048	; 0x800
 8007186:	f6c0 0400 	movt	r4, #2048	; 0x800
 800718a:	1b64      	subs	r4, r4, r5
 800718c:	10a4      	asrs	r4, r4, #2
 800718e:	bf18      	it	ne
 8007190:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 8007194:	d005      	beq.n	80071a2 <__libc_fini_array+0x2a>
 8007196:	3c01      	subs	r4, #1
 8007198:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800719c:	4798      	blx	r3
 800719e:	2c00      	cmp	r4, #0
 80071a0:	d1f9      	bne.n	8007196 <__libc_fini_array+0x1e>
 80071a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071a6:	f000 baa1 	b.w	80076ec <_fini>
 80071aa:	bf00      	nop

080071ac <__libc_init_array>:
 80071ac:	b570      	push	{r4, r5, r6, lr}
 80071ae:	f247 66f8 	movw	r6, #30456	; 0x76f8
 80071b2:	f247 65f8 	movw	r5, #30456	; 0x76f8
 80071b6:	f6c0 0500 	movt	r5, #2048	; 0x800
 80071ba:	f6c0 0600 	movt	r6, #2048	; 0x800
 80071be:	1b76      	subs	r6, r6, r5
 80071c0:	10b6      	asrs	r6, r6, #2
 80071c2:	bf1c      	itt	ne
 80071c4:	3d04      	subne	r5, #4
 80071c6:	2400      	movne	r4, #0
 80071c8:	d005      	beq.n	80071d6 <__libc_init_array+0x2a>
 80071ca:	3401      	adds	r4, #1
 80071cc:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80071d0:	4798      	blx	r3
 80071d2:	42a6      	cmp	r6, r4
 80071d4:	d1f9      	bne.n	80071ca <__libc_init_array+0x1e>
 80071d6:	f247 7600 	movw	r6, #30464	; 0x7700
 80071da:	f247 65f8 	movw	r5, #30456	; 0x76f8
 80071de:	f6c0 0500 	movt	r5, #2048	; 0x800
 80071e2:	f6c0 0600 	movt	r6, #2048	; 0x800
 80071e6:	1b76      	subs	r6, r6, r5
 80071e8:	f000 fa7a 	bl	80076e0 <_init>
 80071ec:	10b6      	asrs	r6, r6, #2
 80071ee:	bf1c      	itt	ne
 80071f0:	3d04      	subne	r5, #4
 80071f2:	2400      	movne	r4, #0
 80071f4:	d006      	beq.n	8007204 <__libc_init_array+0x58>
 80071f6:	3401      	adds	r4, #1
 80071f8:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80071fc:	4798      	blx	r3
 80071fe:	42a6      	cmp	r6, r4
 8007200:	d1f9      	bne.n	80071f6 <__libc_init_array+0x4a>
 8007202:	bd70      	pop	{r4, r5, r6, pc}
 8007204:	bd70      	pop	{r4, r5, r6, pc}
 8007206:	bf00      	nop

08007208 <memcmp>:
 8007208:	2a03      	cmp	r2, #3
 800720a:	b470      	push	{r4, r5, r6}
 800720c:	d914      	bls.n	8007238 <memcmp+0x30>
 800720e:	ea40 0301 	orr.w	r3, r0, r1
 8007212:	079b      	lsls	r3, r3, #30
 8007214:	d111      	bne.n	800723a <memcmp+0x32>
 8007216:	460c      	mov	r4, r1
 8007218:	4603      	mov	r3, r0
 800721a:	6825      	ldr	r5, [r4, #0]
 800721c:	681e      	ldr	r6, [r3, #0]
 800721e:	42ae      	cmp	r6, r5
 8007220:	4621      	mov	r1, r4
 8007222:	4618      	mov	r0, r3
 8007224:	f104 0404 	add.w	r4, r4, #4
 8007228:	f103 0304 	add.w	r3, r3, #4
 800722c:	d104      	bne.n	8007238 <memcmp+0x30>
 800722e:	3a04      	subs	r2, #4
 8007230:	2a03      	cmp	r2, #3
 8007232:	4618      	mov	r0, r3
 8007234:	4621      	mov	r1, r4
 8007236:	d8f0      	bhi.n	800721a <memcmp+0x12>
 8007238:	b1c2      	cbz	r2, 800726c <memcmp+0x64>
 800723a:	7805      	ldrb	r5, [r0, #0]
 800723c:	780c      	ldrb	r4, [r1, #0]
 800723e:	42a5      	cmp	r5, r4
 8007240:	bf04      	itt	eq
 8007242:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8007246:	2300      	moveq	r3, #0
 8007248:	d006      	beq.n	8007258 <memcmp+0x50>
 800724a:	e00c      	b.n	8007266 <memcmp+0x5e>
 800724c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007250:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007254:	42a5      	cmp	r5, r4
 8007256:	d106      	bne.n	8007266 <memcmp+0x5e>
 8007258:	4293      	cmp	r3, r2
 800725a:	f103 0301 	add.w	r3, r3, #1
 800725e:	d1f5      	bne.n	800724c <memcmp+0x44>
 8007260:	2000      	movs	r0, #0
 8007262:	bc70      	pop	{r4, r5, r6}
 8007264:	4770      	bx	lr
 8007266:	1b28      	subs	r0, r5, r4
 8007268:	bc70      	pop	{r4, r5, r6}
 800726a:	4770      	bx	lr
 800726c:	4610      	mov	r0, r2
 800726e:	e7f8      	b.n	8007262 <memcmp+0x5a>

08007270 <memset>:
 8007270:	b4f0      	push	{r4, r5, r6, r7}
 8007272:	0784      	lsls	r4, r0, #30
 8007274:	d043      	beq.n	80072fe <memset+0x8e>
 8007276:	1e54      	subs	r4, r2, #1
 8007278:	2a00      	cmp	r2, #0
 800727a:	d03e      	beq.n	80072fa <memset+0x8a>
 800727c:	b2cd      	uxtb	r5, r1
 800727e:	4603      	mov	r3, r0
 8007280:	e003      	b.n	800728a <memset+0x1a>
 8007282:	1e62      	subs	r2, r4, #1
 8007284:	2c00      	cmp	r4, #0
 8007286:	d038      	beq.n	80072fa <memset+0x8a>
 8007288:	4614      	mov	r4, r2
 800728a:	f803 5b01 	strb.w	r5, [r3], #1
 800728e:	079a      	lsls	r2, r3, #30
 8007290:	d1f7      	bne.n	8007282 <memset+0x12>
 8007292:	2c03      	cmp	r4, #3
 8007294:	d92a      	bls.n	80072ec <memset+0x7c>
 8007296:	b2cd      	uxtb	r5, r1
 8007298:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800729c:	2c0f      	cmp	r4, #15
 800729e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80072a2:	d915      	bls.n	80072d0 <memset+0x60>
 80072a4:	f1a4 0710 	sub.w	r7, r4, #16
 80072a8:	093f      	lsrs	r7, r7, #4
 80072aa:	f103 0610 	add.w	r6, r3, #16
 80072ae:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80072b2:	461a      	mov	r2, r3
 80072b4:	6015      	str	r5, [r2, #0]
 80072b6:	6055      	str	r5, [r2, #4]
 80072b8:	6095      	str	r5, [r2, #8]
 80072ba:	60d5      	str	r5, [r2, #12]
 80072bc:	3210      	adds	r2, #16
 80072be:	42b2      	cmp	r2, r6
 80072c0:	d1f8      	bne.n	80072b4 <memset+0x44>
 80072c2:	f004 040f 	and.w	r4, r4, #15
 80072c6:	3701      	adds	r7, #1
 80072c8:	2c03      	cmp	r4, #3
 80072ca:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80072ce:	d90d      	bls.n	80072ec <memset+0x7c>
 80072d0:	461e      	mov	r6, r3
 80072d2:	4622      	mov	r2, r4
 80072d4:	3a04      	subs	r2, #4
 80072d6:	2a03      	cmp	r2, #3
 80072d8:	f846 5b04 	str.w	r5, [r6], #4
 80072dc:	d8fa      	bhi.n	80072d4 <memset+0x64>
 80072de:	1f22      	subs	r2, r4, #4
 80072e0:	f022 0203 	bic.w	r2, r2, #3
 80072e4:	3204      	adds	r2, #4
 80072e6:	4413      	add	r3, r2
 80072e8:	f004 0403 	and.w	r4, r4, #3
 80072ec:	b12c      	cbz	r4, 80072fa <memset+0x8a>
 80072ee:	b2c9      	uxtb	r1, r1
 80072f0:	441c      	add	r4, r3
 80072f2:	f803 1b01 	strb.w	r1, [r3], #1
 80072f6:	42a3      	cmp	r3, r4
 80072f8:	d1fb      	bne.n	80072f2 <memset+0x82>
 80072fa:	bcf0      	pop	{r4, r5, r6, r7}
 80072fc:	4770      	bx	lr
 80072fe:	4614      	mov	r4, r2
 8007300:	4603      	mov	r3, r0
 8007302:	e7c6      	b.n	8007292 <memset+0x22>

08007304 <__register_exitproc>:
 8007304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007306:	f247 64dc 	movw	r4, #30428	; 0x76dc
 800730a:	f6c0 0400 	movt	r4, #2048	; 0x800
 800730e:	b085      	sub	sp, #20
 8007310:	6826      	ldr	r6, [r4, #0]
 8007312:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 8007316:	4607      	mov	r7, r0
 8007318:	2c00      	cmp	r4, #0
 800731a:	d044      	beq.n	80073a6 <__register_exitproc+0xa2>
 800731c:	6865      	ldr	r5, [r4, #4]
 800731e:	2d1f      	cmp	r5, #31
 8007320:	dd21      	ble.n	8007366 <__register_exitproc+0x62>
 8007322:	f240 0400 	movw	r4, #0
 8007326:	f2c0 0400 	movt	r4, #0
 800732a:	b91c      	cbnz	r4, 8007334 <__register_exitproc+0x30>
 800732c:	f04f 30ff 	mov.w	r0, #4294967295
 8007330:	b005      	add	sp, #20
 8007332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007334:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007338:	9103      	str	r1, [sp, #12]
 800733a:	9202      	str	r2, [sp, #8]
 800733c:	9301      	str	r3, [sp, #4]
 800733e:	f3af 8000 	nop.w
 8007342:	9903      	ldr	r1, [sp, #12]
 8007344:	9a02      	ldr	r2, [sp, #8]
 8007346:	9b01      	ldr	r3, [sp, #4]
 8007348:	4604      	mov	r4, r0
 800734a:	2800      	cmp	r0, #0
 800734c:	d0ee      	beq.n	800732c <__register_exitproc+0x28>
 800734e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 8007352:	2000      	movs	r0, #0
 8007354:	6025      	str	r5, [r4, #0]
 8007356:	6060      	str	r0, [r4, #4]
 8007358:	4605      	mov	r5, r0
 800735a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 800735e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 8007362:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 8007366:	b93f      	cbnz	r7, 8007378 <__register_exitproc+0x74>
 8007368:	1cab      	adds	r3, r5, #2
 800736a:	2000      	movs	r0, #0
 800736c:	3501      	adds	r5, #1
 800736e:	6065      	str	r5, [r4, #4]
 8007370:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8007374:	b005      	add	sp, #20
 8007376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007378:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 800737c:	f04f 0c01 	mov.w	ip, #1
 8007380:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8007384:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 8007388:	fa0c f205 	lsl.w	r2, ip, r5
 800738c:	4316      	orrs	r6, r2
 800738e:	2f02      	cmp	r7, #2
 8007390:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8007394:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8007398:	bf02      	ittt	eq
 800739a:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800739e:	431a      	orreq	r2, r3
 80073a0:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 80073a4:	e7e0      	b.n	8007368 <__register_exitproc+0x64>
 80073a6:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 80073aa:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 80073ae:	e7b5      	b.n	800731c <__register_exitproc+0x18>

080073b0 <register_fini>:
 80073b0:	f240 0300 	movw	r3, #0
 80073b4:	f2c0 0300 	movt	r3, #0
 80073b8:	b12b      	cbz	r3, 80073c6 <register_fini+0x16>
 80073ba:	f247 1079 	movw	r0, #29049	; 0x7179
 80073be:	f6c0 0000 	movt	r0, #2048	; 0x800
 80073c2:	f7ff bed3 	b.w	800716c <atexit>
 80073c6:	4770      	bx	lr
 80073c8:	546e7442 	.word	0x546e7442
 80073cc:	00747365 	.word	0x00747365
 80073d0:	63656843 	.word	0x63656843
 80073d4:	6d69546b 	.word	0x6d69546b
 80073d8:	00007265 	.word	0x00007265
 80073dc:	454c4449 	.word	0x454c4449
 80073e0:	00000000 	.word	0x00000000
 80073e4:	20726d54 	.word	0x20726d54
 80073e8:	00637653 	.word	0x00637653
 80073ec:	51726d54 	.word	0x51726d54
 80073f0:	00000000 	.word	0x00000000
 80073f4:	6e6f4351 	.word	0x6e6f4351
 80073f8:	00314273 	.word	0x00314273
 80073fc:	6f725051 	.word	0x6f725051
 8007400:	00324264 	.word	0x00324264
 8007404:	6e6f4351 	.word	0x6e6f4351
 8007408:	00334273 	.word	0x00334273
 800740c:	6f725051 	.word	0x6f725051
 8007410:	00344264 	.word	0x00344264
 8007414:	6f725051 	.word	0x6f725051
 8007418:	00354264 	.word	0x00354264
 800741c:	6e6f4351 	.word	0x6e6f4351
 8007420:	00364273 	.word	0x00364273
 8007424:	636f6c42 	.word	0x636f6c42
 8007428:	69545f6b 	.word	0x69545f6b
 800742c:	515f656d 	.word	0x515f656d
 8007430:	65756575 	.word	0x65756575
 8007434:	00000000 	.word	0x00000000
 8007438:	73655442 	.word	0x73655442
 800743c:	00003174 	.word	0x00003174
 8007440:	73655442 	.word	0x73655442
 8007444:	00003274 	.word	0x00003274
 8007448:	6e756f43 	.word	0x6e756f43
 800744c:	676e6974 	.word	0x676e6974
 8007450:	6d65535f 	.word	0x6d65535f
 8007454:	0000315f 	.word	0x0000315f
 8007458:	6e756f43 	.word	0x6e756f43
 800745c:	676e6974 	.word	0x676e6974
 8007460:	6d65535f 	.word	0x6d65535f
 8007464:	0000325f 	.word	0x0000325f
 8007468:	31544e43 	.word	0x31544e43
 800746c:	00000000 	.word	0x00000000
 8007470:	32544e43 	.word	0x32544e43
 8007474:	00000000 	.word	0x00000000
 8007478:	41455243 	.word	0x41455243
 800747c:	00524f54 	.word	0x00524f54
 8007480:	43495553 	.word	0x43495553
 8007484:	00314449 	.word	0x00314449
 8007488:	43495553 	.word	0x43495553
 800748c:	00324449 	.word	0x00324449
 8007490:	70737553 	.word	0x70737553
 8007494:	65646e65 	.word	0x65646e65
 8007498:	65545f64 	.word	0x65545f64
 800749c:	515f7473 	.word	0x515f7473
 80074a0:	65756575 	.word	0x65756575
 80074a4:	00000000 	.word	0x00000000
 80074a8:	5f544e43 	.word	0x5f544e43
 80074ac:	00434e49 	.word	0x00434e49
 80074b0:	5f4d494c 	.word	0x5f4d494c
 80074b4:	00434e49 	.word	0x00434e49
 80074b8:	54435f43 	.word	0x54435f43
 80074bc:	00004c52 	.word	0x00004c52
 80074c0:	50535553 	.word	0x50535553
 80074c4:	0058545f 	.word	0x0058545f
 80074c8:	50535553 	.word	0x50535553
 80074cc:	0058525f 	.word	0x0058525f
 80074d0:	7844454c 	.word	0x7844454c
 80074d4:	00000000 	.word	0x00000000
 80074d8:	6874614d 	.word	0x6874614d
 80074dc:	00000031 	.word	0x00000031
 80074e0:	6874614d 	.word	0x6874614d
 80074e4:	00000032 	.word	0x00000032
 80074e8:	6874614d 	.word	0x6874614d
 80074ec:	00000033 	.word	0x00000033
 80074f0:	6874614d 	.word	0x6874614d
 80074f4:	00000034 	.word	0x00000034
 80074f8:	5f6e6547 	.word	0x5f6e6547
 80074fc:	75657551 	.word	0x75657551
 8007500:	65545f65 	.word	0x65545f65
 8007504:	00007473 	.word	0x00007473
 8007508:	516e6547 	.word	0x516e6547
 800750c:	00000000 	.word	0x00000000
 8007510:	5f6e6547 	.word	0x5f6e6547
 8007514:	75657551 	.word	0x75657551
 8007518:	754d5f65 	.word	0x754d5f65
 800751c:	00786574 	.word	0x00786574
 8007520:	6f4c754d 	.word	0x6f4c754d
 8007524:	00000077 	.word	0x00000077
 8007528:	654d754d 	.word	0x654d754d
 800752c:	00000064 	.word	0x00000064
 8007530:	6948754d 	.word	0x6948754d
 8007534:	00006867 	.word	0x00006867
 8007538:	4d746e49 	.word	0x4d746e49
 800753c:	00687461 	.word	0x00687461
 8007540:	6c6c6f50 	.word	0x6c6c6f50
 8007544:	7365545f 	.word	0x7365545f
 8007548:	75515f74 	.word	0x75515f74
 800754c:	00657565 	.word	0x00657565
 8007550:	6e6f4351 	.word	0x6e6f4351
 8007554:	00424e73 	.word	0x00424e73
 8007558:	6f725051 	.word	0x6f725051
 800755c:	00424e64 	.word	0x00424e64
 8007560:	75636552 	.word	0x75636552
 8007564:	76697372 	.word	0x76697372
 8007568:	754d5f65 	.word	0x754d5f65
 800756c:	00786574 	.word	0x00786574
 8007570:	31636552 	.word	0x31636552
 8007574:	00000000 	.word	0x00000000
 8007578:	32636552 	.word	0x32636552
 800757c:	00000000 	.word	0x00000000
 8007580:	33636552 	.word	0x33636552
 8007584:	00000000 	.word	0x00000000
 8007588:	536c6f50 	.word	0x536c6f50
 800758c:	00314d45 	.word	0x00314d45
 8007590:	536c6f50 	.word	0x536c6f50
 8007594:	00324d45 	.word	0x00324d45
 8007598:	536b6c42 	.word	0x536b6c42
 800759c:	00314d45 	.word	0x00314d45
 80075a0:	536b6c42 	.word	0x536b6c42
 80075a4:	00324d45 	.word	0x00324d45
 80075a8:	6e756f43 	.word	0x6e756f43
 80075ac:	676e6974 	.word	0x676e6974
 80075b0:	6d65535f 	.word	0x6d65535f
 80075b4:	0000315f 	.word	0x0000315f
 80075b8:	6e756f43 	.word	0x6e756f43
 80075bc:	676e6974 	.word	0x676e6974
 80075c0:	6d65535f 	.word	0x6d65535f
 80075c4:	0000325f 	.word	0x0000325f
 80075c8:	2f62696c 	.word	0x2f62696c
 80075cc:	70696863 	.word	0x70696863
 80075d0:	4d54532f 	.word	0x4d54532f
 80075d4:	34463233 	.word	0x34463233
 80075d8:	535f7878 	.word	0x535f7878
 80075dc:	65506474 	.word	0x65506474
 80075e0:	68706972 	.word	0x68706972
 80075e4:	6972445f 	.word	0x6972445f
 80075e8:	2f726576 	.word	0x2f726576
 80075ec:	2f637273 	.word	0x2f637273
 80075f0:	6373696d 	.word	0x6373696d
 80075f4:	0000632e 	.word	0x0000632e
 80075f8:	2f62696c 	.word	0x2f62696c
 80075fc:	70696863 	.word	0x70696863
 8007600:	4d54532f 	.word	0x4d54532f
 8007604:	34463233 	.word	0x34463233
 8007608:	535f7878 	.word	0x535f7878
 800760c:	65506474 	.word	0x65506474
 8007610:	68706972 	.word	0x68706972
 8007614:	6972445f 	.word	0x6972445f
 8007618:	2f726576 	.word	0x2f726576
 800761c:	2f637273 	.word	0x2f637273
 8007620:	336d7473 	.word	0x336d7473
 8007624:	78346632 	.word	0x78346632
 8007628:	78655f78 	.word	0x78655f78
 800762c:	632e6974 	.word	0x632e6974
 8007630:	00000000 	.word	0x00000000
 8007634:	2f62696c 	.word	0x2f62696c
 8007638:	70696863 	.word	0x70696863
 800763c:	4d54532f 	.word	0x4d54532f
 8007640:	34463233 	.word	0x34463233
 8007644:	535f7878 	.word	0x535f7878
 8007648:	65506474 	.word	0x65506474
 800764c:	68706972 	.word	0x68706972
 8007650:	6972445f 	.word	0x6972445f
 8007654:	2f726576 	.word	0x2f726576
 8007658:	2f637273 	.word	0x2f637273
 800765c:	336d7473 	.word	0x336d7473
 8007660:	78346632 	.word	0x78346632
 8007664:	70675f78 	.word	0x70675f78
 8007668:	632e6f69 	.word	0x632e6f69
 800766c:	00000000 	.word	0x00000000
 8007670:	2f62696c 	.word	0x2f62696c
 8007674:	70696863 	.word	0x70696863
 8007678:	4d54532f 	.word	0x4d54532f
 800767c:	34463233 	.word	0x34463233
 8007680:	535f7878 	.word	0x535f7878
 8007684:	65506474 	.word	0x65506474
 8007688:	68706972 	.word	0x68706972
 800768c:	6972445f 	.word	0x6972445f
 8007690:	2f726576 	.word	0x2f726576
 8007694:	2f637273 	.word	0x2f637273
 8007698:	336d7473 	.word	0x336d7473
 800769c:	78346632 	.word	0x78346632
 80076a0:	63725f78 	.word	0x63725f78
 80076a4:	00632e63 	.word	0x00632e63

080076a8 <xLEDs>:
 80076a8:	03020001                                ....

080076ac <ucExpectedStackBytes.5311>:
 80076ac:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 80076bc:	a5a5a5a5                                ....

080076c0 <GPIO_PIN>:
 80076c0:	20001000 80004000                       ... .@..

080076c8 <GPIO_CLK>:
 80076c8:	00000008 00000008 00000008 00000008     ................
 80076d8:	00000043                                C...

080076dc <_global_impure_ptr>:
 80076dc:	20000020                                 .. 

080076e0 <_init>:
 80076e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e2:	bf00      	nop
 80076e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076e6:	bc08      	pop	{r3}
 80076e8:	469e      	mov	lr, r3
 80076ea:	4770      	bx	lr

080076ec <_fini>:
 80076ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ee:	bf00      	nop
 80076f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f2:	bc08      	pop	{r3}
 80076f4:	469e      	mov	lr, r3
 80076f6:	4770      	bx	lr
