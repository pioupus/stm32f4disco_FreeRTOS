   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_usart.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              	.LC0:
  22 0000 6C69622F 		.ascii	"lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_u"
  22      63686970 
  22      2F53544D 
  22      33324634 
  22      78785F53 
  23 0033 73617274 		.ascii	"sart.c\000"
  23      2E6300
  24 003a 0000     		.section	.text.USART_DeInit,"ax",%progbits
  25              		.align	2
  26              		.global	USART_DeInit
  27              		.thumb
  28              		.thumb_func
  30              	USART_DeInit:
  31              	.LFB110:
  32              		.file 1 "lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c"
   1:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
   2:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
   3:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @file    stm32f4xx_usart.c
   4:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @author  MCD Application Team
   5:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @version V1.0.0
   6:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @date    30-September-2011
   7:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          transmitter (USART):           
  10:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Initialization and Configuration
  11:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Data transfers
  12:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Multi-Processor Communication
  13:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - LIN mode
  14:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Half-duplex mode
  15:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Smartcard mode
  16:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - IrDA mode
  17:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - DMA transfers management
  18:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Interrupts and flags management 
  19:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           
  20:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @verbatim
  21:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *      
  22:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  23:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                                 How to use this driver
  24:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  25:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          1. Enable peripheral clock using the follwoing functions
  26:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, UART4 or 
  28:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  29:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          2.  According to the USART mode, enable the GPIO clocks using 
  30:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  31:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              or/and SCLK). 
  32:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  33:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          3. Peripheral's alternate function: 
  34:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  35:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  36:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Configure the desired pin in alternate function by:
  37:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  38:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  39:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  40:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Call GPIO_Init() function
  41:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  42:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          4. Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  43:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             flow control and Mode(Receiver/Transmitter) using the USART_Init()
  44:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             function.
  45:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  46:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. For synchronous mode, enable the clock and program the polarity,
  47:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             phase and last bit using the USART_ClockInit() function.
  48:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  49:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  50:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             USART_ITConfig() if you need to use interrupt mode. 
  51:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  52:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          6. When using the DMA mode 
  53:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Configure the DMA using DMA_Init() function
  54:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Active the needed channel Request using USART_DMACmd() function
  55:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  56:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          7. Enable the USART using the USART_Cmd() function.
  57:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  58:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          8. Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  59:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  60:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  61:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          for more details
  62:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  63:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          In order to reach higher communication baudrates, it is possible to
  64:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  65:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd(
  66:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          and before calling the function USART_Init().
  67:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  68:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @endverbatim
  69:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  70:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
  71:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @attention
  72:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  73:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  74:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  75:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  76:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  77:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  78:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  79:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  80:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  81:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************  
  82:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */ 
  83:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  84:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  85:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_usart.h"
  86:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_rcc.h"
  87:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  88:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  89:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  90:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  91:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  92:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART 
  93:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief USART driver modules
  94:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  95:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  96:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  97:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
  98:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private define ------------------------------------------------------------*/
  99:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 100:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 101:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 102:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 103:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_RE))
 104:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 105:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 106:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 107:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 108:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 109:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 110:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 111:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 112:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART Interrupts mask */
 113:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 114:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 115:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 116:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 117:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 118:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 119:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 120:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Private_Functions
 121:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 122:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 123:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 124:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 125:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 126:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 127:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 128:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 129:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                   Initialization and Configuration functions
 130:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 131:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 132:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to initialize the USART 
 133:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   in asynchronous and in synchronous modes.
 134:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    - For the asynchronous mode only these parameters can be configured: 
 135:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Baud Rate
 136:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length 
 137:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Stop Bit
 138:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Parity: If the parity is enabled, then the MSB bit of the data written
 139:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           in the data register is transmitted but is changed by the parity bit.
 140:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           Depending on the frame length defined by the M bit (8-bits or 9-bits),
 141:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the possible USART frame formats are as listed in the following table:
 142:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+     
 143:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 144:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------------------|---------------------------------------|             
 145:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 146:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 147:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 148:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 149:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 150:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 151:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 152:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+            
 153:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control
 154:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Receiver/transmitter modes
 155:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 156:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART_Init() function follows the USART  asynchronous configuration procedure
 157:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   (details for the procedure are available in reference manual (RM0090)).
 158:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 159:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   - For the synchronous mode in addition to the asynchronous mode parameters these 
 160:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     parameters should be also configured:
 161:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock Enabled
 162:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART polarity
 163:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART phase
 164:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART LastBit
 165:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 166:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   These parameters can be configured using the USART_ClockInit() function.
 167:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 168:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 169:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 170:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 171:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 172:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 173:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 174:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 175:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 176:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 177:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 178:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 179:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
  33              		.loc 1 179 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 8
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 82B0     		sub	sp, sp, #8
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 16
  45 0004 00AF     		add	r7, sp, #0
  46              	.LCFI2:
  47              		.cfi_def_cfa_register 7
  48 0006 7860     		str	r0, [r7, #4]
 180:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 181:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
  49              		.loc 1 181 0
  50 0008 7A68     		ldr	r2, [r7, #4]
  51 000a 4FF48053 		mov	r3, #4096
  52 000e C4F20103 		movt	r3, 16385
  53 0012 9A42     		cmp	r2, r3
  54 0014 29D0     		beq	.L2
  55              		.loc 1 181 0 is_stmt 0 discriminator 1
  56 0016 7A68     		ldr	r2, [r7, #4]
  57 0018 4FF48843 		mov	r3, #17408
  58 001c C4F20003 		movt	r3, 16384
  59 0020 9A42     		cmp	r2, r3
  60 0022 22D0     		beq	.L2
  61 0024 7A68     		ldr	r2, [r7, #4]
  62 0026 4FF49043 		mov	r3, #18432
  63 002a C4F20003 		movt	r3, 16384
  64 002e 9A42     		cmp	r2, r3
  65 0030 1BD0     		beq	.L2
  66 0032 7A68     		ldr	r2, [r7, #4]
  67 0034 4FF49843 		mov	r3, #19456
  68 0038 C4F20003 		movt	r3, 16384
  69 003c 9A42     		cmp	r2, r3
  70 003e 14D0     		beq	.L2
  71 0040 7A68     		ldr	r2, [r7, #4]
  72 0042 4FF4A043 		mov	r3, #20480
  73 0046 C4F20003 		movt	r3, 16384
  74 004a 9A42     		cmp	r2, r3
  75 004c 0DD0     		beq	.L2
  76 004e 7A68     		ldr	r2, [r7, #4]
  77 0050 4FF4A053 		mov	r3, #5120
  78 0054 C4F20103 		movt	r3, 16385
  79 0058 9A42     		cmp	r2, r3
  80 005a 06D0     		beq	.L2
  81 005c 40F20000 		movw	r0, #:lower16:.LC0
  82 0060 C0F20000 		movt	r0, #:upper16:.LC0
  83 0064 B521     		movs	r1, #181
  84 0066 FFF7FEFF 		bl	assert_failed
  85              	.L2:
 182:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 183:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USARTx == USART1)
  86              		.loc 1 183 0 is_stmt 1
  87 006a 7A68     		ldr	r2, [r7, #4]
  88 006c 4FF48053 		mov	r3, #4096
  89 0070 C4F20103 		movt	r3, 16385
  90 0074 9A42     		cmp	r2, r3
  91 0076 08D1     		bne	.L3
 184:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 185:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
  92              		.loc 1 185 0
  93 0078 1020     		movs	r0, #16
  94 007a 0121     		movs	r1, #1
  95 007c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 186:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  96              		.loc 1 186 0
  97 0080 1020     		movs	r0, #16
  98 0082 0021     		movs	r1, #0
  99 0084 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 100 0088 56E0     		b	.L1
 101              	.L3:
 187:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 188:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART2)
 102              		.loc 1 188 0
 103 008a 7A68     		ldr	r2, [r7, #4]
 104 008c 4FF48843 		mov	r3, #17408
 105 0090 C4F20003 		movt	r3, 16384
 106 0094 9A42     		cmp	r2, r3
 107 0096 0AD1     		bne	.L5
 189:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 190:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 108              		.loc 1 190 0
 109 0098 4FF40030 		mov	r0, #131072
 110 009c 0121     		movs	r1, #1
 111 009e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 191:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 112              		.loc 1 191 0
 113 00a2 4FF40030 		mov	r0, #131072
 114 00a6 0021     		movs	r1, #0
 115 00a8 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 116 00ac 44E0     		b	.L1
 117              	.L5:
 192:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 193:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART3)
 118              		.loc 1 193 0
 119 00ae 7A68     		ldr	r2, [r7, #4]
 120 00b0 4FF49043 		mov	r3, #18432
 121 00b4 C4F20003 		movt	r3, 16384
 122 00b8 9A42     		cmp	r2, r3
 123 00ba 0AD1     		bne	.L6
 194:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 195:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 124              		.loc 1 195 0
 125 00bc 4FF48020 		mov	r0, #262144
 126 00c0 0121     		movs	r1, #1
 127 00c2 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 196:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 128              		.loc 1 196 0
 129 00c6 4FF48020 		mov	r0, #262144
 130 00ca 0021     		movs	r1, #0
 131 00cc FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 132 00d0 32E0     		b	.L1
 133              	.L6:
 197:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }    
 198:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART4)
 134              		.loc 1 198 0
 135 00d2 7A68     		ldr	r2, [r7, #4]
 136 00d4 4FF49843 		mov	r3, #19456
 137 00d8 C4F20003 		movt	r3, 16384
 138 00dc 9A42     		cmp	r2, r3
 139 00de 0AD1     		bne	.L7
 199:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 200:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 140              		.loc 1 200 0
 141 00e0 4FF40020 		mov	r0, #524288
 142 00e4 0121     		movs	r1, #1
 143 00e6 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 201:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 144              		.loc 1 201 0
 145 00ea 4FF40020 		mov	r0, #524288
 146 00ee 0021     		movs	r1, #0
 147 00f0 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 148 00f4 20E0     		b	.L1
 149              	.L7:
 202:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 203:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART5)
 150              		.loc 1 203 0
 151 00f6 7A68     		ldr	r2, [r7, #4]
 152 00f8 4FF4A043 		mov	r3, #20480
 153 00fc C4F20003 		movt	r3, 16384
 154 0100 9A42     		cmp	r2, r3
 155 0102 0AD1     		bne	.L8
 204:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 205:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 156              		.loc 1 205 0
 157 0104 4FF48010 		mov	r0, #1048576
 158 0108 0121     		movs	r1, #1
 159 010a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 206:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 160              		.loc 1 206 0
 161 010e 4FF48010 		mov	r0, #1048576
 162 0112 0021     		movs	r1, #0
 163 0114 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 164 0118 0EE0     		b	.L1
 165              	.L8:
 207:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }     
 208:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 209:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 210:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     if (USARTx == USART6)
 166              		.loc 1 210 0
 167 011a 7A68     		ldr	r2, [r7, #4]
 168 011c 4FF4A053 		mov	r3, #5120
 169 0120 C4F20103 		movt	r3, 16385
 170 0124 9A42     		cmp	r2, r3
 171 0126 07D1     		bne	.L1
 211:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     { 
 212:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 172              		.loc 1 212 0
 173 0128 2020     		movs	r0, #32
 174 012a 0121     		movs	r1, #1
 175 012c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 176              		.loc 1 213 0
 177 0130 2020     		movs	r0, #32
 178 0132 0021     		movs	r1, #0
 179 0134 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 180              	.L1:
 214:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     }
 215:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 216:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 181              		.loc 1 216 0
 182 0138 0837     		adds	r7, r7, #8
 183 013a BD46     		mov	sp, r7
 184              		@ sp needed
 185 013c 80BD     		pop	{r7, pc}
 186              		.cfi_endproc
 187              	.LFE110:
 189 013e 00BF     		.section	.text.USART_Init,"ax",%progbits
 190              		.align	2
 191              		.global	USART_Init
 192              		.thumb
 193              		.thumb_func
 195              	USART_Init:
 196              	.LFB111:
 217:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 218:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 219:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 220:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         parameters in the USART_InitStruct .
 221:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 222:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 223:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 224:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 225:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 226:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 227:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 228:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 197              		.loc 1 228 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 40
 200              		@ frame_needed = 1, uses_anonymous_args = 0
 201 0000 80B5     		push	{r7, lr}
 202              	.LCFI3:
 203              		.cfi_def_cfa_offset 8
 204              		.cfi_offset 7, -8
 205              		.cfi_offset 14, -4
 206 0002 8AB0     		sub	sp, sp, #40
 207              	.LCFI4:
 208              		.cfi_def_cfa_offset 48
 209 0004 00AF     		add	r7, sp, #0
 210              	.LCFI5:
 211              		.cfi_def_cfa_register 7
 212 0006 7860     		str	r0, [r7, #4]
 213 0008 3960     		str	r1, [r7]
 229:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 214              		.loc 1 229 0
 215 000a 0023     		movs	r3, #0
 216 000c 7B62     		str	r3, [r7, #36]
 217 000e 0023     		movs	r3, #0
 218 0010 3B62     		str	r3, [r7, #32]
 230:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t integerdivider = 0x00;
 219              		.loc 1 230 0
 220 0012 0023     		movs	r3, #0
 221 0014 FB61     		str	r3, [r7, #28]
 231:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 222              		.loc 1 231 0
 223 0016 0023     		movs	r3, #0
 224 0018 BB61     		str	r3, [r7, #24]
 232:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 233:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 234:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 235:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 225              		.loc 1 235 0
 226 001a 7A68     		ldr	r2, [r7, #4]
 227 001c 4FF48053 		mov	r3, #4096
 228 0020 C4F20103 		movt	r3, 16385
 229 0024 9A42     		cmp	r2, r3
 230 0026 29D0     		beq	.L10
 231              		.loc 1 235 0 is_stmt 0 discriminator 1
 232 0028 7A68     		ldr	r2, [r7, #4]
 233 002a 4FF48843 		mov	r3, #17408
 234 002e C4F20003 		movt	r3, 16384
 235 0032 9A42     		cmp	r2, r3
 236 0034 22D0     		beq	.L10
 237 0036 7A68     		ldr	r2, [r7, #4]
 238 0038 4FF49043 		mov	r3, #18432
 239 003c C4F20003 		movt	r3, 16384
 240 0040 9A42     		cmp	r2, r3
 241 0042 1BD0     		beq	.L10
 242 0044 7A68     		ldr	r2, [r7, #4]
 243 0046 4FF49843 		mov	r3, #19456
 244 004a C4F20003 		movt	r3, 16384
 245 004e 9A42     		cmp	r2, r3
 246 0050 14D0     		beq	.L10
 247 0052 7A68     		ldr	r2, [r7, #4]
 248 0054 4FF4A043 		mov	r3, #20480
 249 0058 C4F20003 		movt	r3, 16384
 250 005c 9A42     		cmp	r2, r3
 251 005e 0DD0     		beq	.L10
 252 0060 7A68     		ldr	r2, [r7, #4]
 253 0062 4FF4A053 		mov	r3, #5120
 254 0066 C4F20103 		movt	r3, 16385
 255 006a 9A42     		cmp	r2, r3
 256 006c 06D0     		beq	.L10
 257 006e 40F20000 		movw	r0, #:lower16:.LC0
 258 0072 C0F20000 		movt	r0, #:upper16:.LC0
 259 0076 EB21     		movs	r1, #235
 260 0078 FFF7FEFF 		bl	assert_failed
 261              	.L10:
 236:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 262              		.loc 1 236 0 is_stmt 1
 263 007c 3B68     		ldr	r3, [r7]
 264 007e 1B68     		ldr	r3, [r3]
 265 0080 002B     		cmp	r3, #0
 266 0082 07D0     		beq	.L11
 267              		.loc 1 236 0 is_stmt 0 discriminator 2
 268 0084 3B68     		ldr	r3, [r7]
 269 0086 1A68     		ldr	r2, [r3]
 270 0088 47F2E003 		movw	r3, #28896
 271 008c C0F27203 		movt	r3, 114
 272 0090 9A42     		cmp	r2, r3
 273 0092 06D9     		bls	.L12
 274              	.L11:
 275              		.loc 1 236 0 discriminator 1
 276 0094 40F20000 		movw	r0, #:lower16:.LC0
 277 0098 C0F20000 		movt	r0, #:upper16:.LC0
 278 009c EC21     		movs	r1, #236
 279 009e FFF7FEFF 		bl	assert_failed
 280              	.L12:
 237:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 281              		.loc 1 237 0 is_stmt 1
 282 00a2 3B68     		ldr	r3, [r7]
 283 00a4 9B88     		ldrh	r3, [r3, #4]
 284 00a6 002B     		cmp	r3, #0
 285 00a8 0BD0     		beq	.L13
 286              		.loc 1 237 0 is_stmt 0 discriminator 1
 287 00aa 3B68     		ldr	r3, [r7]
 288 00ac 9B88     		ldrh	r3, [r3, #4]
 289 00ae B3F5805F 		cmp	r3, #4096
 290 00b2 06D0     		beq	.L13
 291 00b4 40F20000 		movw	r0, #:lower16:.LC0
 292 00b8 C0F20000 		movt	r0, #:upper16:.LC0
 293 00bc ED21     		movs	r1, #237
 294 00be FFF7FEFF 		bl	assert_failed
 295              	.L13:
 238:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 296              		.loc 1 238 0 is_stmt 1
 297 00c2 3B68     		ldr	r3, [r7]
 298 00c4 DB88     		ldrh	r3, [r3, #6]
 299 00c6 002B     		cmp	r3, #0
 300 00c8 15D0     		beq	.L14
 301              		.loc 1 238 0 is_stmt 0 discriminator 1
 302 00ca 3B68     		ldr	r3, [r7]
 303 00cc DB88     		ldrh	r3, [r3, #6]
 304 00ce B3F5805F 		cmp	r3, #4096
 305 00d2 10D0     		beq	.L14
 306 00d4 3B68     		ldr	r3, [r7]
 307 00d6 DB88     		ldrh	r3, [r3, #6]
 308 00d8 B3F5005F 		cmp	r3, #8192
 309 00dc 0BD0     		beq	.L14
 310 00de 3B68     		ldr	r3, [r7]
 311 00e0 DB88     		ldrh	r3, [r3, #6]
 312 00e2 B3F5405F 		cmp	r3, #12288
 313 00e6 06D0     		beq	.L14
 314 00e8 40F20000 		movw	r0, #:lower16:.LC0
 315 00ec C0F20000 		movt	r0, #:upper16:.LC0
 316 00f0 EE21     		movs	r1, #238
 317 00f2 FFF7FEFF 		bl	assert_failed
 318              	.L14:
 239:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 319              		.loc 1 239 0 is_stmt 1
 320 00f6 3B68     		ldr	r3, [r7]
 321 00f8 1B89     		ldrh	r3, [r3, #8]
 322 00fa 002B     		cmp	r3, #0
 323 00fc 10D0     		beq	.L15
 324              		.loc 1 239 0 is_stmt 0 discriminator 1
 325 00fe 3B68     		ldr	r3, [r7]
 326 0100 1B89     		ldrh	r3, [r3, #8]
 327 0102 B3F5806F 		cmp	r3, #1024
 328 0106 0BD0     		beq	.L15
 329 0108 3B68     		ldr	r3, [r7]
 330 010a 1B89     		ldrh	r3, [r3, #8]
 331 010c B3F5C06F 		cmp	r3, #1536
 332 0110 06D0     		beq	.L15
 333 0112 40F20000 		movw	r0, #:lower16:.LC0
 334 0116 C0F20000 		movt	r0, #:upper16:.LC0
 335 011a EF21     		movs	r1, #239
 336 011c FFF7FEFF 		bl	assert_failed
 337              	.L15:
 240:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 338              		.loc 1 240 0 is_stmt 1
 339 0120 3B68     		ldr	r3, [r7]
 340 0122 5B89     		ldrh	r3, [r3, #10]
 341 0124 1A46     		mov	r2, r3
 342 0126 4FF6F373 		movw	r3, #65523
 343 012a 1340     		ands	r3, r3, r2
 344 012c 002B     		cmp	r3, #0
 345 012e 03D1     		bne	.L16
 346              		.loc 1 240 0 is_stmt 0 discriminator 2
 347 0130 3B68     		ldr	r3, [r7]
 348 0132 5B89     		ldrh	r3, [r3, #10]
 349 0134 002B     		cmp	r3, #0
 350 0136 06D1     		bne	.L17
 351              	.L16:
 352              		.loc 1 240 0 discriminator 1
 353 0138 40F20000 		movw	r0, #:lower16:.LC0
 354 013c C0F20000 		movt	r0, #:upper16:.LC0
 355 0140 F021     		movs	r1, #240
 356 0142 FFF7FEFF 		bl	assert_failed
 357              	.L17:
 241:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 358              		.loc 1 241 0 is_stmt 1
 359 0146 3B68     		ldr	r3, [r7]
 360 0148 9B89     		ldrh	r3, [r3, #12]
 361 014a 002B     		cmp	r3, #0
 362 014c 15D0     		beq	.L18
 363              		.loc 1 241 0 is_stmt 0 discriminator 1
 364 014e 3B68     		ldr	r3, [r7]
 365 0150 9B89     		ldrh	r3, [r3, #12]
 366 0152 B3F5807F 		cmp	r3, #256
 367 0156 10D0     		beq	.L18
 368 0158 3B68     		ldr	r3, [r7]
 369 015a 9B89     		ldrh	r3, [r3, #12]
 370 015c B3F5007F 		cmp	r3, #512
 371 0160 0BD0     		beq	.L18
 372 0162 3B68     		ldr	r3, [r7]
 373 0164 9B89     		ldrh	r3, [r3, #12]
 374 0166 B3F5407F 		cmp	r3, #768
 375 016a 06D0     		beq	.L18
 376 016c 40F20000 		movw	r0, #:lower16:.LC0
 377 0170 C0F20000 		movt	r0, #:upper16:.LC0
 378 0174 F121     		movs	r1, #241
 379 0176 FFF7FEFF 		bl	assert_failed
 380              	.L18:
 242:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 243:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 244:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 381              		.loc 1 244 0 is_stmt 1
 382 017a 3B68     		ldr	r3, [r7]
 383 017c 9B89     		ldrh	r3, [r3, #12]
 384 017e 002B     		cmp	r3, #0
 385 0180 22D0     		beq	.L19
 245:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 246:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 386              		.loc 1 246 0
 387 0182 7A68     		ldr	r2, [r7, #4]
 388 0184 4FF48053 		mov	r3, #4096
 389 0188 C4F20103 		movt	r3, 16385
 390 018c 9A42     		cmp	r2, r3
 391 018e 1BD0     		beq	.L19
 392              		.loc 1 246 0 is_stmt 0 discriminator 1
 393 0190 7A68     		ldr	r2, [r7, #4]
 394 0192 4FF48843 		mov	r3, #17408
 395 0196 C4F20003 		movt	r3, 16384
 396 019a 9A42     		cmp	r2, r3
 397 019c 14D0     		beq	.L19
 398 019e 7A68     		ldr	r2, [r7, #4]
 399 01a0 4FF49043 		mov	r3, #18432
 400 01a4 C4F20003 		movt	r3, 16384
 401 01a8 9A42     		cmp	r2, r3
 402 01aa 0DD0     		beq	.L19
 403 01ac 7A68     		ldr	r2, [r7, #4]
 404 01ae 4FF4A053 		mov	r3, #5120
 405 01b2 C4F20103 		movt	r3, 16385
 406 01b6 9A42     		cmp	r2, r3
 407 01b8 06D0     		beq	.L19
 408 01ba 40F20000 		movw	r0, #:lower16:.LC0
 409 01be C0F20000 		movt	r0, #:upper16:.LC0
 410 01c2 F621     		movs	r1, #246
 411 01c4 FFF7FEFF 		bl	assert_failed
 412              	.L19:
 247:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 248:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 249:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 250:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 413              		.loc 1 250 0 is_stmt 1
 414 01c8 7B68     		ldr	r3, [r7, #4]
 415 01ca 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 416 01cc 9BB2     		uxth	r3, r3
 417 01ce 7B62     		str	r3, [r7, #36]
 251:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 252:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear STOP[13:12] bits */
 253:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 418              		.loc 1 253 0
 419 01d0 7B6A     		ldr	r3, [r7, #36]
 420 01d2 23F44053 		bic	r3, r3, #12288
 421 01d6 7B62     		str	r3, [r7, #36]
 254:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 255:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 256:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 257:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 422              		.loc 1 257 0
 423 01d8 3B68     		ldr	r3, [r7]
 424 01da DB88     		ldrh	r3, [r3, #6]
 425 01dc 7A6A     		ldr	r2, [r7, #36]
 426 01de 1343     		orrs	r3, r3, r2
 427 01e0 7B62     		str	r3, [r7, #36]
 258:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 259:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 260:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 428              		.loc 1 260 0
 429 01e2 7B6A     		ldr	r3, [r7, #36]
 430 01e4 9AB2     		uxth	r2, r3
 431 01e6 7B68     		ldr	r3, [r7, #4]
 432 01e8 1A82     		strh	r2, [r3, #16]	@ movhi
 261:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 262:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 263:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR1;
 433              		.loc 1 263 0
 434 01ea 7B68     		ldr	r3, [r7, #4]
 435 01ec 9B89     		ldrh	r3, [r3, #12]	@ movhi
 436 01ee 9BB2     		uxth	r3, r3
 437 01f0 7B62     		str	r3, [r7, #36]
 264:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 265:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 266:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 438              		.loc 1 266 0
 439 01f2 7B6A     		ldr	r3, [r7, #36]
 440 01f4 23F4B053 		bic	r3, r3, #5632
 441 01f8 23F00C03 		bic	r3, r3, #12
 442 01fc 7B62     		str	r3, [r7, #36]
 267:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 268:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 269:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set the M bits according to USART_WordLength value 
 270:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 271:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 272:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 443              		.loc 1 272 0
 444 01fe 3B68     		ldr	r3, [r7]
 445 0200 9A88     		ldrh	r2, [r3, #4]
 446 0202 3B68     		ldr	r3, [r7]
 447 0204 1B89     		ldrh	r3, [r3, #8]
 448 0206 1343     		orrs	r3, r3, r2
 449 0208 9AB2     		uxth	r2, r3
 273:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 450              		.loc 1 273 0
 451 020a 3B68     		ldr	r3, [r7]
 452 020c 5B89     		ldrh	r3, [r3, #10]
 272:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 453              		.loc 1 272 0
 454 020e 1343     		orrs	r3, r3, r2
 455 0210 9BB2     		uxth	r3, r3
 456 0212 7A6A     		ldr	r2, [r7, #36]
 457 0214 1343     		orrs	r3, r3, r2
 458 0216 7B62     		str	r3, [r7, #36]
 274:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 275:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR1 */
 276:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 459              		.loc 1 276 0
 460 0218 7B6A     		ldr	r3, [r7, #36]
 461 021a 9AB2     		uxth	r2, r3
 462 021c 7B68     		ldr	r3, [r7, #4]
 463 021e 9A81     		strh	r2, [r3, #12]	@ movhi
 277:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 278:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 279:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR3;
 464              		.loc 1 279 0
 465 0220 7B68     		ldr	r3, [r7, #4]
 466 0222 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 467 0224 9BB2     		uxth	r3, r3
 468 0226 7B62     		str	r3, [r7, #36]
 280:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 281:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CTSE and RTSE bits */
 282:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 469              		.loc 1 282 0
 470 0228 7B6A     		ldr	r3, [r7, #36]
 471 022a 23F44073 		bic	r3, r3, #768
 472 022e 7B62     		str	r3, [r7, #36]
 283:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 284:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART HFC : 
 285:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 286:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 473              		.loc 1 286 0
 474 0230 3B68     		ldr	r3, [r7]
 475 0232 9B89     		ldrh	r3, [r3, #12]
 476 0234 7A6A     		ldr	r2, [r7, #36]
 477 0236 1343     		orrs	r3, r3, r2
 478 0238 7B62     		str	r3, [r7, #36]
 287:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 288:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR3 */
 289:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 479              		.loc 1 289 0
 480 023a 7B6A     		ldr	r3, [r7, #36]
 481 023c 9AB2     		uxth	r2, r3
 482 023e 7B68     		ldr	r3, [r7, #4]
 483 0240 9A82     		strh	r2, [r3, #20]	@ movhi
 290:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 291:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 292:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Baud Rate */
 293:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 484              		.loc 1 293 0
 485 0242 07F10803 		add	r3, r7, #8
 486 0246 1846     		mov	r0, r3
 487 0248 FFF7FEFF 		bl	RCC_GetClocksFreq
 294:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 295:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 488              		.loc 1 295 0
 489 024c 7A68     		ldr	r2, [r7, #4]
 490 024e 4FF48053 		mov	r3, #4096
 491 0252 C4F20103 		movt	r3, 16385
 492 0256 9A42     		cmp	r2, r3
 493 0258 06D0     		beq	.L20
 494              		.loc 1 295 0 is_stmt 0 discriminator 1
 495 025a 7A68     		ldr	r2, [r7, #4]
 496 025c 4FF4A053 		mov	r3, #5120
 497 0260 C4F20103 		movt	r3, 16385
 498 0264 9A42     		cmp	r2, r3
 499 0266 02D1     		bne	.L21
 500              	.L20:
 296:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 297:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 501              		.loc 1 297 0 is_stmt 1
 502 0268 7B69     		ldr	r3, [r7, #20]
 503 026a 3B62     		str	r3, [r7, #32]
 504 026c 01E0     		b	.L22
 505              	.L21:
 298:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 299:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 300:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 301:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 506              		.loc 1 301 0
 507 026e 3B69     		ldr	r3, [r7, #16]
 508 0270 3B62     		str	r3, [r7, #32]
 509              	.L22:
 302:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 303:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 304:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the integer part */
 305:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 510              		.loc 1 305 0
 511 0272 7B68     		ldr	r3, [r7, #4]
 512 0274 9B89     		ldrh	r3, [r3, #12]	@ movhi
 513 0276 9BB2     		uxth	r3, r3
 514 0278 9BB2     		uxth	r3, r3
 515 027a 1BB2     		sxth	r3, r3
 516 027c 002B     		cmp	r3, #0
 517 027e 0CDA     		bge	.L23
 306:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 307:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 308:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 518              		.loc 1 308 0
 519 0280 3A6A     		ldr	r2, [r7, #32]
 520 0282 1346     		mov	r3, r2
 521 0284 9B00     		lsls	r3, r3, #2
 522 0286 1344     		add	r3, r3, r2
 523 0288 9A00     		lsls	r2, r3, #2
 524 028a 1A44     		add	r2, r2, r3
 525 028c 3B68     		ldr	r3, [r7]
 526 028e 1B68     		ldr	r3, [r3]
 527 0290 5B00     		lsls	r3, r3, #1
 528 0292 B2FBF3F3 		udiv	r3, r2, r3
 529 0296 FB61     		str	r3, [r7, #28]
 530 0298 0BE0     		b	.L24
 531              	.L23:
 309:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 310:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 311:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 312:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 313:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 532              		.loc 1 313 0
 533 029a 3A6A     		ldr	r2, [r7, #32]
 534 029c 1346     		mov	r3, r2
 535 029e 9B00     		lsls	r3, r3, #2
 536 02a0 1344     		add	r3, r3, r2
 537 02a2 9A00     		lsls	r2, r3, #2
 538 02a4 1A44     		add	r2, r2, r3
 539 02a6 3B68     		ldr	r3, [r7]
 540 02a8 1B68     		ldr	r3, [r3]
 541 02aa 9B00     		lsls	r3, r3, #2
 542 02ac B2FBF3F3 		udiv	r3, r2, r3
 543 02b0 FB61     		str	r3, [r7, #28]
 544              	.L24:
 314:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 315:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 545              		.loc 1 315 0
 546 02b2 FA69     		ldr	r2, [r7, #28]
 547 02b4 48F21F53 		movw	r3, #34079
 548 02b8 C5F2EB13 		movt	r3, 20971
 549 02bc A3FB0213 		umull	r1, r3, r3, r2
 550 02c0 5B09     		lsrs	r3, r3, #5
 551 02c2 1B01     		lsls	r3, r3, #4
 552 02c4 7B62     		str	r3, [r7, #36]
 316:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 317:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the fractional part */
 318:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 553              		.loc 1 318 0
 554 02c6 7B6A     		ldr	r3, [r7, #36]
 555 02c8 1B09     		lsrs	r3, r3, #4
 556 02ca 6422     		movs	r2, #100
 557 02cc 02FB03F3 		mul	r3, r2, r3
 558 02d0 FA69     		ldr	r2, [r7, #28]
 559 02d2 D31A     		subs	r3, r2, r3
 560 02d4 BB61     		str	r3, [r7, #24]
 319:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 320:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Implement the fractional part in the register */
 321:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 561              		.loc 1 321 0
 562 02d6 7B68     		ldr	r3, [r7, #4]
 563 02d8 9B89     		ldrh	r3, [r3, #12]	@ movhi
 564 02da 9BB2     		uxth	r3, r3
 565 02dc 9BB2     		uxth	r3, r3
 566 02de 1BB2     		sxth	r3, r3
 567 02e0 002B     		cmp	r3, #0
 568 02e2 10DA     		bge	.L25
 322:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 323:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 569              		.loc 1 323 0
 570 02e4 BB69     		ldr	r3, [r7, #24]
 571 02e6 DB00     		lsls	r3, r3, #3
 572 02e8 03F13202 		add	r2, r3, #50
 573 02ec 48F21F53 		movw	r3, #34079
 574 02f0 C5F2EB13 		movt	r3, 20971
 575 02f4 A3FB0213 		umull	r1, r3, r3, r2
 576 02f8 5B09     		lsrs	r3, r3, #5
 577 02fa 03F00703 		and	r3, r3, #7
 578 02fe 7A6A     		ldr	r2, [r7, #36]
 579 0300 1343     		orrs	r3, r3, r2
 580 0302 7B62     		str	r3, [r7, #36]
 581 0304 0FE0     		b	.L26
 582              	.L25:
 324:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 325:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 326:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 327:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 583              		.loc 1 327 0
 584 0306 BB69     		ldr	r3, [r7, #24]
 585 0308 1B01     		lsls	r3, r3, #4
 586 030a 03F13202 		add	r2, r3, #50
 587 030e 48F21F53 		movw	r3, #34079
 588 0312 C5F2EB13 		movt	r3, 20971
 589 0316 A3FB0213 		umull	r1, r3, r3, r2
 590 031a 5B09     		lsrs	r3, r3, #5
 591 031c 03F00F03 		and	r3, r3, #15
 592 0320 7A6A     		ldr	r2, [r7, #36]
 593 0322 1343     		orrs	r3, r3, r2
 594 0324 7B62     		str	r3, [r7, #36]
 595              	.L26:
 328:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 329:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 330:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART BRR register */
 331:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 596              		.loc 1 331 0
 597 0326 7B6A     		ldr	r3, [r7, #36]
 598 0328 9AB2     		uxth	r2, r3
 599 032a 7B68     		ldr	r3, [r7, #4]
 600 032c 1A81     		strh	r2, [r3, #8]	@ movhi
 332:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 601              		.loc 1 332 0
 602 032e 2837     		adds	r7, r7, #40
 603 0330 BD46     		mov	sp, r7
 604              		@ sp needed
 605 0332 80BD     		pop	{r7, pc}
 606              		.cfi_endproc
 607              	.LFE111:
 609              		.section	.text.USART_StructInit,"ax",%progbits
 610              		.align	2
 611              		.global	USART_StructInit
 612              		.thumb
 613              		.thumb_func
 615              	USART_StructInit:
 616              	.LFB112:
 333:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 334:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 335:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 336:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 337:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         be initialized.
 338:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 339:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 340:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 341:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 617              		.loc 1 341 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 8
 620              		@ frame_needed = 1, uses_anonymous_args = 0
 621              		@ link register save eliminated.
 622 0000 80B4     		push	{r7}
 623              	.LCFI6:
 624              		.cfi_def_cfa_offset 4
 625              		.cfi_offset 7, -4
 626 0002 83B0     		sub	sp, sp, #12
 627              	.LCFI7:
 628              		.cfi_def_cfa_offset 16
 629 0004 00AF     		add	r7, sp, #0
 630              	.LCFI8:
 631              		.cfi_def_cfa_register 7
 632 0006 7860     		str	r0, [r7, #4]
 342:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_InitStruct members default value */
 343:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 633              		.loc 1 343 0
 634 0008 7B68     		ldr	r3, [r7, #4]
 635 000a 4FF41652 		mov	r2, #9600
 636 000e 1A60     		str	r2, [r3]
 344:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 637              		.loc 1 344 0
 638 0010 7B68     		ldr	r3, [r7, #4]
 639 0012 0022     		movs	r2, #0
 640 0014 9A80     		strh	r2, [r3, #4]	@ movhi
 345:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 641              		.loc 1 345 0
 642 0016 7B68     		ldr	r3, [r7, #4]
 643 0018 0022     		movs	r2, #0
 644 001a DA80     		strh	r2, [r3, #6]	@ movhi
 346:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 645              		.loc 1 346 0
 646 001c 7B68     		ldr	r3, [r7, #4]
 647 001e 0022     		movs	r2, #0
 648 0020 1A81     		strh	r2, [r3, #8]	@ movhi
 347:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 649              		.loc 1 347 0
 650 0022 7B68     		ldr	r3, [r7, #4]
 651 0024 0C22     		movs	r2, #12
 652 0026 5A81     		strh	r2, [r3, #10]	@ movhi
 348:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 653              		.loc 1 348 0
 654 0028 7B68     		ldr	r3, [r7, #4]
 655 002a 0022     		movs	r2, #0
 656 002c 9A81     		strh	r2, [r3, #12]	@ movhi
 349:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 657              		.loc 1 349 0
 658 002e 0C37     		adds	r7, r7, #12
 659 0030 BD46     		mov	sp, r7
 660              		@ sp needed
 661 0032 5DF8047B 		ldr	r7, [sp], #4
 662 0036 7047     		bx	lr
 663              		.cfi_endproc
 664              	.LFE112:
 666              		.section	.text.USART_ClockInit,"ax",%progbits
 667              		.align	2
 668              		.global	USART_ClockInit
 669              		.thumb
 670              		.thumb_func
 672              	USART_ClockInit:
 673              	.LFB113:
 350:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 351:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 352:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 353:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 354:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 355:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 356:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 357:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 358:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 359:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 360:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 361:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 674              		.loc 1 361 0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 16
 677              		@ frame_needed = 1, uses_anonymous_args = 0
 678 0000 80B5     		push	{r7, lr}
 679              	.LCFI9:
 680              		.cfi_def_cfa_offset 8
 681              		.cfi_offset 7, -8
 682              		.cfi_offset 14, -4
 683 0002 84B0     		sub	sp, sp, #16
 684              	.LCFI10:
 685              		.cfi_def_cfa_offset 24
 686 0004 00AF     		add	r7, sp, #0
 687              	.LCFI11:
 688              		.cfi_def_cfa_register 7
 689 0006 7860     		str	r0, [r7, #4]
 690 0008 3960     		str	r1, [r7]
 362:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00;
 691              		.loc 1 362 0
 692 000a 0023     		movs	r3, #0
 693 000c FB60     		str	r3, [r7, #12]
 363:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 364:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 694              		.loc 1 364 0
 695 000e 7A68     		ldr	r2, [r7, #4]
 696 0010 4FF48053 		mov	r3, #4096
 697 0014 C4F20103 		movt	r3, 16385
 698 0018 9A42     		cmp	r2, r3
 699 001a 1CD0     		beq	.L29
 700              		.loc 1 364 0 is_stmt 0 discriminator 1
 701 001c 7A68     		ldr	r2, [r7, #4]
 702 001e 4FF48843 		mov	r3, #17408
 703 0022 C4F20003 		movt	r3, 16384
 704 0026 9A42     		cmp	r2, r3
 705 0028 15D0     		beq	.L29
 706 002a 7A68     		ldr	r2, [r7, #4]
 707 002c 4FF49043 		mov	r3, #18432
 708 0030 C4F20003 		movt	r3, 16384
 709 0034 9A42     		cmp	r2, r3
 710 0036 0ED0     		beq	.L29
 711 0038 7A68     		ldr	r2, [r7, #4]
 712 003a 4FF4A053 		mov	r3, #5120
 713 003e C4F20103 		movt	r3, 16385
 714 0042 9A42     		cmp	r2, r3
 715 0044 07D0     		beq	.L29
 716 0046 40F20000 		movw	r0, #:lower16:.LC0
 717 004a C0F20000 		movt	r0, #:upper16:.LC0
 718 004e 4FF4B671 		mov	r1, #364
 719 0052 FFF7FEFF 		bl	assert_failed
 720              	.L29:
 365:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 721              		.loc 1 365 0 is_stmt 1
 722 0056 3B68     		ldr	r3, [r7]
 723 0058 1B88     		ldrh	r3, [r3]
 724 005a 002B     		cmp	r3, #0
 725 005c 0CD0     		beq	.L30
 726              		.loc 1 365 0 is_stmt 0 discriminator 1
 727 005e 3B68     		ldr	r3, [r7]
 728 0060 1B88     		ldrh	r3, [r3]
 729 0062 B3F5006F 		cmp	r3, #2048
 730 0066 07D0     		beq	.L30
 731 0068 40F20000 		movw	r0, #:lower16:.LC0
 732 006c C0F20000 		movt	r0, #:upper16:.LC0
 733 0070 40F26D11 		movw	r1, #365
 734 0074 FFF7FEFF 		bl	assert_failed
 735              	.L30:
 366:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 736              		.loc 1 366 0 is_stmt 1
 737 0078 3B68     		ldr	r3, [r7]
 738 007a 5B88     		ldrh	r3, [r3, #2]
 739 007c 002B     		cmp	r3, #0
 740 007e 0CD0     		beq	.L31
 741              		.loc 1 366 0 is_stmt 0 discriminator 1
 742 0080 3B68     		ldr	r3, [r7]
 743 0082 5B88     		ldrh	r3, [r3, #2]
 744 0084 B3F5806F 		cmp	r3, #1024
 745 0088 07D0     		beq	.L31
 746 008a 40F20000 		movw	r0, #:lower16:.LC0
 747 008e C0F20000 		movt	r0, #:upper16:.LC0
 748 0092 4FF4B771 		mov	r1, #366
 749 0096 FFF7FEFF 		bl	assert_failed
 750              	.L31:
 367:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 751              		.loc 1 367 0 is_stmt 1
 752 009a 3B68     		ldr	r3, [r7]
 753 009c 9B88     		ldrh	r3, [r3, #4]
 754 009e 002B     		cmp	r3, #0
 755 00a0 0CD0     		beq	.L32
 756              		.loc 1 367 0 is_stmt 0 discriminator 1
 757 00a2 3B68     		ldr	r3, [r7]
 758 00a4 9B88     		ldrh	r3, [r3, #4]
 759 00a6 B3F5007F 		cmp	r3, #512
 760 00aa 07D0     		beq	.L32
 761 00ac 40F20000 		movw	r0, #:lower16:.LC0
 762 00b0 C0F20000 		movt	r0, #:upper16:.LC0
 763 00b4 40F26F11 		movw	r1, #367
 764 00b8 FFF7FEFF 		bl	assert_failed
 765              	.L32:
 368:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 766              		.loc 1 368 0 is_stmt 1
 767 00bc 3B68     		ldr	r3, [r7]
 768 00be DB88     		ldrh	r3, [r3, #6]
 769 00c0 002B     		cmp	r3, #0
 770 00c2 0CD0     		beq	.L33
 771              		.loc 1 368 0 is_stmt 0 discriminator 1
 772 00c4 3B68     		ldr	r3, [r7]
 773 00c6 DB88     		ldrh	r3, [r3, #6]
 774 00c8 B3F5807F 		cmp	r3, #256
 775 00cc 07D0     		beq	.L33
 776 00ce 40F20000 		movw	r0, #:lower16:.LC0
 777 00d2 C0F20000 		movt	r0, #:upper16:.LC0
 778 00d6 4FF4B871 		mov	r1, #368
 779 00da FFF7FEFF 		bl	assert_failed
 780              	.L33:
 369:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 370:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 371:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 781              		.loc 1 371 0 is_stmt 1
 782 00de 7B68     		ldr	r3, [r7, #4]
 783 00e0 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 784 00e2 9BB2     		uxth	r3, r3
 785 00e4 FB60     		str	r3, [r7, #12]
 372:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 373:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 786              		.loc 1 373 0
 787 00e6 FB68     		ldr	r3, [r7, #12]
 788 00e8 23F47063 		bic	r3, r3, #3840
 789 00ec FB60     		str	r3, [r7, #12]
 374:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 375:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 376:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 377:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 378:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 379:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 790              		.loc 1 379 0
 791 00ee 3B68     		ldr	r3, [r7]
 792 00f0 1A88     		ldrh	r2, [r3]
 793 00f2 3B68     		ldr	r3, [r7]
 794 00f4 5B88     		ldrh	r3, [r3, #2]
 380:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 795              		.loc 1 380 0
 796 00f6 1343     		orrs	r3, r3, r2
 797 00f8 9AB2     		uxth	r2, r3
 798 00fa 3B68     		ldr	r3, [r7]
 799 00fc 9B88     		ldrh	r3, [r3, #4]
 800 00fe 1343     		orrs	r3, r3, r2
 801 0100 9AB2     		uxth	r2, r3
 802 0102 3B68     		ldr	r3, [r7]
 803 0104 DB88     		ldrh	r3, [r3, #6]
 804 0106 1343     		orrs	r3, r3, r2
 805 0108 9BB2     		uxth	r3, r3
 379:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 806              		.loc 1 379 0
 807 010a FA68     		ldr	r2, [r7, #12]
 808 010c 1343     		orrs	r3, r3, r2
 809 010e FB60     		str	r3, [r7, #12]
 381:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 382:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 810              		.loc 1 382 0
 811 0110 FB68     		ldr	r3, [r7, #12]
 812 0112 9AB2     		uxth	r2, r3
 813 0114 7B68     		ldr	r3, [r7, #4]
 814 0116 1A82     		strh	r2, [r3, #16]	@ movhi
 383:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 815              		.loc 1 383 0
 816 0118 1037     		adds	r7, r7, #16
 817 011a BD46     		mov	sp, r7
 818              		@ sp needed
 819 011c 80BD     		pop	{r7, pc}
 820              		.cfi_endproc
 821              	.LFE113:
 823 011e 00BF     		.section	.text.USART_ClockStructInit,"ax",%progbits
 824              		.align	2
 825              		.global	USART_ClockStructInit
 826              		.thumb
 827              		.thumb_func
 829              	USART_ClockStructInit:
 830              	.LFB114:
 384:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 385:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 386:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 387:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
 388:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         which will be initialized.
 389:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 390:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 391:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 392:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 831              		.loc 1 392 0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 8
 834              		@ frame_needed = 1, uses_anonymous_args = 0
 835              		@ link register save eliminated.
 836 0000 80B4     		push	{r7}
 837              	.LCFI12:
 838              		.cfi_def_cfa_offset 4
 839              		.cfi_offset 7, -4
 840 0002 83B0     		sub	sp, sp, #12
 841              	.LCFI13:
 842              		.cfi_def_cfa_offset 16
 843 0004 00AF     		add	r7, sp, #0
 844              	.LCFI14:
 845              		.cfi_def_cfa_register 7
 846 0006 7860     		str	r0, [r7, #4]
 393:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_ClockInitStruct members default value */
 394:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 847              		.loc 1 394 0
 848 0008 7B68     		ldr	r3, [r7, #4]
 849 000a 0022     		movs	r2, #0
 850 000c 1A80     		strh	r2, [r3]	@ movhi
 395:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 851              		.loc 1 395 0
 852 000e 7B68     		ldr	r3, [r7, #4]
 853 0010 0022     		movs	r2, #0
 854 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 396:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 855              		.loc 1 396 0
 856 0014 7B68     		ldr	r3, [r7, #4]
 857 0016 0022     		movs	r2, #0
 858 0018 9A80     		strh	r2, [r3, #4]	@ movhi
 397:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 859              		.loc 1 397 0
 860 001a 7B68     		ldr	r3, [r7, #4]
 861 001c 0022     		movs	r2, #0
 862 001e DA80     		strh	r2, [r3, #6]	@ movhi
 398:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 863              		.loc 1 398 0
 864 0020 0C37     		adds	r7, r7, #12
 865 0022 BD46     		mov	sp, r7
 866              		@ sp needed
 867 0024 5DF8047B 		ldr	r7, [sp], #4
 868 0028 7047     		bx	lr
 869              		.cfi_endproc
 870              	.LFE114:
 872 002a 00BF     		.section	.text.USART_Cmd,"ax",%progbits
 873              		.align	2
 874              		.global	USART_Cmd
 875              		.thumb
 876              		.thumb_func
 878              	USART_Cmd:
 879              	.LFB115:
 399:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 400:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 401:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 402:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 403:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 404:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 405:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 406:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 407:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 408:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 409:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 880              		.loc 1 409 0
 881              		.cfi_startproc
 882              		@ args = 0, pretend = 0, frame = 8
 883              		@ frame_needed = 1, uses_anonymous_args = 0
 884 0000 80B5     		push	{r7, lr}
 885              	.LCFI15:
 886              		.cfi_def_cfa_offset 8
 887              		.cfi_offset 7, -8
 888              		.cfi_offset 14, -4
 889 0002 82B0     		sub	sp, sp, #8
 890              	.LCFI16:
 891              		.cfi_def_cfa_offset 16
 892 0004 00AF     		add	r7, sp, #0
 893              	.LCFI17:
 894              		.cfi_def_cfa_register 7
 895 0006 7860     		str	r0, [r7, #4]
 896 0008 0B46     		mov	r3, r1
 897 000a FB70     		strb	r3, [r7, #3]
 410:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 411:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 898              		.loc 1 411 0
 899 000c 7A68     		ldr	r2, [r7, #4]
 900 000e 4FF48053 		mov	r3, #4096
 901 0012 C4F20103 		movt	r3, 16385
 902 0016 9A42     		cmp	r2, r3
 903 0018 2AD0     		beq	.L36
 904              		.loc 1 411 0 is_stmt 0 discriminator 1
 905 001a 7A68     		ldr	r2, [r7, #4]
 906 001c 4FF48843 		mov	r3, #17408
 907 0020 C4F20003 		movt	r3, 16384
 908 0024 9A42     		cmp	r2, r3
 909 0026 23D0     		beq	.L36
 910 0028 7A68     		ldr	r2, [r7, #4]
 911 002a 4FF49043 		mov	r3, #18432
 912 002e C4F20003 		movt	r3, 16384
 913 0032 9A42     		cmp	r2, r3
 914 0034 1CD0     		beq	.L36
 915 0036 7A68     		ldr	r2, [r7, #4]
 916 0038 4FF49843 		mov	r3, #19456
 917 003c C4F20003 		movt	r3, 16384
 918 0040 9A42     		cmp	r2, r3
 919 0042 15D0     		beq	.L36
 920 0044 7A68     		ldr	r2, [r7, #4]
 921 0046 4FF4A043 		mov	r3, #20480
 922 004a C4F20003 		movt	r3, 16384
 923 004e 9A42     		cmp	r2, r3
 924 0050 0ED0     		beq	.L36
 925 0052 7A68     		ldr	r2, [r7, #4]
 926 0054 4FF4A053 		mov	r3, #5120
 927 0058 C4F20103 		movt	r3, 16385
 928 005c 9A42     		cmp	r2, r3
 929 005e 07D0     		beq	.L36
 930 0060 40F20000 		movw	r0, #:lower16:.LC0
 931 0064 C0F20000 		movt	r0, #:upper16:.LC0
 932 0068 40F29B11 		movw	r1, #411
 933 006c FFF7FEFF 		bl	assert_failed
 934              	.L36:
 412:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 935              		.loc 1 412 0 is_stmt 1
 936 0070 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 937 0072 002B     		cmp	r3, #0
 938 0074 0AD0     		beq	.L37
 939              		.loc 1 412 0 is_stmt 0 discriminator 1
 940 0076 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 941 0078 012B     		cmp	r3, #1
 942 007a 07D0     		beq	.L37
 943 007c 40F20000 		movw	r0, #:lower16:.LC0
 944 0080 C0F20000 		movt	r0, #:upper16:.LC0
 945 0084 4FF4CE71 		mov	r1, #412
 946 0088 FFF7FEFF 		bl	assert_failed
 947              	.L37:
 413:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 414:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 948              		.loc 1 414 0 is_stmt 1
 949 008c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 950 008e 002B     		cmp	r3, #0
 951 0090 08D0     		beq	.L38
 415:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 416:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 417:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 952              		.loc 1 417 0
 953 0092 7B68     		ldr	r3, [r7, #4]
 954 0094 9B89     		ldrh	r3, [r3, #12]	@ movhi
 955 0096 9BB2     		uxth	r3, r3
 956 0098 43F40053 		orr	r3, r3, #8192
 957 009c 9AB2     		uxth	r2, r3
 958 009e 7B68     		ldr	r3, [r7, #4]
 959 00a0 9A81     		strh	r2, [r3, #12]	@ movhi
 960 00a2 07E0     		b	.L35
 961              	.L38:
 418:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 419:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 420:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 421:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 422:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 962              		.loc 1 422 0
 963 00a4 7B68     		ldr	r3, [r7, #4]
 964 00a6 9B89     		ldrh	r3, [r3, #12]	@ movhi
 965 00a8 9BB2     		uxth	r3, r3
 966 00aa 23F40053 		bic	r3, r3, #8192
 967 00ae 9AB2     		uxth	r2, r3
 968 00b0 7B68     		ldr	r3, [r7, #4]
 969 00b2 9A81     		strh	r2, [r3, #12]	@ movhi
 970              	.L35:
 423:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 424:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 971              		.loc 1 424 0
 972 00b4 0837     		adds	r7, r7, #8
 973 00b6 BD46     		mov	sp, r7
 974              		@ sp needed
 975 00b8 80BD     		pop	{r7, pc}
 976              		.cfi_endproc
 977              	.LFE115:
 979 00ba 00BF     		.section	.text.USART_SetPrescaler,"ax",%progbits
 980              		.align	2
 981              		.global	USART_SetPrescaler
 982              		.thumb
 983              		.thumb_func
 985              	USART_SetPrescaler:
 986              	.LFB116:
 425:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 426:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 427:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the system clock prescaler.
 428:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 429:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 430:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 431:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 432:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 433:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 434:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 435:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** { 
 987              		.loc 1 435 0
 988              		.cfi_startproc
 989              		@ args = 0, pretend = 0, frame = 8
 990              		@ frame_needed = 1, uses_anonymous_args = 0
 991 0000 80B5     		push	{r7, lr}
 992              	.LCFI18:
 993              		.cfi_def_cfa_offset 8
 994              		.cfi_offset 7, -8
 995              		.cfi_offset 14, -4
 996 0002 82B0     		sub	sp, sp, #8
 997              	.LCFI19:
 998              		.cfi_def_cfa_offset 16
 999 0004 00AF     		add	r7, sp, #0
 1000              	.LCFI20:
 1001              		.cfi_def_cfa_register 7
 1002 0006 7860     		str	r0, [r7, #4]
 1003 0008 0B46     		mov	r3, r1
 1004 000a FB70     		strb	r3, [r7, #3]
 436:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 437:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1005              		.loc 1 437 0
 1006 000c 7A68     		ldr	r2, [r7, #4]
 1007 000e 4FF48053 		mov	r3, #4096
 1008 0012 C4F20103 		movt	r3, 16385
 1009 0016 9A42     		cmp	r2, r3
 1010 0018 2AD0     		beq	.L41
 1011              		.loc 1 437 0 is_stmt 0 discriminator 1
 1012 001a 7A68     		ldr	r2, [r7, #4]
 1013 001c 4FF48843 		mov	r3, #17408
 1014 0020 C4F20003 		movt	r3, 16384
 1015 0024 9A42     		cmp	r2, r3
 1016 0026 23D0     		beq	.L41
 1017 0028 7A68     		ldr	r2, [r7, #4]
 1018 002a 4FF49043 		mov	r3, #18432
 1019 002e C4F20003 		movt	r3, 16384
 1020 0032 9A42     		cmp	r2, r3
 1021 0034 1CD0     		beq	.L41
 1022 0036 7A68     		ldr	r2, [r7, #4]
 1023 0038 4FF49843 		mov	r3, #19456
 1024 003c C4F20003 		movt	r3, 16384
 1025 0040 9A42     		cmp	r2, r3
 1026 0042 15D0     		beq	.L41
 1027 0044 7A68     		ldr	r2, [r7, #4]
 1028 0046 4FF4A043 		mov	r3, #20480
 1029 004a C4F20003 		movt	r3, 16384
 1030 004e 9A42     		cmp	r2, r3
 1031 0050 0ED0     		beq	.L41
 1032 0052 7A68     		ldr	r2, [r7, #4]
 1033 0054 4FF4A053 		mov	r3, #5120
 1034 0058 C4F20103 		movt	r3, 16385
 1035 005c 9A42     		cmp	r2, r3
 1036 005e 07D0     		beq	.L41
 1037 0060 40F20000 		movw	r0, #:lower16:.LC0
 1038 0064 C0F20000 		movt	r0, #:upper16:.LC0
 1039 0068 40F2B511 		movw	r1, #437
 1040 006c FFF7FEFF 		bl	assert_failed
 1041              	.L41:
 438:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 439:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART prescaler */
 440:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 1042              		.loc 1 440 0 is_stmt 1
 1043 0070 7B68     		ldr	r3, [r7, #4]
 1044 0072 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1045 0074 9BB2     		uxth	r3, r3
 1046 0076 23F0FF03 		bic	r3, r3, #255
 1047 007a 9AB2     		uxth	r2, r3
 1048 007c 7B68     		ldr	r3, [r7, #4]
 1049 007e 1A83     		strh	r2, [r3, #24]	@ movhi
 441:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART prescaler */
 442:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 1050              		.loc 1 442 0
 1051 0080 7B68     		ldr	r3, [r7, #4]
 1052 0082 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1053 0084 9AB2     		uxth	r2, r3
 1054 0086 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1055 0088 9BB2     		uxth	r3, r3
 1056 008a 1343     		orrs	r3, r3, r2
 1057 008c 9AB2     		uxth	r2, r3
 1058 008e 7B68     		ldr	r3, [r7, #4]
 1059 0090 1A83     		strh	r2, [r3, #24]	@ movhi
 443:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1060              		.loc 1 443 0
 1061 0092 0837     		adds	r7, r7, #8
 1062 0094 BD46     		mov	sp, r7
 1063              		@ sp needed
 1064 0096 80BD     		pop	{r7, pc}
 1065              		.cfi_endproc
 1066              	.LFE116:
 1068              		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 1069              		.align	2
 1070              		.global	USART_OverSampling8Cmd
 1071              		.thumb
 1072              		.thumb_func
 1074              	USART_OverSampling8Cmd:
 1075              	.LFB117:
 444:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 445:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 446:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 447:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 448:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         in order to have correct baudrate Divider value.
 449:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 450:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 451:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 452:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 453:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 454:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 455:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 456:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1076              		.loc 1 456 0
 1077              		.cfi_startproc
 1078              		@ args = 0, pretend = 0, frame = 8
 1079              		@ frame_needed = 1, uses_anonymous_args = 0
 1080 0000 80B5     		push	{r7, lr}
 1081              	.LCFI21:
 1082              		.cfi_def_cfa_offset 8
 1083              		.cfi_offset 7, -8
 1084              		.cfi_offset 14, -4
 1085 0002 82B0     		sub	sp, sp, #8
 1086              	.LCFI22:
 1087              		.cfi_def_cfa_offset 16
 1088 0004 00AF     		add	r7, sp, #0
 1089              	.LCFI23:
 1090              		.cfi_def_cfa_register 7
 1091 0006 7860     		str	r0, [r7, #4]
 1092 0008 0B46     		mov	r3, r1
 1093 000a FB70     		strb	r3, [r7, #3]
 457:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 458:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1094              		.loc 1 458 0
 1095 000c 7A68     		ldr	r2, [r7, #4]
 1096 000e 4FF48053 		mov	r3, #4096
 1097 0012 C4F20103 		movt	r3, 16385
 1098 0016 9A42     		cmp	r2, r3
 1099 0018 2AD0     		beq	.L43
 1100              		.loc 1 458 0 is_stmt 0 discriminator 1
 1101 001a 7A68     		ldr	r2, [r7, #4]
 1102 001c 4FF48843 		mov	r3, #17408
 1103 0020 C4F20003 		movt	r3, 16384
 1104 0024 9A42     		cmp	r2, r3
 1105 0026 23D0     		beq	.L43
 1106 0028 7A68     		ldr	r2, [r7, #4]
 1107 002a 4FF49043 		mov	r3, #18432
 1108 002e C4F20003 		movt	r3, 16384
 1109 0032 9A42     		cmp	r2, r3
 1110 0034 1CD0     		beq	.L43
 1111 0036 7A68     		ldr	r2, [r7, #4]
 1112 0038 4FF49843 		mov	r3, #19456
 1113 003c C4F20003 		movt	r3, 16384
 1114 0040 9A42     		cmp	r2, r3
 1115 0042 15D0     		beq	.L43
 1116 0044 7A68     		ldr	r2, [r7, #4]
 1117 0046 4FF4A043 		mov	r3, #20480
 1118 004a C4F20003 		movt	r3, 16384
 1119 004e 9A42     		cmp	r2, r3
 1120 0050 0ED0     		beq	.L43
 1121 0052 7A68     		ldr	r2, [r7, #4]
 1122 0054 4FF4A053 		mov	r3, #5120
 1123 0058 C4F20103 		movt	r3, 16385
 1124 005c 9A42     		cmp	r2, r3
 1125 005e 07D0     		beq	.L43
 1126 0060 40F20000 		movw	r0, #:lower16:.LC0
 1127 0064 C0F20000 		movt	r0, #:upper16:.LC0
 1128 0068 4FF4E571 		mov	r1, #458
 1129 006c FFF7FEFF 		bl	assert_failed
 1130              	.L43:
 459:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1131              		.loc 1 459 0 is_stmt 1
 1132 0070 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1133 0072 002B     		cmp	r3, #0
 1134 0074 0AD0     		beq	.L44
 1135              		.loc 1 459 0 is_stmt 0 discriminator 1
 1136 0076 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1137 0078 012B     		cmp	r3, #1
 1138 007a 07D0     		beq	.L44
 1139 007c 40F20000 		movw	r0, #:lower16:.LC0
 1140 0080 C0F20000 		movt	r0, #:upper16:.LC0
 1141 0084 40F2CB11 		movw	r1, #459
 1142 0088 FFF7FEFF 		bl	assert_failed
 1143              	.L44:
 460:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 461:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1144              		.loc 1 461 0 is_stmt 1
 1145 008c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1146 008e 002B     		cmp	r3, #0
 1147 0090 0AD0     		beq	.L45
 462:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 463:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 464:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 1148              		.loc 1 464 0
 1149 0092 7B68     		ldr	r3, [r7, #4]
 1150 0094 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1151 0096 9BB2     		uxth	r3, r3
 1152 0098 6FEA4343 		mvn	r3, r3, lsl #17
 1153 009c 6FEA5343 		mvn	r3, r3, lsr #17
 1154 00a0 9AB2     		uxth	r2, r3
 1155 00a2 7B68     		ldr	r3, [r7, #4]
 1156 00a4 9A81     		strh	r2, [r3, #12]	@ movhi
 1157 00a6 07E0     		b	.L42
 1158              	.L45:
 465:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 466:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 467:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 468:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 469:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 1159              		.loc 1 469 0
 1160 00a8 7B68     		ldr	r3, [r7, #4]
 1161 00aa 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1162 00ac 9BB2     		uxth	r3, r3
 1163 00ae C3F30E03 		ubfx	r3, r3, #0, #15
 1164 00b2 9AB2     		uxth	r2, r3
 1165 00b4 7B68     		ldr	r3, [r7, #4]
 1166 00b6 9A81     		strh	r2, [r3, #12]	@ movhi
 1167              	.L42:
 470:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 471:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }  
 1168              		.loc 1 471 0
 1169 00b8 0837     		adds	r7, r7, #8
 1170 00ba BD46     		mov	sp, r7
 1171              		@ sp needed
 1172 00bc 80BD     		pop	{r7, pc}
 1173              		.cfi_endproc
 1174              	.LFE117:
 1176 00be 00BF     		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 1177              		.align	2
 1178              		.global	USART_OneBitMethodCmd
 1179              		.thumb
 1180              		.thumb_func
 1182              	USART_OneBitMethodCmd:
 1183              	.LFB118:
 472:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 473:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 474:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 475:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 476:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 477:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 478:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 479:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 480:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 481:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 482:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1184              		.loc 1 482 0
 1185              		.cfi_startproc
 1186              		@ args = 0, pretend = 0, frame = 8
 1187              		@ frame_needed = 1, uses_anonymous_args = 0
 1188 0000 80B5     		push	{r7, lr}
 1189              	.LCFI24:
 1190              		.cfi_def_cfa_offset 8
 1191              		.cfi_offset 7, -8
 1192              		.cfi_offset 14, -4
 1193 0002 82B0     		sub	sp, sp, #8
 1194              	.LCFI25:
 1195              		.cfi_def_cfa_offset 16
 1196 0004 00AF     		add	r7, sp, #0
 1197              	.LCFI26:
 1198              		.cfi_def_cfa_register 7
 1199 0006 7860     		str	r0, [r7, #4]
 1200 0008 0B46     		mov	r3, r1
 1201 000a FB70     		strb	r3, [r7, #3]
 483:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 484:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1202              		.loc 1 484 0
 1203 000c 7A68     		ldr	r2, [r7, #4]
 1204 000e 4FF48053 		mov	r3, #4096
 1205 0012 C4F20103 		movt	r3, 16385
 1206 0016 9A42     		cmp	r2, r3
 1207 0018 2AD0     		beq	.L48
 1208              		.loc 1 484 0 is_stmt 0 discriminator 1
 1209 001a 7A68     		ldr	r2, [r7, #4]
 1210 001c 4FF48843 		mov	r3, #17408
 1211 0020 C4F20003 		movt	r3, 16384
 1212 0024 9A42     		cmp	r2, r3
 1213 0026 23D0     		beq	.L48
 1214 0028 7A68     		ldr	r2, [r7, #4]
 1215 002a 4FF49043 		mov	r3, #18432
 1216 002e C4F20003 		movt	r3, 16384
 1217 0032 9A42     		cmp	r2, r3
 1218 0034 1CD0     		beq	.L48
 1219 0036 7A68     		ldr	r2, [r7, #4]
 1220 0038 4FF49843 		mov	r3, #19456
 1221 003c C4F20003 		movt	r3, 16384
 1222 0040 9A42     		cmp	r2, r3
 1223 0042 15D0     		beq	.L48
 1224 0044 7A68     		ldr	r2, [r7, #4]
 1225 0046 4FF4A043 		mov	r3, #20480
 1226 004a C4F20003 		movt	r3, 16384
 1227 004e 9A42     		cmp	r2, r3
 1228 0050 0ED0     		beq	.L48
 1229 0052 7A68     		ldr	r2, [r7, #4]
 1230 0054 4FF4A053 		mov	r3, #5120
 1231 0058 C4F20103 		movt	r3, 16385
 1232 005c 9A42     		cmp	r2, r3
 1233 005e 07D0     		beq	.L48
 1234 0060 40F20000 		movw	r0, #:lower16:.LC0
 1235 0064 C0F20000 		movt	r0, #:upper16:.LC0
 1236 0068 4FF4F271 		mov	r1, #484
 1237 006c FFF7FEFF 		bl	assert_failed
 1238              	.L48:
 485:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1239              		.loc 1 485 0 is_stmt 1
 1240 0070 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1241 0072 002B     		cmp	r3, #0
 1242 0074 0AD0     		beq	.L49
 1243              		.loc 1 485 0 is_stmt 0 discriminator 1
 1244 0076 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1245 0078 012B     		cmp	r3, #1
 1246 007a 07D0     		beq	.L49
 1247 007c 40F20000 		movw	r0, #:lower16:.LC0
 1248 0080 C0F20000 		movt	r0, #:upper16:.LC0
 1249 0084 40F2E511 		movw	r1, #485
 1250 0088 FFF7FEFF 		bl	assert_failed
 1251              	.L49:
 486:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 487:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1252              		.loc 1 487 0 is_stmt 1
 1253 008c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1254 008e 002B     		cmp	r3, #0
 1255 0090 08D0     		beq	.L50
 488:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 489:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 490:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 1256              		.loc 1 490 0
 1257 0092 7B68     		ldr	r3, [r7, #4]
 1258 0094 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1259 0096 9BB2     		uxth	r3, r3
 1260 0098 43F40063 		orr	r3, r3, #2048
 1261 009c 9AB2     		uxth	r2, r3
 1262 009e 7B68     		ldr	r3, [r7, #4]
 1263 00a0 9A82     		strh	r2, [r3, #20]	@ movhi
 1264 00a2 07E0     		b	.L47
 1265              	.L50:
 491:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 492:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 493:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 494:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 495:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 1266              		.loc 1 495 0
 1267 00a4 7B68     		ldr	r3, [r7, #4]
 1268 00a6 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1269 00a8 9BB2     		uxth	r3, r3
 1270 00aa 23F40063 		bic	r3, r3, #2048
 1271 00ae 9AB2     		uxth	r2, r3
 1272 00b0 7B68     		ldr	r3, [r7, #4]
 1273 00b2 9A82     		strh	r2, [r3, #20]	@ movhi
 1274              	.L47:
 496:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 497:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1275              		.loc 1 497 0
 1276 00b4 0837     		adds	r7, r7, #8
 1277 00b6 BD46     		mov	sp, r7
 1278              		@ sp needed
 1279 00b8 80BD     		pop	{r7, pc}
 1280              		.cfi_endproc
 1281              	.LFE118:
 1283 00ba 00BF     		.section	.text.USART_SendData,"ax",%progbits
 1284              		.align	2
 1285              		.global	USART_SendData
 1286              		.thumb
 1287              		.thumb_func
 1289              	USART_SendData:
 1290              	.LFB119:
 498:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 499:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 500:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 501:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 502:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 503:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 504:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Data transfers functions 
 505:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 506:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 507:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 508:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                             Data transfers functions
 509:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 510:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 511:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART data 
 512:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   transfers.
 513:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 514:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   During an USART reception, data shifts in least significant bit first through 
 515:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 516:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   between the internal bus and the received shift register.
 517:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 518:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   When a transmission is taking place, a write instruction to the USART_DR register 
 519:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   stores the data in the TDR register and which is copied in the shift register 
 520:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   at the end of the current transmission.
 521:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 522:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The read access of the USART_DR register can be done using the USART_ReceiveData()
 523:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 524:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   can be done using USART_SendData() function and stores the written data into 
 525:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   TDR buffer.
 526:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 527:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 528:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 529:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 530:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 531:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 532:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 533:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 534:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 535:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  Data: the data to transmit.
 536:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 537:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 538:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 539:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1291              		.loc 1 539 0
 1292              		.cfi_startproc
 1293              		@ args = 0, pretend = 0, frame = 8
 1294              		@ frame_needed = 1, uses_anonymous_args = 0
 1295 0000 80B5     		push	{r7, lr}
 1296              	.LCFI27:
 1297              		.cfi_def_cfa_offset 8
 1298              		.cfi_offset 7, -8
 1299              		.cfi_offset 14, -4
 1300 0002 82B0     		sub	sp, sp, #8
 1301              	.LCFI28:
 1302              		.cfi_def_cfa_offset 16
 1303 0004 00AF     		add	r7, sp, #0
 1304              	.LCFI29:
 1305              		.cfi_def_cfa_register 7
 1306 0006 7860     		str	r0, [r7, #4]
 1307 0008 0B46     		mov	r3, r1
 1308 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 540:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 541:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1309              		.loc 1 541 0
 1310 000c 7A68     		ldr	r2, [r7, #4]
 1311 000e 4FF48053 		mov	r3, #4096
 1312 0012 C4F20103 		movt	r3, 16385
 1313 0016 9A42     		cmp	r2, r3
 1314 0018 2AD0     		beq	.L53
 1315              		.loc 1 541 0 is_stmt 0 discriminator 1
 1316 001a 7A68     		ldr	r2, [r7, #4]
 1317 001c 4FF48843 		mov	r3, #17408
 1318 0020 C4F20003 		movt	r3, 16384
 1319 0024 9A42     		cmp	r2, r3
 1320 0026 23D0     		beq	.L53
 1321 0028 7A68     		ldr	r2, [r7, #4]
 1322 002a 4FF49043 		mov	r3, #18432
 1323 002e C4F20003 		movt	r3, 16384
 1324 0032 9A42     		cmp	r2, r3
 1325 0034 1CD0     		beq	.L53
 1326 0036 7A68     		ldr	r2, [r7, #4]
 1327 0038 4FF49843 		mov	r3, #19456
 1328 003c C4F20003 		movt	r3, 16384
 1329 0040 9A42     		cmp	r2, r3
 1330 0042 15D0     		beq	.L53
 1331 0044 7A68     		ldr	r2, [r7, #4]
 1332 0046 4FF4A043 		mov	r3, #20480
 1333 004a C4F20003 		movt	r3, 16384
 1334 004e 9A42     		cmp	r2, r3
 1335 0050 0ED0     		beq	.L53
 1336 0052 7A68     		ldr	r2, [r7, #4]
 1337 0054 4FF4A053 		mov	r3, #5120
 1338 0058 C4F20103 		movt	r3, 16385
 1339 005c 9A42     		cmp	r2, r3
 1340 005e 07D0     		beq	.L53
 1341 0060 40F20000 		movw	r0, #:lower16:.LC0
 1342 0064 C0F20000 		movt	r0, #:upper16:.LC0
 1343 0068 40F21D21 		movw	r1, #541
 1344 006c FFF7FEFF 		bl	assert_failed
 1345              	.L53:
 542:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 1346              		.loc 1 542 0 is_stmt 1
 1347 0070 7B88     		ldrh	r3, [r7, #2]
 1348 0072 B3F5007F 		cmp	r3, #512
 1349 0076 07D3     		bcc	.L54
 1350              		.loc 1 542 0 is_stmt 0 discriminator 1
 1351 0078 40F20000 		movw	r0, #:lower16:.LC0
 1352 007c C0F20000 		movt	r0, #:upper16:.LC0
 1353 0080 40F21E21 		movw	r1, #542
 1354 0084 FFF7FEFF 		bl	assert_failed
 1355              	.L54:
 543:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 544:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Transmit Data */
 545:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 1356              		.loc 1 545 0 is_stmt 1
 1357 0088 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1358 008a C3F30803 		ubfx	r3, r3, #0, #9
 1359 008e 9AB2     		uxth	r2, r3
 1360 0090 7B68     		ldr	r3, [r7, #4]
 1361 0092 9A80     		strh	r2, [r3, #4]	@ movhi
 546:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1362              		.loc 1 546 0
 1363 0094 0837     		adds	r7, r7, #8
 1364 0096 BD46     		mov	sp, r7
 1365              		@ sp needed
 1366 0098 80BD     		pop	{r7, pc}
 1367              		.cfi_endproc
 1368              	.LFE119:
 1370 009a 00BF     		.section	.text.USART_ReceiveData,"ax",%progbits
 1371              		.align	2
 1372              		.global	USART_ReceiveData
 1373              		.thumb
 1374              		.thumb_func
 1376              	USART_ReceiveData:
 1377              	.LFB120:
 547:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 548:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 549:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 550:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 551:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 552:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The received data.
 553:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 554:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 555:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1378              		.loc 1 555 0
 1379              		.cfi_startproc
 1380              		@ args = 0, pretend = 0, frame = 8
 1381              		@ frame_needed = 1, uses_anonymous_args = 0
 1382 0000 80B5     		push	{r7, lr}
 1383              	.LCFI30:
 1384              		.cfi_def_cfa_offset 8
 1385              		.cfi_offset 7, -8
 1386              		.cfi_offset 14, -4
 1387 0002 82B0     		sub	sp, sp, #8
 1388              	.LCFI31:
 1389              		.cfi_def_cfa_offset 16
 1390 0004 00AF     		add	r7, sp, #0
 1391              	.LCFI32:
 1392              		.cfi_def_cfa_register 7
 1393 0006 7860     		str	r0, [r7, #4]
 556:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 557:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1394              		.loc 1 557 0
 1395 0008 7A68     		ldr	r2, [r7, #4]
 1396 000a 4FF48053 		mov	r3, #4096
 1397 000e C4F20103 		movt	r3, 16385
 1398 0012 9A42     		cmp	r2, r3
 1399 0014 2AD0     		beq	.L56
 1400              		.loc 1 557 0 is_stmt 0 discriminator 1
 1401 0016 7A68     		ldr	r2, [r7, #4]
 1402 0018 4FF48843 		mov	r3, #17408
 1403 001c C4F20003 		movt	r3, 16384
 1404 0020 9A42     		cmp	r2, r3
 1405 0022 23D0     		beq	.L56
 1406 0024 7A68     		ldr	r2, [r7, #4]
 1407 0026 4FF49043 		mov	r3, #18432
 1408 002a C4F20003 		movt	r3, 16384
 1409 002e 9A42     		cmp	r2, r3
 1410 0030 1CD0     		beq	.L56
 1411 0032 7A68     		ldr	r2, [r7, #4]
 1412 0034 4FF49843 		mov	r3, #19456
 1413 0038 C4F20003 		movt	r3, 16384
 1414 003c 9A42     		cmp	r2, r3
 1415 003e 15D0     		beq	.L56
 1416 0040 7A68     		ldr	r2, [r7, #4]
 1417 0042 4FF4A043 		mov	r3, #20480
 1418 0046 C4F20003 		movt	r3, 16384
 1419 004a 9A42     		cmp	r2, r3
 1420 004c 0ED0     		beq	.L56
 1421 004e 7A68     		ldr	r2, [r7, #4]
 1422 0050 4FF4A053 		mov	r3, #5120
 1423 0054 C4F20103 		movt	r3, 16385
 1424 0058 9A42     		cmp	r2, r3
 1425 005a 07D0     		beq	.L56
 1426 005c 40F20000 		movw	r0, #:lower16:.LC0
 1427 0060 C0F20000 		movt	r0, #:upper16:.LC0
 1428 0064 40F22D21 		movw	r1, #557
 1429 0068 FFF7FEFF 		bl	assert_failed
 1430              	.L56:
 558:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 559:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Receive Data */
 560:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 1431              		.loc 1 560 0 is_stmt 1
 1432 006c 7B68     		ldr	r3, [r7, #4]
 1433 006e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1434 0070 9BB2     		uxth	r3, r3
 1435 0072 C3F30803 		ubfx	r3, r3, #0, #9
 1436 0076 9BB2     		uxth	r3, r3
 561:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1437              		.loc 1 561 0
 1438 0078 1846     		mov	r0, r3
 1439 007a 0837     		adds	r7, r7, #8
 1440 007c BD46     		mov	sp, r7
 1441              		@ sp needed
 1442 007e 80BD     		pop	{r7, pc}
 1443              		.cfi_endproc
 1444              	.LFE120:
 1446              		.section	.text.USART_SetAddress,"ax",%progbits
 1447              		.align	2
 1448              		.global	USART_SetAddress
 1449              		.thumb
 1450              		.thumb_func
 1452              	USART_SetAddress:
 1453              	.LFB121:
 562:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 563:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 564:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 565:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 566:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 567:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 568:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 569:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 570:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 571:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 572:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                     Multi-Processor Communication functions
 573:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 574:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 575:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 576:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   multiprocessor communication.
 577:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 578:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   For instance one of the USARTs can be the master, its TX output is connected to 
 579:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX input of the other USART. The others are slaves, their respective TX outputs 
 580:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   are logically ANDed together and connected to the RX input of the master.
 581:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 582:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART multiprocessor communication is possible through the following procedure:
 583:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode transmitter 
 584:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 585:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 586:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 587:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 588:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using USART_WakeUpConfig() function only for the slaves.
 589:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the USART using the USART_Cmd() function.
 590:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 591:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 592:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART Slave exit from mute mode when receive the wake up condition.
 593:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 594:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 595:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 596:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 597:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 598:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 599:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the address of the USART node.
 600:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 601:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 602:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 603:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 604:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 605:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 606:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1454              		.loc 1 606 0
 1455              		.cfi_startproc
 1456              		@ args = 0, pretend = 0, frame = 8
 1457              		@ frame_needed = 1, uses_anonymous_args = 0
 1458 0000 80B5     		push	{r7, lr}
 1459              	.LCFI33:
 1460              		.cfi_def_cfa_offset 8
 1461              		.cfi_offset 7, -8
 1462              		.cfi_offset 14, -4
 1463 0002 82B0     		sub	sp, sp, #8
 1464              	.LCFI34:
 1465              		.cfi_def_cfa_offset 16
 1466 0004 00AF     		add	r7, sp, #0
 1467              	.LCFI35:
 1468              		.cfi_def_cfa_register 7
 1469 0006 7860     		str	r0, [r7, #4]
 1470 0008 0B46     		mov	r3, r1
 1471 000a FB70     		strb	r3, [r7, #3]
 607:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 608:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1472              		.loc 1 608 0
 1473 000c 7A68     		ldr	r2, [r7, #4]
 1474 000e 4FF48053 		mov	r3, #4096
 1475 0012 C4F20103 		movt	r3, 16385
 1476 0016 9A42     		cmp	r2, r3
 1477 0018 2AD0     		beq	.L59
 1478              		.loc 1 608 0 is_stmt 0 discriminator 1
 1479 001a 7A68     		ldr	r2, [r7, #4]
 1480 001c 4FF48843 		mov	r3, #17408
 1481 0020 C4F20003 		movt	r3, 16384
 1482 0024 9A42     		cmp	r2, r3
 1483 0026 23D0     		beq	.L59
 1484 0028 7A68     		ldr	r2, [r7, #4]
 1485 002a 4FF49043 		mov	r3, #18432
 1486 002e C4F20003 		movt	r3, 16384
 1487 0032 9A42     		cmp	r2, r3
 1488 0034 1CD0     		beq	.L59
 1489 0036 7A68     		ldr	r2, [r7, #4]
 1490 0038 4FF49843 		mov	r3, #19456
 1491 003c C4F20003 		movt	r3, 16384
 1492 0040 9A42     		cmp	r2, r3
 1493 0042 15D0     		beq	.L59
 1494 0044 7A68     		ldr	r2, [r7, #4]
 1495 0046 4FF4A043 		mov	r3, #20480
 1496 004a C4F20003 		movt	r3, 16384
 1497 004e 9A42     		cmp	r2, r3
 1498 0050 0ED0     		beq	.L59
 1499 0052 7A68     		ldr	r2, [r7, #4]
 1500 0054 4FF4A053 		mov	r3, #5120
 1501 0058 C4F20103 		movt	r3, 16385
 1502 005c 9A42     		cmp	r2, r3
 1503 005e 07D0     		beq	.L59
 1504 0060 40F20000 		movw	r0, #:lower16:.LC0
 1505 0064 C0F20000 		movt	r0, #:upper16:.LC0
 1506 0068 4FF41871 		mov	r1, #608
 1507 006c FFF7FEFF 		bl	assert_failed
 1508              	.L59:
 609:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 1509              		.loc 1 609 0 is_stmt 1
 1510 0070 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1511 0072 0F2B     		cmp	r3, #15
 1512 0074 07D9     		bls	.L60
 1513              		.loc 1 609 0 is_stmt 0 discriminator 1
 1514 0076 40F20000 		movw	r0, #:lower16:.LC0
 1515 007a C0F20000 		movt	r0, #:upper16:.LC0
 1516 007e 40F26121 		movw	r1, #609
 1517 0082 FFF7FEFF 		bl	assert_failed
 1518              	.L60:
 610:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 611:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART address */
 612:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 1519              		.loc 1 612 0 is_stmt 1
 1520 0086 7B68     		ldr	r3, [r7, #4]
 1521 0088 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1522 008a 9BB2     		uxth	r3, r3
 1523 008c 23F00F03 		bic	r3, r3, #15
 1524 0090 9AB2     		uxth	r2, r3
 1525 0092 7B68     		ldr	r3, [r7, #4]
 1526 0094 1A82     		strh	r2, [r3, #16]	@ movhi
 613:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART address node */
 614:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_Address;
 1527              		.loc 1 614 0
 1528 0096 7B68     		ldr	r3, [r7, #4]
 1529 0098 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1530 009a 9AB2     		uxth	r2, r3
 1531 009c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1532 009e 9BB2     		uxth	r3, r3
 1533 00a0 1343     		orrs	r3, r3, r2
 1534 00a2 9AB2     		uxth	r2, r3
 1535 00a4 7B68     		ldr	r3, [r7, #4]
 1536 00a6 1A82     		strh	r2, [r3, #16]	@ movhi
 615:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1537              		.loc 1 615 0
 1538 00a8 0837     		adds	r7, r7, #8
 1539 00aa BD46     		mov	sp, r7
 1540              		@ sp needed
 1541 00ac 80BD     		pop	{r7, pc}
 1542              		.cfi_endproc
 1543              	.LFE121:
 1545 00ae 00BF     		.section	.text.USART_ReceiverWakeUpCmd,"ax",%progbits
 1546              		.align	2
 1547              		.global	USART_ReceiverWakeUpCmd
 1548              		.thumb
 1549              		.thumb_func
 1551              	USART_ReceiverWakeUpCmd:
 1552              	.LFB122:
 616:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 617:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 618:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 619:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 620:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 621:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 622:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 623:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 624:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 625:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 626:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1553              		.loc 1 626 0
 1554              		.cfi_startproc
 1555              		@ args = 0, pretend = 0, frame = 8
 1556              		@ frame_needed = 1, uses_anonymous_args = 0
 1557 0000 80B5     		push	{r7, lr}
 1558              	.LCFI36:
 1559              		.cfi_def_cfa_offset 8
 1560              		.cfi_offset 7, -8
 1561              		.cfi_offset 14, -4
 1562 0002 82B0     		sub	sp, sp, #8
 1563              	.LCFI37:
 1564              		.cfi_def_cfa_offset 16
 1565 0004 00AF     		add	r7, sp, #0
 1566              	.LCFI38:
 1567              		.cfi_def_cfa_register 7
 1568 0006 7860     		str	r0, [r7, #4]
 1569 0008 0B46     		mov	r3, r1
 1570 000a FB70     		strb	r3, [r7, #3]
 627:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 628:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1571              		.loc 1 628 0
 1572 000c 7A68     		ldr	r2, [r7, #4]
 1573 000e 4FF48053 		mov	r3, #4096
 1574 0012 C4F20103 		movt	r3, 16385
 1575 0016 9A42     		cmp	r2, r3
 1576 0018 2AD0     		beq	.L62
 1577              		.loc 1 628 0 is_stmt 0 discriminator 1
 1578 001a 7A68     		ldr	r2, [r7, #4]
 1579 001c 4FF48843 		mov	r3, #17408
 1580 0020 C4F20003 		movt	r3, 16384
 1581 0024 9A42     		cmp	r2, r3
 1582 0026 23D0     		beq	.L62
 1583 0028 7A68     		ldr	r2, [r7, #4]
 1584 002a 4FF49043 		mov	r3, #18432
 1585 002e C4F20003 		movt	r3, 16384
 1586 0032 9A42     		cmp	r2, r3
 1587 0034 1CD0     		beq	.L62
 1588 0036 7A68     		ldr	r2, [r7, #4]
 1589 0038 4FF49843 		mov	r3, #19456
 1590 003c C4F20003 		movt	r3, 16384
 1591 0040 9A42     		cmp	r2, r3
 1592 0042 15D0     		beq	.L62
 1593 0044 7A68     		ldr	r2, [r7, #4]
 1594 0046 4FF4A043 		mov	r3, #20480
 1595 004a C4F20003 		movt	r3, 16384
 1596 004e 9A42     		cmp	r2, r3
 1597 0050 0ED0     		beq	.L62
 1598 0052 7A68     		ldr	r2, [r7, #4]
 1599 0054 4FF4A053 		mov	r3, #5120
 1600 0058 C4F20103 		movt	r3, 16385
 1601 005c 9A42     		cmp	r2, r3
 1602 005e 07D0     		beq	.L62
 1603 0060 40F20000 		movw	r0, #:lower16:.LC0
 1604 0064 C0F20000 		movt	r0, #:upper16:.LC0
 1605 0068 4FF41D71 		mov	r1, #628
 1606 006c FFF7FEFF 		bl	assert_failed
 1607              	.L62:
 629:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 1608              		.loc 1 629 0 is_stmt 1
 1609 0070 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1610 0072 002B     		cmp	r3, #0
 1611 0074 0AD0     		beq	.L63
 1612              		.loc 1 629 0 is_stmt 0 discriminator 1
 1613 0076 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1614 0078 012B     		cmp	r3, #1
 1615 007a 07D0     		beq	.L63
 1616 007c 40F20000 		movw	r0, #:lower16:.LC0
 1617 0080 C0F20000 		movt	r0, #:upper16:.LC0
 1618 0084 40F27521 		movw	r1, #629
 1619 0088 FFF7FEFF 		bl	assert_failed
 1620              	.L63:
 630:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 631:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1621              		.loc 1 631 0 is_stmt 1
 1622 008c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1623 008e 002B     		cmp	r3, #0
 1624 0090 08D0     		beq	.L64
 632:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 633:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 634:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 1625              		.loc 1 634 0
 1626 0092 7B68     		ldr	r3, [r7, #4]
 1627 0094 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1628 0096 9BB2     		uxth	r3, r3
 1629 0098 43F00203 		orr	r3, r3, #2
 1630 009c 9AB2     		uxth	r2, r3
 1631 009e 7B68     		ldr	r3, [r7, #4]
 1632 00a0 9A81     		strh	r2, [r3, #12]	@ movhi
 1633 00a2 07E0     		b	.L61
 1634              	.L64:
 635:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 636:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 637:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 638:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 639:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 1635              		.loc 1 639 0
 1636 00a4 7B68     		ldr	r3, [r7, #4]
 1637 00a6 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1638 00a8 9BB2     		uxth	r3, r3
 1639 00aa 23F00203 		bic	r3, r3, #2
 1640 00ae 9AB2     		uxth	r2, r3
 1641 00b0 7B68     		ldr	r3, [r7, #4]
 1642 00b2 9A81     		strh	r2, [r3, #12]	@ movhi
 1643              	.L61:
 640:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 641:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1644              		.loc 1 641 0
 1645 00b4 0837     		adds	r7, r7, #8
 1646 00b6 BD46     		mov	sp, r7
 1647              		@ sp needed
 1648 00b8 80BD     		pop	{r7, pc}
 1649              		.cfi_endproc
 1650              	.LFE122:
 1652 00ba 00BF     		.section	.text.USART_WakeUpConfig,"ax",%progbits
 1653              		.align	2
 1654              		.global	USART_WakeUpConfig
 1655              		.thumb
 1656              		.thumb_func
 1658              	USART_WakeUpConfig:
 1659              	.LFB123:
 642:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 643:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 644:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 645:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 646:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 647:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 648:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 649:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 650:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 651:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 652:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 653:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1660              		.loc 1 653 0
 1661              		.cfi_startproc
 1662              		@ args = 0, pretend = 0, frame = 8
 1663              		@ frame_needed = 1, uses_anonymous_args = 0
 1664 0000 80B5     		push	{r7, lr}
 1665              	.LCFI39:
 1666              		.cfi_def_cfa_offset 8
 1667              		.cfi_offset 7, -8
 1668              		.cfi_offset 14, -4
 1669 0002 82B0     		sub	sp, sp, #8
 1670              	.LCFI40:
 1671              		.cfi_def_cfa_offset 16
 1672 0004 00AF     		add	r7, sp, #0
 1673              	.LCFI41:
 1674              		.cfi_def_cfa_register 7
 1675 0006 7860     		str	r0, [r7, #4]
 1676 0008 0B46     		mov	r3, r1
 1677 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 654:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 655:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1678              		.loc 1 655 0
 1679 000c 7A68     		ldr	r2, [r7, #4]
 1680 000e 4FF48053 		mov	r3, #4096
 1681 0012 C4F20103 		movt	r3, 16385
 1682 0016 9A42     		cmp	r2, r3
 1683 0018 2AD0     		beq	.L67
 1684              		.loc 1 655 0 is_stmt 0 discriminator 1
 1685 001a 7A68     		ldr	r2, [r7, #4]
 1686 001c 4FF48843 		mov	r3, #17408
 1687 0020 C4F20003 		movt	r3, 16384
 1688 0024 9A42     		cmp	r2, r3
 1689 0026 23D0     		beq	.L67
 1690 0028 7A68     		ldr	r2, [r7, #4]
 1691 002a 4FF49043 		mov	r3, #18432
 1692 002e C4F20003 		movt	r3, 16384
 1693 0032 9A42     		cmp	r2, r3
 1694 0034 1CD0     		beq	.L67
 1695 0036 7A68     		ldr	r2, [r7, #4]
 1696 0038 4FF49843 		mov	r3, #19456
 1697 003c C4F20003 		movt	r3, 16384
 1698 0040 9A42     		cmp	r2, r3
 1699 0042 15D0     		beq	.L67
 1700 0044 7A68     		ldr	r2, [r7, #4]
 1701 0046 4FF4A043 		mov	r3, #20480
 1702 004a C4F20003 		movt	r3, 16384
 1703 004e 9A42     		cmp	r2, r3
 1704 0050 0ED0     		beq	.L67
 1705 0052 7A68     		ldr	r2, [r7, #4]
 1706 0054 4FF4A053 		mov	r3, #5120
 1707 0058 C4F20103 		movt	r3, 16385
 1708 005c 9A42     		cmp	r2, r3
 1709 005e 07D0     		beq	.L67
 1710 0060 40F20000 		movw	r0, #:lower16:.LC0
 1711 0064 C0F20000 		movt	r0, #:upper16:.LC0
 1712 0068 40F28F21 		movw	r1, #655
 1713 006c FFF7FEFF 		bl	assert_failed
 1714              	.L67:
 656:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 1715              		.loc 1 656 0 is_stmt 1
 1716 0070 7B88     		ldrh	r3, [r7, #2]
 1717 0072 002B     		cmp	r3, #0
 1718 0074 0BD0     		beq	.L68
 1719              		.loc 1 656 0 is_stmt 0 discriminator 1
 1720 0076 7B88     		ldrh	r3, [r7, #2]
 1721 0078 B3F5006F 		cmp	r3, #2048
 1722 007c 07D0     		beq	.L68
 1723 007e 40F20000 		movw	r0, #:lower16:.LC0
 1724 0082 C0F20000 		movt	r0, #:upper16:.LC0
 1725 0086 4FF42471 		mov	r1, #656
 1726 008a FFF7FEFF 		bl	assert_failed
 1727              	.L68:
 657:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 658:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 1728              		.loc 1 658 0 is_stmt 1
 1729 008e 7B68     		ldr	r3, [r7, #4]
 1730 0090 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1731 0092 9BB2     		uxth	r3, r3
 1732 0094 23F40063 		bic	r3, r3, #2048
 1733 0098 9AB2     		uxth	r2, r3
 1734 009a 7B68     		ldr	r3, [r7, #4]
 1735 009c 9A81     		strh	r2, [r3, #12]	@ movhi
 659:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 1736              		.loc 1 659 0
 1737 009e 7B68     		ldr	r3, [r7, #4]
 1738 00a0 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1739 00a2 9AB2     		uxth	r2, r3
 1740 00a4 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1741 00a6 1343     		orrs	r3, r3, r2
 1742 00a8 9AB2     		uxth	r2, r3
 1743 00aa 7B68     		ldr	r3, [r7, #4]
 1744 00ac 9A81     		strh	r2, [r3, #12]	@ movhi
 660:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1745              		.loc 1 660 0
 1746 00ae 0837     		adds	r7, r7, #8
 1747 00b0 BD46     		mov	sp, r7
 1748              		@ sp needed
 1749 00b2 80BD     		pop	{r7, pc}
 1750              		.cfi_endproc
 1751              	.LFE123:
 1753              		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 1754              		.align	2
 1755              		.global	USART_LINBreakDetectLengthConfig
 1756              		.thumb
 1757              		.thumb_func
 1759              	USART_LINBreakDetectLengthConfig:
 1760              	.LFB124:
 661:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 662:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 663:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 664:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 665:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 666:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 667:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   LIN mode functions 
 668:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 669:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 670:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 671:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 LIN mode functions
 672:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 673:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 674:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART LIN 
 675:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Mode communication.
 676:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 677:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 678:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the LIN standard.
 679:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 680:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Only this LIN Feature is supported by the USART IP:
 681:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     - LIN Master Synchronous Break send capability and LIN slave break detection
 682:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       capability :  13-bit break generation and 10/11 bit break detection
 683:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 684:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 685:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master transmitter communication is possible through the following procedure:
 686:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 687:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 688:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 689:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 690:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the LIN mode using the USART_LINCmd() function.
 691:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Send the break character using USART_SendBreak() function.
 692:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 693:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master receiver communication is possible through the following procedure:
 694:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 695:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 696:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 697:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 698:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 699:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 700:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the LIN mode using the USART_LINCmd() function.
 701:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 702:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 703:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In LIN mode, the following bits must be kept cleared:
 704:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - CLKEN in the USART_CR2 register,
 705:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 706:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 707:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 708:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 709:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 710:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 711:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 712:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 713:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 714:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 715:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 716:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 717:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 718:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 719:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 720:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 721:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 722:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1761              		.loc 1 722 0
 1762              		.cfi_startproc
 1763              		@ args = 0, pretend = 0, frame = 8
 1764              		@ frame_needed = 1, uses_anonymous_args = 0
 1765 0000 80B5     		push	{r7, lr}
 1766              	.LCFI42:
 1767              		.cfi_def_cfa_offset 8
 1768              		.cfi_offset 7, -8
 1769              		.cfi_offset 14, -4
 1770 0002 82B0     		sub	sp, sp, #8
 1771              	.LCFI43:
 1772              		.cfi_def_cfa_offset 16
 1773 0004 00AF     		add	r7, sp, #0
 1774              	.LCFI44:
 1775              		.cfi_def_cfa_register 7
 1776 0006 7860     		str	r0, [r7, #4]
 1777 0008 0B46     		mov	r3, r1
 1778 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 723:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 724:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1779              		.loc 1 724 0
 1780 000c 7A68     		ldr	r2, [r7, #4]
 1781 000e 4FF48053 		mov	r3, #4096
 1782 0012 C4F20103 		movt	r3, 16385
 1783 0016 9A42     		cmp	r2, r3
 1784 0018 2AD0     		beq	.L70
 1785              		.loc 1 724 0 is_stmt 0 discriminator 1
 1786 001a 7A68     		ldr	r2, [r7, #4]
 1787 001c 4FF48843 		mov	r3, #17408
 1788 0020 C4F20003 		movt	r3, 16384
 1789 0024 9A42     		cmp	r2, r3
 1790 0026 23D0     		beq	.L70
 1791 0028 7A68     		ldr	r2, [r7, #4]
 1792 002a 4FF49043 		mov	r3, #18432
 1793 002e C4F20003 		movt	r3, 16384
 1794 0032 9A42     		cmp	r2, r3
 1795 0034 1CD0     		beq	.L70
 1796 0036 7A68     		ldr	r2, [r7, #4]
 1797 0038 4FF49843 		mov	r3, #19456
 1798 003c C4F20003 		movt	r3, 16384
 1799 0040 9A42     		cmp	r2, r3
 1800 0042 15D0     		beq	.L70
 1801 0044 7A68     		ldr	r2, [r7, #4]
 1802 0046 4FF4A043 		mov	r3, #20480
 1803 004a C4F20003 		movt	r3, 16384
 1804 004e 9A42     		cmp	r2, r3
 1805 0050 0ED0     		beq	.L70
 1806 0052 7A68     		ldr	r2, [r7, #4]
 1807 0054 4FF4A053 		mov	r3, #5120
 1808 0058 C4F20103 		movt	r3, 16385
 1809 005c 9A42     		cmp	r2, r3
 1810 005e 07D0     		beq	.L70
 1811 0060 40F20000 		movw	r0, #:lower16:.LC0
 1812 0064 C0F20000 		movt	r0, #:upper16:.LC0
 1813 0068 4FF43571 		mov	r1, #724
 1814 006c FFF7FEFF 		bl	assert_failed
 1815              	.L70:
 725:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 1816              		.loc 1 725 0 is_stmt 1
 1817 0070 7B88     		ldrh	r3, [r7, #2]
 1818 0072 002B     		cmp	r3, #0
 1819 0074 0AD0     		beq	.L71
 1820              		.loc 1 725 0 is_stmt 0 discriminator 1
 1821 0076 7B88     		ldrh	r3, [r7, #2]
 1822 0078 202B     		cmp	r3, #32
 1823 007a 07D0     		beq	.L71
 1824 007c 40F20000 		movw	r0, #:lower16:.LC0
 1825 0080 C0F20000 		movt	r0, #:upper16:.LC0
 1826 0084 40F2D521 		movw	r1, #725
 1827 0088 FFF7FEFF 		bl	assert_failed
 1828              	.L71:
 726:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 727:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 1829              		.loc 1 727 0 is_stmt 1
 1830 008c 7B68     		ldr	r3, [r7, #4]
 1831 008e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1832 0090 9BB2     		uxth	r3, r3
 1833 0092 23F02003 		bic	r3, r3, #32
 1834 0096 9AB2     		uxth	r2, r3
 1835 0098 7B68     		ldr	r3, [r7, #4]
 1836 009a 1A82     		strh	r2, [r3, #16]	@ movhi
 728:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 1837              		.loc 1 728 0
 1838 009c 7B68     		ldr	r3, [r7, #4]
 1839 009e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1840 00a0 9AB2     		uxth	r2, r3
 1841 00a2 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1842 00a4 1343     		orrs	r3, r3, r2
 1843 00a6 9AB2     		uxth	r2, r3
 1844 00a8 7B68     		ldr	r3, [r7, #4]
 1845 00aa 1A82     		strh	r2, [r3, #16]	@ movhi
 729:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1846              		.loc 1 729 0
 1847 00ac 0837     		adds	r7, r7, #8
 1848 00ae BD46     		mov	sp, r7
 1849              		@ sp needed
 1850 00b0 80BD     		pop	{r7, pc}
 1851              		.cfi_endproc
 1852              	.LFE124:
 1854 00b2 00BF     		.section	.text.USART_LINCmd,"ax",%progbits
 1855              		.align	2
 1856              		.global	USART_LINCmd
 1857              		.thumb
 1858              		.thumb_func
 1860              	USART_LINCmd:
 1861              	.LFB125:
 730:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 731:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 732:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 733:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 734:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 735:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 736:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 737:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 738:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 739:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 740:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1862              		.loc 1 740 0
 1863              		.cfi_startproc
 1864              		@ args = 0, pretend = 0, frame = 8
 1865              		@ frame_needed = 1, uses_anonymous_args = 0
 1866 0000 80B5     		push	{r7, lr}
 1867              	.LCFI45:
 1868              		.cfi_def_cfa_offset 8
 1869              		.cfi_offset 7, -8
 1870              		.cfi_offset 14, -4
 1871 0002 82B0     		sub	sp, sp, #8
 1872              	.LCFI46:
 1873              		.cfi_def_cfa_offset 16
 1874 0004 00AF     		add	r7, sp, #0
 1875              	.LCFI47:
 1876              		.cfi_def_cfa_register 7
 1877 0006 7860     		str	r0, [r7, #4]
 1878 0008 0B46     		mov	r3, r1
 1879 000a FB70     		strb	r3, [r7, #3]
 741:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 742:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1880              		.loc 1 742 0
 1881 000c 7A68     		ldr	r2, [r7, #4]
 1882 000e 4FF48053 		mov	r3, #4096
 1883 0012 C4F20103 		movt	r3, 16385
 1884 0016 9A42     		cmp	r2, r3
 1885 0018 2AD0     		beq	.L73
 1886              		.loc 1 742 0 is_stmt 0 discriminator 1
 1887 001a 7A68     		ldr	r2, [r7, #4]
 1888 001c 4FF48843 		mov	r3, #17408
 1889 0020 C4F20003 		movt	r3, 16384
 1890 0024 9A42     		cmp	r2, r3
 1891 0026 23D0     		beq	.L73
 1892 0028 7A68     		ldr	r2, [r7, #4]
 1893 002a 4FF49043 		mov	r3, #18432
 1894 002e C4F20003 		movt	r3, 16384
 1895 0032 9A42     		cmp	r2, r3
 1896 0034 1CD0     		beq	.L73
 1897 0036 7A68     		ldr	r2, [r7, #4]
 1898 0038 4FF49843 		mov	r3, #19456
 1899 003c C4F20003 		movt	r3, 16384
 1900 0040 9A42     		cmp	r2, r3
 1901 0042 15D0     		beq	.L73
 1902 0044 7A68     		ldr	r2, [r7, #4]
 1903 0046 4FF4A043 		mov	r3, #20480
 1904 004a C4F20003 		movt	r3, 16384
 1905 004e 9A42     		cmp	r2, r3
 1906 0050 0ED0     		beq	.L73
 1907 0052 7A68     		ldr	r2, [r7, #4]
 1908 0054 4FF4A053 		mov	r3, #5120
 1909 0058 C4F20103 		movt	r3, 16385
 1910 005c 9A42     		cmp	r2, r3
 1911 005e 07D0     		beq	.L73
 1912 0060 40F20000 		movw	r0, #:lower16:.LC0
 1913 0064 C0F20000 		movt	r0, #:upper16:.LC0
 1914 0068 40F2E621 		movw	r1, #742
 1915 006c FFF7FEFF 		bl	assert_failed
 1916              	.L73:
 743:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1917              		.loc 1 743 0 is_stmt 1
 1918 0070 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1919 0072 002B     		cmp	r3, #0
 1920 0074 0AD0     		beq	.L74
 1921              		.loc 1 743 0 is_stmt 0 discriminator 1
 1922 0076 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1923 0078 012B     		cmp	r3, #1
 1924 007a 07D0     		beq	.L74
 1925 007c 40F20000 		movw	r0, #:lower16:.LC0
 1926 0080 C0F20000 		movt	r0, #:upper16:.LC0
 1927 0084 40F2E721 		movw	r1, #743
 1928 0088 FFF7FEFF 		bl	assert_failed
 1929              	.L74:
 744:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 745:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1930              		.loc 1 745 0 is_stmt 1
 1931 008c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1932 008e 002B     		cmp	r3, #0
 1933 0090 08D0     		beq	.L75
 746:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 747:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 748:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 1934              		.loc 1 748 0
 1935 0092 7B68     		ldr	r3, [r7, #4]
 1936 0094 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1937 0096 9BB2     		uxth	r3, r3
 1938 0098 43F48043 		orr	r3, r3, #16384
 1939 009c 9AB2     		uxth	r2, r3
 1940 009e 7B68     		ldr	r3, [r7, #4]
 1941 00a0 1A82     		strh	r2, [r3, #16]	@ movhi
 1942 00a2 07E0     		b	.L72
 1943              	.L75:
 749:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 750:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 751:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 752:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 753:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 1944              		.loc 1 753 0
 1945 00a4 7B68     		ldr	r3, [r7, #4]
 1946 00a6 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1947 00a8 9BB2     		uxth	r3, r3
 1948 00aa 23F48043 		bic	r3, r3, #16384
 1949 00ae 9AB2     		uxth	r2, r3
 1950 00b0 7B68     		ldr	r3, [r7, #4]
 1951 00b2 1A82     		strh	r2, [r3, #16]	@ movhi
 1952              	.L72:
 754:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 755:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1953              		.loc 1 755 0
 1954 00b4 0837     		adds	r7, r7, #8
 1955 00b6 BD46     		mov	sp, r7
 1956              		@ sp needed
 1957 00b8 80BD     		pop	{r7, pc}
 1958              		.cfi_endproc
 1959              	.LFE125:
 1961 00ba 00BF     		.section	.text.USART_SendBreak,"ax",%progbits
 1962              		.align	2
 1963              		.global	USART_SendBreak
 1964              		.thumb
 1965              		.thumb_func
 1967              	USART_SendBreak:
 1968              	.LFB126:
 756:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 757:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 758:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits break characters.
 759:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 760:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 761:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 762:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 763:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 764:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1969              		.loc 1 764 0
 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 8
 1972              		@ frame_needed = 1, uses_anonymous_args = 0
 1973 0000 80B5     		push	{r7, lr}
 1974              	.LCFI48:
 1975              		.cfi_def_cfa_offset 8
 1976              		.cfi_offset 7, -8
 1977              		.cfi_offset 14, -4
 1978 0002 82B0     		sub	sp, sp, #8
 1979              	.LCFI49:
 1980              		.cfi_def_cfa_offset 16
 1981 0004 00AF     		add	r7, sp, #0
 1982              	.LCFI50:
 1983              		.cfi_def_cfa_register 7
 1984 0006 7860     		str	r0, [r7, #4]
 765:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 766:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 1985              		.loc 1 766 0
 1986 0008 7A68     		ldr	r2, [r7, #4]
 1987 000a 4FF48053 		mov	r3, #4096
 1988 000e C4F20103 		movt	r3, 16385
 1989 0012 9A42     		cmp	r2, r3
 1990 0014 2AD0     		beq	.L78
 1991              		.loc 1 766 0 is_stmt 0 discriminator 1
 1992 0016 7A68     		ldr	r2, [r7, #4]
 1993 0018 4FF48843 		mov	r3, #17408
 1994 001c C4F20003 		movt	r3, 16384
 1995 0020 9A42     		cmp	r2, r3
 1996 0022 23D0     		beq	.L78
 1997 0024 7A68     		ldr	r2, [r7, #4]
 1998 0026 4FF49043 		mov	r3, #18432
 1999 002a C4F20003 		movt	r3, 16384
 2000 002e 9A42     		cmp	r2, r3
 2001 0030 1CD0     		beq	.L78
 2002 0032 7A68     		ldr	r2, [r7, #4]
 2003 0034 4FF49843 		mov	r3, #19456
 2004 0038 C4F20003 		movt	r3, 16384
 2005 003c 9A42     		cmp	r2, r3
 2006 003e 15D0     		beq	.L78
 2007 0040 7A68     		ldr	r2, [r7, #4]
 2008 0042 4FF4A043 		mov	r3, #20480
 2009 0046 C4F20003 		movt	r3, 16384
 2010 004a 9A42     		cmp	r2, r3
 2011 004c 0ED0     		beq	.L78
 2012 004e 7A68     		ldr	r2, [r7, #4]
 2013 0050 4FF4A053 		mov	r3, #5120
 2014 0054 C4F20103 		movt	r3, 16385
 2015 0058 9A42     		cmp	r2, r3
 2016 005a 07D0     		beq	.L78
 2017 005c 40F20000 		movw	r0, #:lower16:.LC0
 2018 0060 C0F20000 		movt	r0, #:upper16:.LC0
 2019 0064 40F2FE21 		movw	r1, #766
 2020 0068 FFF7FEFF 		bl	assert_failed
 2021              	.L78:
 767:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 768:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Send break characters */
 769:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 2022              		.loc 1 769 0 is_stmt 1
 2023 006c 7B68     		ldr	r3, [r7, #4]
 2024 006e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 2025 0070 9BB2     		uxth	r3, r3
 2026 0072 43F00103 		orr	r3, r3, #1
 2027 0076 9AB2     		uxth	r2, r3
 2028 0078 7B68     		ldr	r3, [r7, #4]
 2029 007a 9A81     		strh	r2, [r3, #12]	@ movhi
 770:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 2030              		.loc 1 770 0
 2031 007c 0837     		adds	r7, r7, #8
 2032 007e BD46     		mov	sp, r7
 2033              		@ sp needed
 2034 0080 80BD     		pop	{r7, pc}
 2035              		.cfi_endproc
 2036              	.LFE126:
 2038 0082 00BF     		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 2039              		.align	2
 2040              		.global	USART_HalfDuplexCmd
 2041              		.thumb
 2042              		.thumb_func
 2044              	USART_HalfDuplexCmd:
 2045              	.LFB127:
 771:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 772:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 773:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 774:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 775:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 776:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 777:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Half-duplex mode function 
 778:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 779:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 780:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 781:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                          Half-duplex mode function
 782:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 783:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 784:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 785:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Half-duplex communication.
 786:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 787:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can be configured to follow a single-wire half-duplex protocol where 
 788:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the TX and RX lines are internally connected.
 789:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 790:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART Half duplex communication is possible through the following procedure:
 791:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 792:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 793:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 794:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 795:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the USART using the USART_Cmd() function.
 796:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the half duplex mode using USART_HalfDuplexCmd() function.
 797:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 798:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 799:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The RX pin is no longer used
 800:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In Half-duplex mode the following bits must be kept cleared:
 801:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN and CLKEN bits in the USART_CR2 register.
 802:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and IREN bits in the USART_CR3 register.
 803:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 804:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 805:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 806:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 807:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 808:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 809:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 810:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 811:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 812:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 813:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 814:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 815:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 816:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 817:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 2046              		.loc 1 817 0
 2047              		.cfi_startproc
 2048              		@ args = 0, pretend = 0, frame = 8
 2049              		@ frame_needed = 1, uses_anonymous_args = 0
 2050 0000 80B5     		push	{r7, lr}
 2051              	.LCFI51:
 2052              		.cfi_def_cfa_offset 8
 2053              		.cfi_offset 7, -8
 2054              		.cfi_offset 14, -4
 2055 0002 82B0     		sub	sp, sp, #8
 2056              	.LCFI52:
 2057              		.cfi_def_cfa_offset 16
 2058 0004 00AF     		add	r7, sp, #0
 2059              	.LCFI53:
 2060              		.cfi_def_cfa_register 7
 2061 0006 7860     		str	r0, [r7, #4]
 2062 0008 0B46     		mov	r3, r1
 2063 000a FB70     		strb	r3, [r7, #3]
 818:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 819:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2064              		.loc 1 819 0
 2065 000c 7A68     		ldr	r2, [r7, #4]
 2066 000e 4FF48053 		mov	r3, #4096
 2067 0012 C4F20103 		movt	r3, 16385
 2068 0016 9A42     		cmp	r2, r3
 2069 0018 2AD0     		beq	.L80
 2070              		.loc 1 819 0 is_stmt 0 discriminator 1
 2071 001a 7A68     		ldr	r2, [r7, #4]
 2072 001c 4FF48843 		mov	r3, #17408
 2073 0020 C4F20003 		movt	r3, 16384
 2074 0024 9A42     		cmp	r2, r3
 2075 0026 23D0     		beq	.L80
 2076 0028 7A68     		ldr	r2, [r7, #4]
 2077 002a 4FF49043 		mov	r3, #18432
 2078 002e C4F20003 		movt	r3, 16384
 2079 0032 9A42     		cmp	r2, r3
 2080 0034 1CD0     		beq	.L80
 2081 0036 7A68     		ldr	r2, [r7, #4]
 2082 0038 4FF49843 		mov	r3, #19456
 2083 003c C4F20003 		movt	r3, 16384
 2084 0040 9A42     		cmp	r2, r3
 2085 0042 15D0     		beq	.L80
 2086 0044 7A68     		ldr	r2, [r7, #4]
 2087 0046 4FF4A043 		mov	r3, #20480
 2088 004a C4F20003 		movt	r3, 16384
 2089 004e 9A42     		cmp	r2, r3
 2090 0050 0ED0     		beq	.L80
 2091 0052 7A68     		ldr	r2, [r7, #4]
 2092 0054 4FF4A053 		mov	r3, #5120
 2093 0058 C4F20103 		movt	r3, 16385
 2094 005c 9A42     		cmp	r2, r3
 2095 005e 07D0     		beq	.L80
 2096 0060 40F20000 		movw	r0, #:lower16:.LC0
 2097 0064 C0F20000 		movt	r0, #:upper16:.LC0
 2098 0068 40F23331 		movw	r1, #819
 2099 006c FFF7FEFF 		bl	assert_failed
 2100              	.L80:
 820:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2101              		.loc 1 820 0 is_stmt 1
 2102 0070 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2103 0072 002B     		cmp	r3, #0
 2104 0074 0AD0     		beq	.L81
 2105              		.loc 1 820 0 is_stmt 0 discriminator 1
 2106 0076 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2107 0078 012B     		cmp	r3, #1
 2108 007a 07D0     		beq	.L81
 2109 007c 40F20000 		movw	r0, #:lower16:.LC0
 2110 0080 C0F20000 		movt	r0, #:upper16:.LC0
 2111 0084 4FF44D71 		mov	r1, #820
 2112 0088 FFF7FEFF 		bl	assert_failed
 2113              	.L81:
 821:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 822:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 2114              		.loc 1 822 0 is_stmt 1
 2115 008c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2116 008e 002B     		cmp	r3, #0
 2117 0090 08D0     		beq	.L82
 823:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 824:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 825:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 2118              		.loc 1 825 0
 2119 0092 7B68     		ldr	r3, [r7, #4]
 2120 0094 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2121 0096 9BB2     		uxth	r3, r3
 2122 0098 43F00803 		orr	r3, r3, #8
 2123 009c 9AB2     		uxth	r2, r3
 2124 009e 7B68     		ldr	r3, [r7, #4]
 2125 00a0 9A82     		strh	r2, [r3, #20]	@ movhi
 2126 00a2 07E0     		b	.L79
 2127              	.L82:
 826:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 827:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 828:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 829:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 830:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 2128              		.loc 1 830 0
 2129 00a4 7B68     		ldr	r3, [r7, #4]
 2130 00a6 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2131 00a8 9BB2     		uxth	r3, r3
 2132 00aa 23F00803 		bic	r3, r3, #8
 2133 00ae 9AB2     		uxth	r2, r3
 2134 00b0 7B68     		ldr	r3, [r7, #4]
 2135 00b2 9A82     		strh	r2, [r3, #20]	@ movhi
 2136              	.L79:
 831:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 832:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 2137              		.loc 1 832 0
 2138 00b4 0837     		adds	r7, r7, #8
 2139 00b6 BD46     		mov	sp, r7
 2140              		@ sp needed
 2141 00b8 80BD     		pop	{r7, pc}
 2142              		.cfi_endproc
 2143              	.LFE127:
 2145 00ba 00BF     		.section	.text.USART_SetGuardTime,"ax",%progbits
 2146              		.align	2
 2147              		.global	USART_SetGuardTime
 2148              		.thumb
 2149              		.thumb_func
 2151              	USART_SetGuardTime:
 2152              	.LFB128:
 833:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 834:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 835:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 836:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 837:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 838:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 839:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 840:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Smartcard mode functions 
 841:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 842:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 843:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 844:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                Smartcard mode functions
 845:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 846:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 847:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 848:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication.
 849:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 850:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The Smartcard interface is designed to support asynchronous protocol Smartcards as
 851:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   defined in the ISO 7816-3 standard.
 852:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 853:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can provide a clock to the smartcard through the SCLK output.
 854:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In smartcard mode, SCLK is not associated to the communication but is simply derived 
 855:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   from the internal peripheral input clock through a 5-bit prescaler.
 856:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 857:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication is possible through the following procedure:
 858:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 859:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 860:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Program the USART clock using the USART_ClockInit() function as following:
 861:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock enabled
 862:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPOL Low
 863:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPHA on first edge
 864:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Last Bit Clock Enabled
 865:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Program the Smartcard interface using the USART_Init() function as following:
 866:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length = 9 Bits
 867:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - 1.5 Stop Bit
 868:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Even parity
 869:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - BaudRate = 12096 baud
 870:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control disabled (RTS and CTS signals)
 871:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Tx and Rx enabled
 872:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Optionally you can enable the parity error interrupt using the USART_ITConfig()
 873:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function
 874:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. Enable the USART using the USART_Cmd() function.
 875:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. Enable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 876:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. Enable the Smartcard interface using the USART_SmartCardCmd() function.
 877:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 878:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Please refer to the ISO 7816-3 specification for more details.
 879:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 880:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 881:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 882:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 883:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       between the two configurations.
 884:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In smartcard mode, the following bits must be kept cleared:
 885:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN bit in the USART_CR2 register.
 886:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - HDSEL and IREN bits in the USART_CR3 register.
 887:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Smartcard mode is available on USART peripherals only (not available on UART4 
 888:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       and UART5 peripherals).
 889:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 890:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 891:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 892:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 893:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 894:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 895:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the specified USART guard time.
 896:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 897:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 898:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 899:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 900:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 901:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 902:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {    
 2153              		.loc 1 902 0
 2154              		.cfi_startproc
 2155              		@ args = 0, pretend = 0, frame = 8
 2156              		@ frame_needed = 1, uses_anonymous_args = 0
 2157 0000 80B5     		push	{r7, lr}
 2158              	.LCFI54:
 2159              		.cfi_def_cfa_offset 8
 2160              		.cfi_offset 7, -8
 2161              		.cfi_offset 14, -4
 2162 0002 82B0     		sub	sp, sp, #8
 2163              	.LCFI55:
 2164              		.cfi_def_cfa_offset 16
 2165 0004 00AF     		add	r7, sp, #0
 2166              	.LCFI56:
 2167              		.cfi_def_cfa_register 7
 2168 0006 7860     		str	r0, [r7, #4]
 2169 0008 0B46     		mov	r3, r1
 2170 000a FB70     		strb	r3, [r7, #3]
 903:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 904:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 2171              		.loc 1 904 0
 2172 000c 7A68     		ldr	r2, [r7, #4]
 2173 000e 4FF48053 		mov	r3, #4096
 2174 0012 C4F20103 		movt	r3, 16385
 2175 0016 9A42     		cmp	r2, r3
 2176 0018 1CD0     		beq	.L85
 2177              		.loc 1 904 0 is_stmt 0 discriminator 1
 2178 001a 7A68     		ldr	r2, [r7, #4]
 2179 001c 4FF48843 		mov	r3, #17408
 2180 0020 C4F20003 		movt	r3, 16384
 2181 0024 9A42     		cmp	r2, r3
 2182 0026 15D0     		beq	.L85
 2183 0028 7A68     		ldr	r2, [r7, #4]
 2184 002a 4FF49043 		mov	r3, #18432
 2185 002e C4F20003 		movt	r3, 16384
 2186 0032 9A42     		cmp	r2, r3
 2187 0034 0ED0     		beq	.L85
 2188 0036 7A68     		ldr	r2, [r7, #4]
 2189 0038 4FF4A053 		mov	r3, #5120
 2190 003c C4F20103 		movt	r3, 16385
 2191 0040 9A42     		cmp	r2, r3
 2192 0042 07D0     		beq	.L85
 2193 0044 40F20000 		movw	r0, #:lower16:.LC0
 2194 0048 C0F20000 		movt	r0, #:upper16:.LC0
 2195 004c 4FF46271 		mov	r1, #904
 2196 0050 FFF7FEFF 		bl	assert_failed
 2197              	.L85:
 905:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 906:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART Guard time */
 907:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 2198              		.loc 1 907 0 is_stmt 1
 2199 0054 7B68     		ldr	r3, [r7, #4]
 2200 0056 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 2201 0058 9BB2     		uxth	r3, r3
 2202 005a DBB2     		uxtb	r3, r3
 2203 005c 9AB2     		uxth	r2, r3
 2204 005e 7B68     		ldr	r3, [r7, #4]
 2205 0060 1A83     		strh	r2, [r3, #24]	@ movhi
 908:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART guard time */
 909:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 2206              		.loc 1 909 0
 2207 0062 7B68     		ldr	r3, [r7, #4]
 2208 0064 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 2209 0066 9AB2     		uxth	r2, r3
 2210 0068 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2211 006a 9BB2     		uxth	r3, r3
 2212 006c 1B02     		lsls	r3, r3, #8
 2213 006e 9BB2     		uxth	r3, r3
 2214 0070 1343     		orrs	r3, r3, r2
 2215 0072 9AB2     		uxth	r2, r3
 2216 0074 7B68     		ldr	r3, [r7, #4]
 2217 0076 1A83     		strh	r2, [r3, #24]	@ movhi
 910:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 2218              		.loc 1 910 0
 2219 0078 0837     		adds	r7, r7, #8
 2220 007a BD46     		mov	sp, r7
 2221              		@ sp needed
 2222 007c 80BD     		pop	{r7, pc}
 2223              		.cfi_endproc
 2224              	.LFE128:
 2226 007e 00BF     		.section	.text.USART_SmartCardCmd,"ax",%progbits
 2227              		.align	2
 2228              		.global	USART_SmartCardCmd
 2229              		.thumb
 2230              		.thumb_func
 2232              	USART_SmartCardCmd:
 2233              	.LFB129:
 911:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 912:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 913:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 914:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 915:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 916:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 917:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 918:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 919:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 920:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 921:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 2234              		.loc 1 921 0
 2235              		.cfi_startproc
 2236              		@ args = 0, pretend = 0, frame = 8
 2237              		@ frame_needed = 1, uses_anonymous_args = 0
 2238 0000 80B5     		push	{r7, lr}
 2239              	.LCFI57:
 2240              		.cfi_def_cfa_offset 8
 2241              		.cfi_offset 7, -8
 2242              		.cfi_offset 14, -4
 2243 0002 82B0     		sub	sp, sp, #8
 2244              	.LCFI58:
 2245              		.cfi_def_cfa_offset 16
 2246 0004 00AF     		add	r7, sp, #0
 2247              	.LCFI59:
 2248              		.cfi_def_cfa_register 7
 2249 0006 7860     		str	r0, [r7, #4]
 2250 0008 0B46     		mov	r3, r1
 2251 000a FB70     		strb	r3, [r7, #3]
 922:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 923:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 2252              		.loc 1 923 0
 2253 000c 7A68     		ldr	r2, [r7, #4]
 2254 000e 4FF48053 		mov	r3, #4096
 2255 0012 C4F20103 		movt	r3, 16385
 2256 0016 9A42     		cmp	r2, r3
 2257 0018 1CD0     		beq	.L87
 2258              		.loc 1 923 0 is_stmt 0 discriminator 1
 2259 001a 7A68     		ldr	r2, [r7, #4]
 2260 001c 4FF48843 		mov	r3, #17408
 2261 0020 C4F20003 		movt	r3, 16384
 2262 0024 9A42     		cmp	r2, r3
 2263 0026 15D0     		beq	.L87
 2264 0028 7A68     		ldr	r2, [r7, #4]
 2265 002a 4FF49043 		mov	r3, #18432
 2266 002e C4F20003 		movt	r3, 16384
 2267 0032 9A42     		cmp	r2, r3
 2268 0034 0ED0     		beq	.L87
 2269 0036 7A68     		ldr	r2, [r7, #4]
 2270 0038 4FF4A053 		mov	r3, #5120
 2271 003c C4F20103 		movt	r3, 16385
 2272 0040 9A42     		cmp	r2, r3
 2273 0042 07D0     		beq	.L87
 2274 0044 40F20000 		movw	r0, #:lower16:.LC0
 2275 0048 C0F20000 		movt	r0, #:upper16:.LC0
 2276 004c 40F29B31 		movw	r1, #923
 2277 0050 FFF7FEFF 		bl	assert_failed
 2278              	.L87:
 924:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2279              		.loc 1 924 0 is_stmt 1
 2280 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2281 0056 002B     		cmp	r3, #0
 2282 0058 0AD0     		beq	.L88
 2283              		.loc 1 924 0 is_stmt 0 discriminator 1
 2284 005a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2285 005c 012B     		cmp	r3, #1
 2286 005e 07D0     		beq	.L88
 2287 0060 40F20000 		movw	r0, #:lower16:.LC0
 2288 0064 C0F20000 		movt	r0, #:upper16:.LC0
 2289 0068 4FF46771 		mov	r1, #924
 2290 006c FFF7FEFF 		bl	assert_failed
 2291              	.L88:
 925:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 2292              		.loc 1 925 0 is_stmt 1
 2293 0070 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2294 0072 002B     		cmp	r3, #0
 2295 0074 08D0     		beq	.L89
 926:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 927:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 928:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 2296              		.loc 1 928 0
 2297 0076 7B68     		ldr	r3, [r7, #4]
 2298 0078 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2299 007a 9BB2     		uxth	r3, r3
 2300 007c 43F02003 		orr	r3, r3, #32
 2301 0080 9AB2     		uxth	r2, r3
 2302 0082 7B68     		ldr	r3, [r7, #4]
 2303 0084 9A82     		strh	r2, [r3, #20]	@ movhi
 2304 0086 07E0     		b	.L86
 2305              	.L89:
 929:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 930:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 931:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 932:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 933:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 2306              		.loc 1 933 0
 2307 0088 7B68     		ldr	r3, [r7, #4]
 2308 008a 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2309 008c 9BB2     		uxth	r3, r3
 2310 008e 23F02003 		bic	r3, r3, #32
 2311 0092 9AB2     		uxth	r2, r3
 2312 0094 7B68     		ldr	r3, [r7, #4]
 2313 0096 9A82     		strh	r2, [r3, #20]	@ movhi
 2314              	.L86:
 934:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 935:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 2315              		.loc 1 935 0
 2316 0098 0837     		adds	r7, r7, #8
 2317 009a BD46     		mov	sp, r7
 2318              		@ sp needed
 2319 009c 80BD     		pop	{r7, pc}
 2320              		.cfi_endproc
 2321              	.LFE129:
 2323 009e 00BF     		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 2324              		.align	2
 2325              		.global	USART_SmartCardNACKCmd
 2326              		.thumb
 2327              		.thumb_func
 2329              	USART_SmartCardNACKCmd:
 2330              	.LFB130:
 936:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 937:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 938:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 939:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 940:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 941:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
 942:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 943:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 944:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 945:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 946:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 2331              		.loc 1 946 0
 2332              		.cfi_startproc
 2333              		@ args = 0, pretend = 0, frame = 8
 2334              		@ frame_needed = 1, uses_anonymous_args = 0
 2335 0000 80B5     		push	{r7, lr}
 2336              	.LCFI60:
 2337              		.cfi_def_cfa_offset 8
 2338              		.cfi_offset 7, -8
 2339              		.cfi_offset 14, -4
 2340 0002 82B0     		sub	sp, sp, #8
 2341              	.LCFI61:
 2342              		.cfi_def_cfa_offset 16
 2343 0004 00AF     		add	r7, sp, #0
 2344              	.LCFI62:
 2345              		.cfi_def_cfa_register 7
 2346 0006 7860     		str	r0, [r7, #4]
 2347 0008 0B46     		mov	r3, r1
 2348 000a FB70     		strb	r3, [r7, #3]
 947:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 948:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 2349              		.loc 1 948 0
 2350 000c 7A68     		ldr	r2, [r7, #4]
 2351 000e 4FF48053 		mov	r3, #4096
 2352 0012 C4F20103 		movt	r3, 16385
 2353 0016 9A42     		cmp	r2, r3
 2354 0018 1CD0     		beq	.L92
 2355              		.loc 1 948 0 is_stmt 0 discriminator 1
 2356 001a 7A68     		ldr	r2, [r7, #4]
 2357 001c 4FF48843 		mov	r3, #17408
 2358 0020 C4F20003 		movt	r3, 16384
 2359 0024 9A42     		cmp	r2, r3
 2360 0026 15D0     		beq	.L92
 2361 0028 7A68     		ldr	r2, [r7, #4]
 2362 002a 4FF49043 		mov	r3, #18432
 2363 002e C4F20003 		movt	r3, 16384
 2364 0032 9A42     		cmp	r2, r3
 2365 0034 0ED0     		beq	.L92
 2366 0036 7A68     		ldr	r2, [r7, #4]
 2367 0038 4FF4A053 		mov	r3, #5120
 2368 003c C4F20103 		movt	r3, 16385
 2369 0040 9A42     		cmp	r2, r3
 2370 0042 07D0     		beq	.L92
 2371 0044 40F20000 		movw	r0, #:lower16:.LC0
 2372 0048 C0F20000 		movt	r0, #:upper16:.LC0
 2373 004c 4FF46D71 		mov	r1, #948
 2374 0050 FFF7FEFF 		bl	assert_failed
 2375              	.L92:
 949:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2376              		.loc 1 949 0 is_stmt 1
 2377 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2378 0056 002B     		cmp	r3, #0
 2379 0058 0AD0     		beq	.L93
 2380              		.loc 1 949 0 is_stmt 0 discriminator 1
 2381 005a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2382 005c 012B     		cmp	r3, #1
 2383 005e 07D0     		beq	.L93
 2384 0060 40F20000 		movw	r0, #:lower16:.LC0
 2385 0064 C0F20000 		movt	r0, #:upper16:.LC0
 2386 0068 40F2B531 		movw	r1, #949
 2387 006c FFF7FEFF 		bl	assert_failed
 2388              	.L93:
 950:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 2389              		.loc 1 950 0 is_stmt 1
 2390 0070 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2391 0072 002B     		cmp	r3, #0
 2392 0074 08D0     		beq	.L94
 951:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 952:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 953:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 2393              		.loc 1 953 0
 2394 0076 7B68     		ldr	r3, [r7, #4]
 2395 0078 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2396 007a 9BB2     		uxth	r3, r3
 2397 007c 43F01003 		orr	r3, r3, #16
 2398 0080 9AB2     		uxth	r2, r3
 2399 0082 7B68     		ldr	r3, [r7, #4]
 2400 0084 9A82     		strh	r2, [r3, #20]	@ movhi
 2401 0086 07E0     		b	.L91
 2402              	.L94:
 954:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 955:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 956:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 957:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 958:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 2403              		.loc 1 958 0
 2404 0088 7B68     		ldr	r3, [r7, #4]
 2405 008a 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2406 008c 9BB2     		uxth	r3, r3
 2407 008e 23F01003 		bic	r3, r3, #16
 2408 0092 9AB2     		uxth	r2, r3
 2409 0094 7B68     		ldr	r3, [r7, #4]
 2410 0096 9A82     		strh	r2, [r3, #20]	@ movhi
 2411              	.L91:
 959:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 960:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 2412              		.loc 1 960 0
 2413 0098 0837     		adds	r7, r7, #8
 2414 009a BD46     		mov	sp, r7
 2415              		@ sp needed
 2416 009c 80BD     		pop	{r7, pc}
 2417              		.cfi_endproc
 2418              	.LFE130:
 2420 009e 00BF     		.section	.text.USART_IrDAConfig,"ax",%progbits
 2421              		.align	2
 2422              		.global	USART_IrDAConfig
 2423              		.thumb
 2424              		.thumb_func
 2426              	USART_IrDAConfig:
 2427              	.LFB131:
 961:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 962:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 963:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 964:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 965:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 966:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
 967:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   IrDA mode functions 
 968:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 969:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 970:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 971:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 IrDA mode functions
 972:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 973:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 974:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 975:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication.
 976:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 977:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 978:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 979:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 980:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   While receiving data, transmission should be avoided as the data to be transmitted
 981:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   could be corrupted.
 982:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 983:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication is possible through the following procedure:
 984:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
 985:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         modes and hardware flow control values using the USART_Init() function.
 986:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 987:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the IrDA pulse width by configuring the prescaler using  
 988:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_SetPrescaler() function.
 989:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
 990:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using the USART_IrDAConfig() function.
 991:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enable the IrDA using the USART_IrDACmd() function.
 992:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 993:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note A pulse of width less than two and greater than one PSC period(s) may or may
 994:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       not be rejected.
 995:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The receiver set up time should be managed by software. The IrDA physical layer
 996:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       specification specifies a minimum of 10 ms delay between transmission and 
 997:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       reception (IrDA is a half duplex protocol).
 998:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In IrDA mode, the following bits must be kept cleared:
 999:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN, STOP and CLKEN bits in the USART_CR2 register.
1000:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and HDSEL bits in the USART_CR3 register.
1001:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1002:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1003:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1004:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1005:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1006:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1007:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1008:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1009:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1010:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1011:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1012:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1013:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1014:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1015:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1016:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1017:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 2428              		.loc 1 1017 0
 2429              		.cfi_startproc
 2430              		@ args = 0, pretend = 0, frame = 8
 2431              		@ frame_needed = 1, uses_anonymous_args = 0
 2432 0000 80B5     		push	{r7, lr}
 2433              	.LCFI63:
 2434              		.cfi_def_cfa_offset 8
 2435              		.cfi_offset 7, -8
 2436              		.cfi_offset 14, -4
 2437 0002 82B0     		sub	sp, sp, #8
 2438              	.LCFI64:
 2439              		.cfi_def_cfa_offset 16
 2440 0004 00AF     		add	r7, sp, #0
 2441              	.LCFI65:
 2442              		.cfi_def_cfa_register 7
 2443 0006 7860     		str	r0, [r7, #4]
 2444 0008 0B46     		mov	r3, r1
 2445 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1018:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1019:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2446              		.loc 1 1019 0
 2447 000c 7A68     		ldr	r2, [r7, #4]
 2448 000e 4FF48053 		mov	r3, #4096
 2449 0012 C4F20103 		movt	r3, 16385
 2450 0016 9A42     		cmp	r2, r3
 2451 0018 2AD0     		beq	.L97
 2452              		.loc 1 1019 0 is_stmt 0 discriminator 1
 2453 001a 7A68     		ldr	r2, [r7, #4]
 2454 001c 4FF48843 		mov	r3, #17408
 2455 0020 C4F20003 		movt	r3, 16384
 2456 0024 9A42     		cmp	r2, r3
 2457 0026 23D0     		beq	.L97
 2458 0028 7A68     		ldr	r2, [r7, #4]
 2459 002a 4FF49043 		mov	r3, #18432
 2460 002e C4F20003 		movt	r3, 16384
 2461 0032 9A42     		cmp	r2, r3
 2462 0034 1CD0     		beq	.L97
 2463 0036 7A68     		ldr	r2, [r7, #4]
 2464 0038 4FF49843 		mov	r3, #19456
 2465 003c C4F20003 		movt	r3, 16384
 2466 0040 9A42     		cmp	r2, r3
 2467 0042 15D0     		beq	.L97
 2468 0044 7A68     		ldr	r2, [r7, #4]
 2469 0046 4FF4A043 		mov	r3, #20480
 2470 004a C4F20003 		movt	r3, 16384
 2471 004e 9A42     		cmp	r2, r3
 2472 0050 0ED0     		beq	.L97
 2473 0052 7A68     		ldr	r2, [r7, #4]
 2474 0054 4FF4A053 		mov	r3, #5120
 2475 0058 C4F20103 		movt	r3, 16385
 2476 005c 9A42     		cmp	r2, r3
 2477 005e 07D0     		beq	.L97
 2478 0060 40F20000 		movw	r0, #:lower16:.LC0
 2479 0064 C0F20000 		movt	r0, #:upper16:.LC0
 2480 0068 40F2FB31 		movw	r1, #1019
 2481 006c FFF7FEFF 		bl	assert_failed
 2482              	.L97:
1020:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
 2483              		.loc 1 1020 0 is_stmt 1
 2484 0070 7B88     		ldrh	r3, [r7, #2]
 2485 0072 042B     		cmp	r3, #4
 2486 0074 0AD0     		beq	.L98
 2487              		.loc 1 1020 0 is_stmt 0 discriminator 1
 2488 0076 7B88     		ldrh	r3, [r7, #2]
 2489 0078 002B     		cmp	r3, #0
 2490 007a 07D0     		beq	.L98
 2491 007c 40F20000 		movw	r0, #:lower16:.LC0
 2492 0080 C0F20000 		movt	r0, #:upper16:.LC0
 2493 0084 4FF47F71 		mov	r1, #1020
 2494 0088 FFF7FEFF 		bl	assert_failed
 2495              	.L98:
1021:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1022:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 2496              		.loc 1 1022 0 is_stmt 1
 2497 008c 7B68     		ldr	r3, [r7, #4]
 2498 008e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2499 0090 9BB2     		uxth	r3, r3
 2500 0092 23F00403 		bic	r3, r3, #4
 2501 0096 9AB2     		uxth	r2, r3
 2502 0098 7B68     		ldr	r3, [r7, #4]
 2503 009a 9A82     		strh	r2, [r3, #20]	@ movhi
1023:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 2504              		.loc 1 1023 0
 2505 009c 7B68     		ldr	r3, [r7, #4]
 2506 009e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2507 00a0 9AB2     		uxth	r2, r3
 2508 00a2 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2509 00a4 1343     		orrs	r3, r3, r2
 2510 00a6 9AB2     		uxth	r2, r3
 2511 00a8 7B68     		ldr	r3, [r7, #4]
 2512 00aa 9A82     		strh	r2, [r3, #20]	@ movhi
1024:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 2513              		.loc 1 1024 0
 2514 00ac 0837     		adds	r7, r7, #8
 2515 00ae BD46     		mov	sp, r7
 2516              		@ sp needed
 2517 00b0 80BD     		pop	{r7, pc}
 2518              		.cfi_endproc
 2519              	.LFE131:
 2521 00b2 00BF     		.section	.text.USART_IrDACmd,"ax",%progbits
 2522              		.align	2
 2523              		.global	USART_IrDACmd
 2524              		.thumb
 2525              		.thumb_func
 2527              	USART_IrDACmd:
 2528              	.LFB132:
1025:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1026:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1027:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1028:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1029:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1030:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1031:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1032:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1033:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1034:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1035:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 2529              		.loc 1 1035 0
 2530              		.cfi_startproc
 2531              		@ args = 0, pretend = 0, frame = 8
 2532              		@ frame_needed = 1, uses_anonymous_args = 0
 2533 0000 80B5     		push	{r7, lr}
 2534              	.LCFI66:
 2535              		.cfi_def_cfa_offset 8
 2536              		.cfi_offset 7, -8
 2537              		.cfi_offset 14, -4
 2538 0002 82B0     		sub	sp, sp, #8
 2539              	.LCFI67:
 2540              		.cfi_def_cfa_offset 16
 2541 0004 00AF     		add	r7, sp, #0
 2542              	.LCFI68:
 2543              		.cfi_def_cfa_register 7
 2544 0006 7860     		str	r0, [r7, #4]
 2545 0008 0B46     		mov	r3, r1
 2546 000a FB70     		strb	r3, [r7, #3]
1036:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1037:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2547              		.loc 1 1037 0
 2548 000c 7A68     		ldr	r2, [r7, #4]
 2549 000e 4FF48053 		mov	r3, #4096
 2550 0012 C4F20103 		movt	r3, 16385
 2551 0016 9A42     		cmp	r2, r3
 2552 0018 2AD0     		beq	.L100
 2553              		.loc 1 1037 0 is_stmt 0 discriminator 1
 2554 001a 7A68     		ldr	r2, [r7, #4]
 2555 001c 4FF48843 		mov	r3, #17408
 2556 0020 C4F20003 		movt	r3, 16384
 2557 0024 9A42     		cmp	r2, r3
 2558 0026 23D0     		beq	.L100
 2559 0028 7A68     		ldr	r2, [r7, #4]
 2560 002a 4FF49043 		mov	r3, #18432
 2561 002e C4F20003 		movt	r3, 16384
 2562 0032 9A42     		cmp	r2, r3
 2563 0034 1CD0     		beq	.L100
 2564 0036 7A68     		ldr	r2, [r7, #4]
 2565 0038 4FF49843 		mov	r3, #19456
 2566 003c C4F20003 		movt	r3, 16384
 2567 0040 9A42     		cmp	r2, r3
 2568 0042 15D0     		beq	.L100
 2569 0044 7A68     		ldr	r2, [r7, #4]
 2570 0046 4FF4A043 		mov	r3, #20480
 2571 004a C4F20003 		movt	r3, 16384
 2572 004e 9A42     		cmp	r2, r3
 2573 0050 0ED0     		beq	.L100
 2574 0052 7A68     		ldr	r2, [r7, #4]
 2575 0054 4FF4A053 		mov	r3, #5120
 2576 0058 C4F20103 		movt	r3, 16385
 2577 005c 9A42     		cmp	r2, r3
 2578 005e 07D0     		beq	.L100
 2579 0060 40F20000 		movw	r0, #:lower16:.LC0
 2580 0064 C0F20000 		movt	r0, #:upper16:.LC0
 2581 0068 40F20D41 		movw	r1, #1037
 2582 006c FFF7FEFF 		bl	assert_failed
 2583              	.L100:
1038:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2584              		.loc 1 1038 0 is_stmt 1
 2585 0070 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2586 0072 002B     		cmp	r3, #0
 2587 0074 0AD0     		beq	.L101
 2588              		.loc 1 1038 0 is_stmt 0 discriminator 1
 2589 0076 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2590 0078 012B     		cmp	r3, #1
 2591 007a 07D0     		beq	.L101
 2592 007c 40F20000 		movw	r0, #:lower16:.LC0
 2593 0080 C0F20000 		movt	r0, #:upper16:.LC0
 2594 0084 40F20E41 		movw	r1, #1038
 2595 0088 FFF7FEFF 		bl	assert_failed
 2596              	.L101:
1039:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1040:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 2597              		.loc 1 1040 0 is_stmt 1
 2598 008c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2599 008e 002B     		cmp	r3, #0
 2600 0090 08D0     		beq	.L102
1041:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1042:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1043:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 2601              		.loc 1 1043 0
 2602 0092 7B68     		ldr	r3, [r7, #4]
 2603 0094 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2604 0096 9BB2     		uxth	r3, r3
 2605 0098 43F00203 		orr	r3, r3, #2
 2606 009c 9AB2     		uxth	r2, r3
 2607 009e 7B68     		ldr	r3, [r7, #4]
 2608 00a0 9A82     		strh	r2, [r3, #20]	@ movhi
 2609 00a2 07E0     		b	.L99
 2610              	.L102:
1044:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1045:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1046:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1047:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1048:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 2611              		.loc 1 1048 0
 2612 00a4 7B68     		ldr	r3, [r7, #4]
 2613 00a6 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2614 00a8 9BB2     		uxth	r3, r3
 2615 00aa 23F00203 		bic	r3, r3, #2
 2616 00ae 9AB2     		uxth	r2, r3
 2617 00b0 7B68     		ldr	r3, [r7, #4]
 2618 00b2 9A82     		strh	r2, [r3, #20]	@ movhi
 2619              	.L99:
1049:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1050:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 2620              		.loc 1 1050 0
 2621 00b4 0837     		adds	r7, r7, #8
 2622 00b6 BD46     		mov	sp, r7
 2623              		@ sp needed
 2624 00b8 80BD     		pop	{r7, pc}
 2625              		.cfi_endproc
 2626              	.LFE132:
 2628 00ba 00BF     		.section	.text.USART_DMACmd,"ax",%progbits
 2629              		.align	2
 2630              		.global	USART_DMACmd
 2631              		.thumb
 2632              		.thumb_func
 2634              	USART_DMACmd:
 2635              	.LFB133:
1051:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1052:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1053:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1054:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1055:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1056:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1057:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   DMA transfers management functions
1058:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1059:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1060:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1061:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                       DMA transfers management functions
1062:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1063:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1064:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1065:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1066:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1067:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1068:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1069:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1070:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1071:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1072:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1073:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1074:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1075:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1076:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1077:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1078:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1079:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1080:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1081:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 2636              		.loc 1 1081 0
 2637              		.cfi_startproc
 2638              		@ args = 0, pretend = 0, frame = 8
 2639              		@ frame_needed = 1, uses_anonymous_args = 0
 2640 0000 80B5     		push	{r7, lr}
 2641              	.LCFI69:
 2642              		.cfi_def_cfa_offset 8
 2643              		.cfi_offset 7, -8
 2644              		.cfi_offset 14, -4
 2645 0002 82B0     		sub	sp, sp, #8
 2646              	.LCFI70:
 2647              		.cfi_def_cfa_offset 16
 2648 0004 00AF     		add	r7, sp, #0
 2649              	.LCFI71:
 2650              		.cfi_def_cfa_register 7
 2651 0006 7860     		str	r0, [r7, #4]
 2652 0008 1346     		mov	r3, r2
 2653 000a 0A46     		mov	r2, r1	@ movhi
 2654 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 2655 000e 7B70     		strb	r3, [r7, #1]
1082:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1083:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2656              		.loc 1 1083 0
 2657 0010 7A68     		ldr	r2, [r7, #4]
 2658 0012 4FF48053 		mov	r3, #4096
 2659 0016 C4F20103 		movt	r3, 16385
 2660 001a 9A42     		cmp	r2, r3
 2661 001c 2AD0     		beq	.L105
 2662              		.loc 1 1083 0 is_stmt 0 discriminator 1
 2663 001e 7A68     		ldr	r2, [r7, #4]
 2664 0020 4FF48843 		mov	r3, #17408
 2665 0024 C4F20003 		movt	r3, 16384
 2666 0028 9A42     		cmp	r2, r3
 2667 002a 23D0     		beq	.L105
 2668 002c 7A68     		ldr	r2, [r7, #4]
 2669 002e 4FF49043 		mov	r3, #18432
 2670 0032 C4F20003 		movt	r3, 16384
 2671 0036 9A42     		cmp	r2, r3
 2672 0038 1CD0     		beq	.L105
 2673 003a 7A68     		ldr	r2, [r7, #4]
 2674 003c 4FF49843 		mov	r3, #19456
 2675 0040 C4F20003 		movt	r3, 16384
 2676 0044 9A42     		cmp	r2, r3
 2677 0046 15D0     		beq	.L105
 2678 0048 7A68     		ldr	r2, [r7, #4]
 2679 004a 4FF4A043 		mov	r3, #20480
 2680 004e C4F20003 		movt	r3, 16384
 2681 0052 9A42     		cmp	r2, r3
 2682 0054 0ED0     		beq	.L105
 2683 0056 7A68     		ldr	r2, [r7, #4]
 2684 0058 4FF4A053 		mov	r3, #5120
 2685 005c C4F20103 		movt	r3, 16385
 2686 0060 9A42     		cmp	r2, r3
 2687 0062 07D0     		beq	.L105
 2688 0064 40F20000 		movw	r0, #:lower16:.LC0
 2689 0068 C0F20000 		movt	r0, #:upper16:.LC0
 2690 006c 40F23B41 		movw	r1, #1083
 2691 0070 FFF7FEFF 		bl	assert_failed
 2692              	.L105:
1084:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
 2693              		.loc 1 1084 0 is_stmt 1
 2694 0074 7A88     		ldrh	r2, [r7, #2]
 2695 0076 4FF63F73 		movw	r3, #65343
 2696 007a 1340     		ands	r3, r3, r2
 2697 007c 002B     		cmp	r3, #0
 2698 007e 02D1     		bne	.L106
 2699              		.loc 1 1084 0 is_stmt 0 discriminator 2
 2700 0080 7B88     		ldrh	r3, [r7, #2]
 2701 0082 002B     		cmp	r3, #0
 2702 0084 07D1     		bne	.L107
 2703              	.L106:
 2704              		.loc 1 1084 0 discriminator 1
 2705 0086 40F20000 		movw	r0, #:lower16:.LC0
 2706 008a C0F20000 		movt	r0, #:upper16:.LC0
 2707 008e 40F23C41 		movw	r1, #1084
 2708 0092 FFF7FEFF 		bl	assert_failed
 2709              	.L107:
1085:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 2710              		.loc 1 1085 0 is_stmt 1
 2711 0096 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2712 0098 002B     		cmp	r3, #0
 2713 009a 0AD0     		beq	.L108
 2714              		.loc 1 1085 0 is_stmt 0 discriminator 1
 2715 009c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2716 009e 012B     		cmp	r3, #1
 2717 00a0 07D0     		beq	.L108
 2718 00a2 40F20000 		movw	r0, #:lower16:.LC0
 2719 00a6 C0F20000 		movt	r0, #:upper16:.LC0
 2720 00aa 40F23D41 		movw	r1, #1085
 2721 00ae FFF7FEFF 		bl	assert_failed
 2722              	.L108:
1086:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1087:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 2723              		.loc 1 1087 0 is_stmt 1
 2724 00b2 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2725 00b4 002B     		cmp	r3, #0
 2726 00b6 08D0     		beq	.L109
1088:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1089:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1090:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1091:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 2727              		.loc 1 1091 0
 2728 00b8 7B68     		ldr	r3, [r7, #4]
 2729 00ba 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2730 00bc 9AB2     		uxth	r2, r3
 2731 00be 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2732 00c0 1343     		orrs	r3, r3, r2
 2733 00c2 9AB2     		uxth	r2, r3
 2734 00c4 7B68     		ldr	r3, [r7, #4]
 2735 00c6 9A82     		strh	r2, [r3, #20]	@ movhi
 2736 00c8 09E0     		b	.L104
 2737              	.L109:
1092:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1093:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1094:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1095:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1096:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1097:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 2738              		.loc 1 1097 0
 2739 00ca 7B68     		ldr	r3, [r7, #4]
 2740 00cc 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2741 00ce 9AB2     		uxth	r2, r3
 2742 00d0 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2743 00d2 DB43     		mvns	r3, r3
 2744 00d4 9BB2     		uxth	r3, r3
 2745 00d6 1340     		ands	r3, r3, r2
 2746 00d8 9AB2     		uxth	r2, r3
 2747 00da 7B68     		ldr	r3, [r7, #4]
 2748 00dc 9A82     		strh	r2, [r3, #20]	@ movhi
 2749              	.L104:
1098:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1099:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 2750              		.loc 1 1099 0
 2751 00de 0837     		adds	r7, r7, #8
 2752 00e0 BD46     		mov	sp, r7
 2753              		@ sp needed
 2754 00e2 80BD     		pop	{r7, pc}
 2755              		.cfi_endproc
 2756              	.LFE133:
 2758              		.section	.text.USART_ITConfig,"ax",%progbits
 2759              		.align	2
 2760              		.global	USART_ITConfig
 2761              		.thumb
 2762              		.thumb_func
 2764              	USART_ITConfig:
 2765              	.LFB134:
1100:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1101:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1102:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1103:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1104:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1105:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1106:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1107:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1108:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1109:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1110:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                    Interrupts and flags management functions
1111:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1112:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1113:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to configure the USART 
1114:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupts sources, DMA channels requests and check or clear the flags or 
1115:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   pending bits status.
1116:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The user should identify which mode will be used in his application to manage 
1117:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1118:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1119:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Polling Mode
1120:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   =============
1121:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Polling Mode, the SPI communication can be managed by 10 flags:
1122:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_FLAG_TXE : to indicate the status of the transmit buffer register
1123:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_FLAG_RXNE : to indicate the status of the receive buffer register
1124:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_FLAG_TC : to indicate the status of the transmit operation
1125:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_FLAG_IDLE : to indicate the status of the Idle Line             
1126:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_FLAG_CTS : to indicate the status of the nCTS input
1127:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_FLAG_LBD : to indicate the status of the LIN break detection
1128:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_FLAG_NE : to indicate if a noise error occur
1129:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_FLAG_FE : to indicate if a frame error occur
1130:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_FLAG_PE : to indicate if a parity error occur
1131:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_FLAG_ORE : to indicate if an Overrun error occur
1132:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1133:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1134:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1135:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1136:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1137:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Mode
1138:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ===============
1139:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1140:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   and 10 pending bits: 
1141:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1142:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Pending Bits:
1143:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ------------- 
1144:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : to indicate the status of the transmit buffer register
1145:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : to indicate the status of the receive buffer register
1146:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : to indicate the status of the transmit operation
1147:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : to indicate the status of the Idle Line             
1148:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : to indicate the status of the nCTS input
1149:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : to indicate the status of the LIN break detection
1150:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_NE : to indicate if a noise error occur
1151:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_FE : to indicate if a frame error occur
1152:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_IT_PE : to indicate if a parity error occur
1153:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_IT_ORE : to indicate if an Overrun error occur
1154:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1155:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Source:
1156:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   -----------------
1157:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1158:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1159:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1160:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         empty interrupt.
1161:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : specifies the interrupt source for the Transmit complete 
1162:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1163:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.             
1164:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1165:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : specifies the interrupt source for the LIN break detection
1166:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1167:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1168:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1169:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1170:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Some parameters are coded in order to use them as interrupt source or as pending bits.
1171:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1172:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1173:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1174:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
1175:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1176:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1177:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   DMA Mode
1178:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ========
1179:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1180:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1181:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1182:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1183:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following function:
1184:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState);
1185:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1186:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1187:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1188:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1189:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1190:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1191:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1192:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1193:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1194:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1195:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1196:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1197:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1198:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1199:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1200:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1201:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1202:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1203:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1204:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1205:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1206:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1207:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1208:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1209:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 2766              		.loc 1 1209 0
 2767              		.cfi_startproc
 2768              		@ args = 0, pretend = 0, frame = 24
 2769              		@ frame_needed = 1, uses_anonymous_args = 0
 2770 0000 80B5     		push	{r7, lr}
 2771              	.LCFI72:
 2772              		.cfi_def_cfa_offset 8
 2773              		.cfi_offset 7, -8
 2774              		.cfi_offset 14, -4
 2775 0002 86B0     		sub	sp, sp, #24
 2776              	.LCFI73:
 2777              		.cfi_def_cfa_offset 32
 2778 0004 00AF     		add	r7, sp, #0
 2779              	.LCFI74:
 2780              		.cfi_def_cfa_register 7
 2781 0006 7860     		str	r0, [r7, #4]
 2782 0008 1346     		mov	r3, r2
 2783 000a 0A46     		mov	r2, r1	@ movhi
 2784 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 2785 000e 7B70     		strb	r3, [r7, #1]
1210:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 2786              		.loc 1 1210 0
 2787 0010 0023     		movs	r3, #0
 2788 0012 3B61     		str	r3, [r7, #16]
 2789 0014 0023     		movs	r3, #0
 2790 0016 FB60     		str	r3, [r7, #12]
 2791 0018 0023     		movs	r3, #0
 2792 001a BB60     		str	r3, [r7, #8]
1211:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartxbase = 0x00;
 2793              		.loc 1 1211 0
 2794 001c 0023     		movs	r3, #0
 2795 001e 7B61     		str	r3, [r7, #20]
1212:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1213:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 2796              		.loc 1 1213 0
 2797 0020 7A68     		ldr	r2, [r7, #4]
 2798 0022 4FF48053 		mov	r3, #4096
 2799 0026 C4F20103 		movt	r3, 16385
 2800 002a 9A42     		cmp	r2, r3
 2801 002c 2AD0     		beq	.L112
 2802              		.loc 1 1213 0 is_stmt 0 discriminator 1
 2803 002e 7A68     		ldr	r2, [r7, #4]
 2804 0030 4FF48843 		mov	r3, #17408
 2805 0034 C4F20003 		movt	r3, 16384
 2806 0038 9A42     		cmp	r2, r3
 2807 003a 23D0     		beq	.L112
 2808 003c 7A68     		ldr	r2, [r7, #4]
 2809 003e 4FF49043 		mov	r3, #18432
 2810 0042 C4F20003 		movt	r3, 16384
 2811 0046 9A42     		cmp	r2, r3
 2812 0048 1CD0     		beq	.L112
 2813 004a 7A68     		ldr	r2, [r7, #4]
 2814 004c 4FF49843 		mov	r3, #19456
 2815 0050 C4F20003 		movt	r3, 16384
 2816 0054 9A42     		cmp	r2, r3
 2817 0056 15D0     		beq	.L112
 2818 0058 7A68     		ldr	r2, [r7, #4]
 2819 005a 4FF4A043 		mov	r3, #20480
 2820 005e C4F20003 		movt	r3, 16384
 2821 0062 9A42     		cmp	r2, r3
 2822 0064 0ED0     		beq	.L112
 2823 0066 7A68     		ldr	r2, [r7, #4]
 2824 0068 4FF4A053 		mov	r3, #5120
 2825 006c C4F20103 		movt	r3, 16385
 2826 0070 9A42     		cmp	r2, r3
 2827 0072 07D0     		beq	.L112
 2828 0074 40F20000 		movw	r0, #:lower16:.LC0
 2829 0078 C0F20000 		movt	r0, #:upper16:.LC0
 2830 007c 40F2BD41 		movw	r1, #1213
 2831 0080 FFF7FEFF 		bl	assert_failed
 2832              	.L112:
1214:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
 2833              		.loc 1 1214 0 is_stmt 1
 2834 0084 7B88     		ldrh	r3, [r7, #2]
 2835 0086 282B     		cmp	r3, #40
 2836 0088 28D0     		beq	.L113
 2837              		.loc 1 1214 0 is_stmt 0 discriminator 1
 2838 008a 7A88     		ldrh	r2, [r7, #2]
 2839 008c 40F22773 		movw	r3, #1831
 2840 0090 9A42     		cmp	r2, r3
 2841 0092 23D0     		beq	.L113
 2842 0094 7A88     		ldrh	r2, [r7, #2]
 2843 0096 40F22663 		movw	r3, #1574
 2844 009a 9A42     		cmp	r2, r3
 2845 009c 1ED0     		beq	.L113
 2846 009e 7A88     		ldrh	r2, [r7, #2]
 2847 00a0 40F22553 		movw	r3, #1317
 2848 00a4 9A42     		cmp	r2, r3
 2849 00a6 19D0     		beq	.L113
 2850 00a8 7A88     		ldrh	r2, [r7, #2]
 2851 00aa 40F22443 		movw	r3, #1060
 2852 00ae 9A42     		cmp	r2, r3
 2853 00b0 14D0     		beq	.L113
 2854 00b2 7A88     		ldrh	r2, [r7, #2]
 2855 00b4 40F64603 		movw	r3, #2118
 2856 00b8 9A42     		cmp	r2, r3
 2857 00ba 0FD0     		beq	.L113
 2858 00bc 7A88     		ldrh	r2, [r7, #2]
 2859 00be 40F66A13 		movw	r3, #2410
 2860 00c2 9A42     		cmp	r2, r3
 2861 00c4 0AD0     		beq	.L113
 2862 00c6 7B88     		ldrh	r3, [r7, #2]
 2863 00c8 602B     		cmp	r3, #96
 2864 00ca 07D0     		beq	.L113
 2865 00cc 40F20000 		movw	r0, #:lower16:.LC0
 2866 00d0 C0F20000 		movt	r0, #:upper16:.LC0
 2867 00d4 40F2BE41 		movw	r1, #1214
 2868 00d8 FFF7FEFF 		bl	assert_failed
 2869              	.L113:
1215:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2870              		.loc 1 1215 0 is_stmt 1
 2871 00dc 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2872 00de 002B     		cmp	r3, #0
 2873 00e0 0AD0     		beq	.L114
 2874              		.loc 1 1215 0 is_stmt 0 discriminator 1
 2875 00e2 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2876 00e4 012B     		cmp	r3, #1
 2877 00e6 07D0     		beq	.L114
 2878 00e8 40F20000 		movw	r0, #:lower16:.LC0
 2879 00ec C0F20000 		movt	r0, #:upper16:.LC0
 2880 00f0 40F2BF41 		movw	r1, #1215
 2881 00f4 FFF7FEFF 		bl	assert_failed
 2882              	.L114:
1216:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1217:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1218:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
 2883              		.loc 1 1218 0 is_stmt 1
 2884 00f8 7A88     		ldrh	r2, [r7, #2]
 2885 00fa 40F66A13 		movw	r3, #2410
 2886 00fe 9A42     		cmp	r2, r3
 2887 0100 23D1     		bne	.L115
1219:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1220:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 2888              		.loc 1 1220 0
 2889 0102 7A68     		ldr	r2, [r7, #4]
 2890 0104 4FF48053 		mov	r3, #4096
 2891 0108 C4F20103 		movt	r3, 16385
 2892 010c 9A42     		cmp	r2, r3
 2893 010e 1CD0     		beq	.L115
 2894              		.loc 1 1220 0 is_stmt 0 discriminator 1
 2895 0110 7A68     		ldr	r2, [r7, #4]
 2896 0112 4FF48843 		mov	r3, #17408
 2897 0116 C4F20003 		movt	r3, 16384
 2898 011a 9A42     		cmp	r2, r3
 2899 011c 15D0     		beq	.L115
 2900 011e 7A68     		ldr	r2, [r7, #4]
 2901 0120 4FF49043 		mov	r3, #18432
 2902 0124 C4F20003 		movt	r3, 16384
 2903 0128 9A42     		cmp	r2, r3
 2904 012a 0ED0     		beq	.L115
 2905 012c 7A68     		ldr	r2, [r7, #4]
 2906 012e 4FF4A053 		mov	r3, #5120
 2907 0132 C4F20103 		movt	r3, 16385
 2908 0136 9A42     		cmp	r2, r3
 2909 0138 07D0     		beq	.L115
 2910 013a 40F20000 		movw	r0, #:lower16:.LC0
 2911 013e C0F20000 		movt	r0, #:upper16:.LC0
 2912 0142 40F2C441 		movw	r1, #1220
 2913 0146 FFF7FEFF 		bl	assert_failed
 2914              	.L115:
1221:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1222:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1223:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartxbase = (uint32_t)USARTx;
 2915              		.loc 1 1223 0 is_stmt 1
 2916 014a 7B68     		ldr	r3, [r7, #4]
 2917 014c 7B61     		str	r3, [r7, #20]
1224:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1225:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1226:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 2918              		.loc 1 1226 0
 2919 014e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2920 0150 DBB2     		uxtb	r3, r3
 2921 0152 5B09     		lsrs	r3, r3, #5
 2922 0154 DBB2     		uxtb	r3, r3
 2923 0156 3B61     		str	r3, [r7, #16]
1227:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1228:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1229:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itpos = USART_IT & IT_MASK;
 2924              		.loc 1 1229 0
 2925 0158 7B88     		ldrh	r3, [r7, #2]
 2926 015a 03F01F03 		and	r3, r3, #31
 2927 015e FB60     		str	r3, [r7, #12]
1230:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 2928              		.loc 1 1230 0
 2929 0160 FB68     		ldr	r3, [r7, #12]
 2930 0162 0122     		movs	r2, #1
 2931 0164 02FA03F3 		lsl	r3, r2, r3
 2932 0168 BB60     		str	r3, [r7, #8]
1231:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1232:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 2933              		.loc 1 1232 0
 2934 016a 3B69     		ldr	r3, [r7, #16]
 2935 016c 012B     		cmp	r3, #1
 2936 016e 03D1     		bne	.L116
1233:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1234:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x0C;
 2937              		.loc 1 1234 0
 2938 0170 7B69     		ldr	r3, [r7, #20]
 2939 0172 0C33     		adds	r3, r3, #12
 2940 0174 7B61     		str	r3, [r7, #20]
 2941 0176 09E0     		b	.L117
 2942              	.L116:
1235:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1236:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 2943              		.loc 1 1236 0
 2944 0178 3B69     		ldr	r3, [r7, #16]
 2945 017a 022B     		cmp	r3, #2
 2946 017c 03D1     		bne	.L118
1237:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1238:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x10;
 2947              		.loc 1 1238 0
 2948 017e 7B69     		ldr	r3, [r7, #20]
 2949 0180 1033     		adds	r3, r3, #16
 2950 0182 7B61     		str	r3, [r7, #20]
 2951 0184 02E0     		b	.L117
 2952              	.L118:
1239:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1240:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT is in CR3 register */
1241:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1242:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x14; 
 2953              		.loc 1 1242 0
 2954 0186 7B69     		ldr	r3, [r7, #20]
 2955 0188 1433     		adds	r3, r3, #20
 2956 018a 7B61     		str	r3, [r7, #20]
 2957              	.L117:
1243:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1244:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 2958              		.loc 1 1244 0
 2959 018c 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2960 018e 002B     		cmp	r3, #0
 2961 0190 06D0     		beq	.L119
1245:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1246:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 2962              		.loc 1 1246 0
 2963 0192 7B69     		ldr	r3, [r7, #20]
 2964 0194 7A69     		ldr	r2, [r7, #20]
 2965 0196 1168     		ldr	r1, [r2]
 2966 0198 BA68     		ldr	r2, [r7, #8]
 2967 019a 0A43     		orrs	r2, r2, r1
 2968 019c 1A60     		str	r2, [r3]
 2969 019e 06E0     		b	.L111
 2970              	.L119:
1247:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1248:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1249:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1250:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 2971              		.loc 1 1250 0
 2972 01a0 7B69     		ldr	r3, [r7, #20]
 2973 01a2 7A69     		ldr	r2, [r7, #20]
 2974 01a4 1168     		ldr	r1, [r2]
 2975 01a6 BA68     		ldr	r2, [r7, #8]
 2976 01a8 D243     		mvns	r2, r2
 2977 01aa 0A40     		ands	r2, r2, r1
 2978 01ac 1A60     		str	r2, [r3]
 2979              	.L111:
1251:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1252:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 2980              		.loc 1 1252 0
 2981 01ae 1837     		adds	r7, r7, #24
 2982 01b0 BD46     		mov	sp, r7
 2983              		@ sp needed
 2984 01b2 80BD     		pop	{r7, pc}
 2985              		.cfi_endproc
 2986              	.LFE134:
 2988              		.section	.text.USART_GetFlagStatus,"ax",%progbits
 2989              		.align	2
 2990              		.global	USART_GetFlagStatus
 2991              		.thumb
 2992              		.thumb_func
 2994              	USART_GetFlagStatus:
 2995              	.LFB135:
1253:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1254:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1255:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1256:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1257:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1258:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1259:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1260:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1261:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1262:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1263:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1264:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1265:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1266:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1267:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
1268:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1269:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1270:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1271:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1272:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1273:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 2996              		.loc 1 1273 0
 2997              		.cfi_startproc
 2998              		@ args = 0, pretend = 0, frame = 16
 2999              		@ frame_needed = 1, uses_anonymous_args = 0
 3000 0000 80B5     		push	{r7, lr}
 3001              	.LCFI75:
 3002              		.cfi_def_cfa_offset 8
 3003              		.cfi_offset 7, -8
 3004              		.cfi_offset 14, -4
 3005 0002 84B0     		sub	sp, sp, #16
 3006              	.LCFI76:
 3007              		.cfi_def_cfa_offset 24
 3008 0004 00AF     		add	r7, sp, #0
 3009              	.LCFI77:
 3010              		.cfi_def_cfa_register 7
 3011 0006 7860     		str	r0, [r7, #4]
 3012 0008 0B46     		mov	r3, r1
 3013 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1274:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
 3014              		.loc 1 1274 0
 3015 000c 0023     		movs	r3, #0
 3016 000e FB73     		strb	r3, [r7, #15]
1275:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1276:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 3017              		.loc 1 1276 0
 3018 0010 7A68     		ldr	r2, [r7, #4]
 3019 0012 4FF48053 		mov	r3, #4096
 3020 0016 C4F20103 		movt	r3, 16385
 3021 001a 9A42     		cmp	r2, r3
 3022 001c 2AD0     		beq	.L122
 3023              		.loc 1 1276 0 is_stmt 0 discriminator 1
 3024 001e 7A68     		ldr	r2, [r7, #4]
 3025 0020 4FF48843 		mov	r3, #17408
 3026 0024 C4F20003 		movt	r3, 16384
 3027 0028 9A42     		cmp	r2, r3
 3028 002a 23D0     		beq	.L122
 3029 002c 7A68     		ldr	r2, [r7, #4]
 3030 002e 4FF49043 		mov	r3, #18432
 3031 0032 C4F20003 		movt	r3, 16384
 3032 0036 9A42     		cmp	r2, r3
 3033 0038 1CD0     		beq	.L122
 3034 003a 7A68     		ldr	r2, [r7, #4]
 3035 003c 4FF49843 		mov	r3, #19456
 3036 0040 C4F20003 		movt	r3, 16384
 3037 0044 9A42     		cmp	r2, r3
 3038 0046 15D0     		beq	.L122
 3039 0048 7A68     		ldr	r2, [r7, #4]
 3040 004a 4FF4A043 		mov	r3, #20480
 3041 004e C4F20003 		movt	r3, 16384
 3042 0052 9A42     		cmp	r2, r3
 3043 0054 0ED0     		beq	.L122
 3044 0056 7A68     		ldr	r2, [r7, #4]
 3045 0058 4FF4A053 		mov	r3, #5120
 3046 005c C4F20103 		movt	r3, 16385
 3047 0060 9A42     		cmp	r2, r3
 3048 0062 07D0     		beq	.L122
 3049 0064 40F20000 		movw	r0, #:lower16:.LC0
 3050 0068 C0F20000 		movt	r0, #:upper16:.LC0
 3051 006c 40F2FC41 		movw	r1, #1276
 3052 0070 FFF7FEFF 		bl	assert_failed
 3053              	.L122:
1277:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
 3054              		.loc 1 1277 0 is_stmt 1
 3055 0074 7B88     		ldrh	r3, [r7, #2]
 3056 0076 012B     		cmp	r3, #1
 3057 0078 24D0     		beq	.L123
 3058              		.loc 1 1277 0 is_stmt 0 discriminator 1
 3059 007a 7B88     		ldrh	r3, [r7, #2]
 3060 007c 802B     		cmp	r3, #128
 3061 007e 21D0     		beq	.L123
 3062 0080 7B88     		ldrh	r3, [r7, #2]
 3063 0082 402B     		cmp	r3, #64
 3064 0084 1ED0     		beq	.L123
 3065 0086 7B88     		ldrh	r3, [r7, #2]
 3066 0088 202B     		cmp	r3, #32
 3067 008a 1BD0     		beq	.L123
 3068 008c 7B88     		ldrh	r3, [r7, #2]
 3069 008e 102B     		cmp	r3, #16
 3070 0090 18D0     		beq	.L123
 3071 0092 7B88     		ldrh	r3, [r7, #2]
 3072 0094 B3F5807F 		cmp	r3, #256
 3073 0098 14D0     		beq	.L123
 3074 009a 7B88     		ldrh	r3, [r7, #2]
 3075 009c B3F5007F 		cmp	r3, #512
 3076 00a0 10D0     		beq	.L123
 3077 00a2 7B88     		ldrh	r3, [r7, #2]
 3078 00a4 082B     		cmp	r3, #8
 3079 00a6 0DD0     		beq	.L123
 3080 00a8 7B88     		ldrh	r3, [r7, #2]
 3081 00aa 042B     		cmp	r3, #4
 3082 00ac 0AD0     		beq	.L123
 3083 00ae 7B88     		ldrh	r3, [r7, #2]
 3084 00b0 022B     		cmp	r3, #2
 3085 00b2 07D0     		beq	.L123
 3086 00b4 40F20000 		movw	r0, #:lower16:.LC0
 3087 00b8 C0F20000 		movt	r0, #:upper16:.LC0
 3088 00bc 40F2FD41 		movw	r1, #1277
 3089 00c0 FFF7FEFF 		bl	assert_failed
 3090              	.L123:
1278:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1279:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1280:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
 3091              		.loc 1 1280 0 is_stmt 1
 3092 00c4 7B88     		ldrh	r3, [r7, #2]
 3093 00c6 B3F5007F 		cmp	r3, #512
 3094 00ca 23D1     		bne	.L124
1281:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1282:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 3095              		.loc 1 1282 0
 3096 00cc 7A68     		ldr	r2, [r7, #4]
 3097 00ce 4FF48053 		mov	r3, #4096
 3098 00d2 C4F20103 		movt	r3, 16385
 3099 00d6 9A42     		cmp	r2, r3
 3100 00d8 1CD0     		beq	.L124
 3101              		.loc 1 1282 0 is_stmt 0 discriminator 1
 3102 00da 7A68     		ldr	r2, [r7, #4]
 3103 00dc 4FF48843 		mov	r3, #17408
 3104 00e0 C4F20003 		movt	r3, 16384
 3105 00e4 9A42     		cmp	r2, r3
 3106 00e6 15D0     		beq	.L124
 3107 00e8 7A68     		ldr	r2, [r7, #4]
 3108 00ea 4FF49043 		mov	r3, #18432
 3109 00ee C4F20003 		movt	r3, 16384
 3110 00f2 9A42     		cmp	r2, r3
 3111 00f4 0ED0     		beq	.L124
 3112 00f6 7A68     		ldr	r2, [r7, #4]
 3113 00f8 4FF4A053 		mov	r3, #5120
 3114 00fc C4F20103 		movt	r3, 16385
 3115 0100 9A42     		cmp	r2, r3
 3116 0102 07D0     		beq	.L124
 3117 0104 40F20000 		movw	r0, #:lower16:.LC0
 3118 0108 C0F20000 		movt	r0, #:upper16:.LC0
 3119 010c 40F20251 		movw	r1, #1282
 3120 0110 FFF7FEFF 		bl	assert_failed
 3121              	.L124:
1283:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1284:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1285:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 3122              		.loc 1 1285 0 is_stmt 1
 3123 0114 7B68     		ldr	r3, [r7, #4]
 3124 0116 1B88     		ldrh	r3, [r3]	@ movhi
 3125 0118 9AB2     		uxth	r2, r3
 3126 011a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3127 011c 1340     		ands	r3, r3, r2
 3128 011e 9BB2     		uxth	r3, r3
 3129 0120 002B     		cmp	r3, #0
 3130 0122 02D0     		beq	.L125
1286:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1287:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 3131              		.loc 1 1287 0
 3132 0124 0123     		movs	r3, #1
 3133 0126 FB73     		strb	r3, [r7, #15]
 3134 0128 01E0     		b	.L126
 3135              	.L125:
1288:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1289:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1290:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1291:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 3136              		.loc 1 1291 0
 3137 012a 0023     		movs	r3, #0
 3138 012c FB73     		strb	r3, [r7, #15]
 3139              	.L126:
1292:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1293:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;
 3140              		.loc 1 1293 0
 3141 012e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1294:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 3142              		.loc 1 1294 0
 3143 0130 1846     		mov	r0, r3
 3144 0132 1037     		adds	r7, r7, #16
 3145 0134 BD46     		mov	sp, r7
 3146              		@ sp needed
 3147 0136 80BD     		pop	{r7, pc}
 3148              		.cfi_endproc
 3149              	.LFE135:
 3151              		.section	.text.USART_ClearFlag,"ax",%progbits
 3152              		.align	2
 3153              		.global	USART_ClearFlag
 3154              		.thumb
 3155              		.thumb_func
 3157              	USART_ClearFlag:
 3158              	.LFB136:
1295:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1296:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1297:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1298:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1299:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1300:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1301:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1302:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1303:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1304:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1305:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1306:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1307:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1308:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1309:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
1310:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1311:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1312:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1313:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1314:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1315:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1316:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1317:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1318:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1319:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1320:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1321:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1322:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 3159              		.loc 1 1322 0
 3160              		.cfi_startproc
 3161              		@ args = 0, pretend = 0, frame = 8
 3162              		@ frame_needed = 1, uses_anonymous_args = 0
 3163 0000 80B5     		push	{r7, lr}
 3164              	.LCFI78:
 3165              		.cfi_def_cfa_offset 8
 3166              		.cfi_offset 7, -8
 3167              		.cfi_offset 14, -4
 3168 0002 82B0     		sub	sp, sp, #8
 3169              	.LCFI79:
 3170              		.cfi_def_cfa_offset 16
 3171 0004 00AF     		add	r7, sp, #0
 3172              	.LCFI80:
 3173              		.cfi_def_cfa_register 7
 3174 0006 7860     		str	r0, [r7, #4]
 3175 0008 0B46     		mov	r3, r1
 3176 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1323:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1324:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 3177              		.loc 1 1324 0
 3178 000c 7A68     		ldr	r2, [r7, #4]
 3179 000e 4FF48053 		mov	r3, #4096
 3180 0012 C4F20103 		movt	r3, 16385
 3181 0016 9A42     		cmp	r2, r3
 3182 0018 2AD0     		beq	.L129
 3183              		.loc 1 1324 0 is_stmt 0 discriminator 1
 3184 001a 7A68     		ldr	r2, [r7, #4]
 3185 001c 4FF48843 		mov	r3, #17408
 3186 0020 C4F20003 		movt	r3, 16384
 3187 0024 9A42     		cmp	r2, r3
 3188 0026 23D0     		beq	.L129
 3189 0028 7A68     		ldr	r2, [r7, #4]
 3190 002a 4FF49043 		mov	r3, #18432
 3191 002e C4F20003 		movt	r3, 16384
 3192 0032 9A42     		cmp	r2, r3
 3193 0034 1CD0     		beq	.L129
 3194 0036 7A68     		ldr	r2, [r7, #4]
 3195 0038 4FF49843 		mov	r3, #19456
 3196 003c C4F20003 		movt	r3, 16384
 3197 0040 9A42     		cmp	r2, r3
 3198 0042 15D0     		beq	.L129
 3199 0044 7A68     		ldr	r2, [r7, #4]
 3200 0046 4FF4A043 		mov	r3, #20480
 3201 004a C4F20003 		movt	r3, 16384
 3202 004e 9A42     		cmp	r2, r3
 3203 0050 0ED0     		beq	.L129
 3204 0052 7A68     		ldr	r2, [r7, #4]
 3205 0054 4FF4A053 		mov	r3, #5120
 3206 0058 C4F20103 		movt	r3, 16385
 3207 005c 9A42     		cmp	r2, r3
 3208 005e 07D0     		beq	.L129
 3209 0060 40F20000 		movw	r0, #:lower16:.LC0
 3210 0064 C0F20000 		movt	r0, #:upper16:.LC0
 3211 0068 40F22C51 		movw	r1, #1324
 3212 006c FFF7FEFF 		bl	assert_failed
 3213              	.L129:
1325:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
 3214              		.loc 1 1325 0 is_stmt 1
 3215 0070 7A88     		ldrh	r2, [r7, #2]
 3216 0072 4FF69F43 		movw	r3, #64671
 3217 0076 1340     		ands	r3, r3, r2
 3218 0078 002B     		cmp	r3, #0
 3219 007a 02D1     		bne	.L130
 3220              		.loc 1 1325 0 is_stmt 0 discriminator 2
 3221 007c 7B88     		ldrh	r3, [r7, #2]
 3222 007e 002B     		cmp	r3, #0
 3223 0080 07D1     		bne	.L131
 3224              	.L130:
 3225              		.loc 1 1325 0 discriminator 1
 3226 0082 40F20000 		movw	r0, #:lower16:.LC0
 3227 0086 C0F20000 		movt	r0, #:upper16:.LC0
 3228 008a 40F22D51 		movw	r1, #1325
 3229 008e FFF7FEFF 		bl	assert_failed
 3230              	.L131:
1326:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1327:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1328:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
 3231              		.loc 1 1328 0 is_stmt 1
 3232 0092 7B88     		ldrh	r3, [r7, #2]
 3233 0094 03F40073 		and	r3, r3, #512
 3234 0098 002B     		cmp	r3, #0
 3235 009a 23D0     		beq	.L132
1329:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1330:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 3236              		.loc 1 1330 0
 3237 009c 7A68     		ldr	r2, [r7, #4]
 3238 009e 4FF48053 		mov	r3, #4096
 3239 00a2 C4F20103 		movt	r3, 16385
 3240 00a6 9A42     		cmp	r2, r3
 3241 00a8 1CD0     		beq	.L132
 3242              		.loc 1 1330 0 is_stmt 0 discriminator 1
 3243 00aa 7A68     		ldr	r2, [r7, #4]
 3244 00ac 4FF48843 		mov	r3, #17408
 3245 00b0 C4F20003 		movt	r3, 16384
 3246 00b4 9A42     		cmp	r2, r3
 3247 00b6 15D0     		beq	.L132
 3248 00b8 7A68     		ldr	r2, [r7, #4]
 3249 00ba 4FF49043 		mov	r3, #18432
 3250 00be C4F20003 		movt	r3, 16384
 3251 00c2 9A42     		cmp	r2, r3
 3252 00c4 0ED0     		beq	.L132
 3253 00c6 7A68     		ldr	r2, [r7, #4]
 3254 00c8 4FF4A053 		mov	r3, #5120
 3255 00cc C4F20103 		movt	r3, 16385
 3256 00d0 9A42     		cmp	r2, r3
 3257 00d2 07D0     		beq	.L132
 3258 00d4 40F20000 		movw	r0, #:lower16:.LC0
 3259 00d8 C0F20000 		movt	r0, #:upper16:.LC0
 3260 00dc 40F23251 		movw	r1, #1330
 3261 00e0 FFF7FEFF 		bl	assert_failed
 3262              	.L132:
1331:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1332:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        
1333:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 3263              		.loc 1 1333 0 is_stmt 1
 3264 00e4 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3265 00e6 DB43     		mvns	r3, r3
 3266 00e8 9AB2     		uxth	r2, r3
 3267 00ea 7B68     		ldr	r3, [r7, #4]
 3268 00ec 1A80     		strh	r2, [r3]	@ movhi
1334:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 3269              		.loc 1 1334 0
 3270 00ee 0837     		adds	r7, r7, #8
 3271 00f0 BD46     		mov	sp, r7
 3272              		@ sp needed
 3273 00f2 80BD     		pop	{r7, pc}
 3274              		.cfi_endproc
 3275              	.LFE136:
 3277              		.section	.text.USART_GetITStatus,"ax",%progbits
 3278              		.align	2
 3279              		.global	USART_GetITStatus
 3280              		.thumb
 3281              		.thumb_func
 3283              	USART_GetITStatus:
 3284              	.LFB137:
1335:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1336:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1337:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1338:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1339:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1340:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1341:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1342:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1343:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1344:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1345:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1346:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1347:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1348:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_RX : OverRun Error interrupt if the RXNEIE bit is set
1349:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_ER : OverRun Error interrupt if the EIE bit is set  
1350:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_NE:   Noise Error interrupt
1351:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_FE:   Framing Error interrupt
1352:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1353:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1354:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1355:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1356:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 3285              		.loc 1 1356 0
 3286              		.cfi_startproc
 3287              		@ args = 0, pretend = 0, frame = 24
 3288              		@ frame_needed = 1, uses_anonymous_args = 0
 3289 0000 80B5     		push	{r7, lr}
 3290              	.LCFI81:
 3291              		.cfi_def_cfa_offset 8
 3292              		.cfi_offset 7, -8
 3293              		.cfi_offset 14, -4
 3294 0002 86B0     		sub	sp, sp, #24
 3295              	.LCFI82:
 3296              		.cfi_def_cfa_offset 32
 3297 0004 00AF     		add	r7, sp, #0
 3298              	.LCFI83:
 3299              		.cfi_def_cfa_register 7
 3300 0006 7860     		str	r0, [r7, #4]
 3301 0008 0B46     		mov	r3, r1
 3302 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1357:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 3303              		.loc 1 1357 0
 3304 000c 0023     		movs	r3, #0
 3305 000e FB60     		str	r3, [r7, #12]
 3306 0010 0023     		movs	r3, #0
 3307 0012 7B61     		str	r3, [r7, #20]
 3308 0014 0023     		movs	r3, #0
 3309 0016 BB60     		str	r3, [r7, #8]
1358:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ITStatus bitstatus = RESET;
 3310              		.loc 1 1358 0
 3311 0018 0023     		movs	r3, #0
 3312 001a FB74     		strb	r3, [r7, #19]
1359:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1360:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 3313              		.loc 1 1360 0
 3314 001c 7A68     		ldr	r2, [r7, #4]
 3315 001e 4FF48053 		mov	r3, #4096
 3316 0022 C4F20103 		movt	r3, 16385
 3317 0026 9A42     		cmp	r2, r3
 3318 0028 2AD0     		beq	.L134
 3319              		.loc 1 1360 0 is_stmt 0 discriminator 1
 3320 002a 7A68     		ldr	r2, [r7, #4]
 3321 002c 4FF48843 		mov	r3, #17408
 3322 0030 C4F20003 		movt	r3, 16384
 3323 0034 9A42     		cmp	r2, r3
 3324 0036 23D0     		beq	.L134
 3325 0038 7A68     		ldr	r2, [r7, #4]
 3326 003a 4FF49043 		mov	r3, #18432
 3327 003e C4F20003 		movt	r3, 16384
 3328 0042 9A42     		cmp	r2, r3
 3329 0044 1CD0     		beq	.L134
 3330 0046 7A68     		ldr	r2, [r7, #4]
 3331 0048 4FF49843 		mov	r3, #19456
 3332 004c C4F20003 		movt	r3, 16384
 3333 0050 9A42     		cmp	r2, r3
 3334 0052 15D0     		beq	.L134
 3335 0054 7A68     		ldr	r2, [r7, #4]
 3336 0056 4FF4A043 		mov	r3, #20480
 3337 005a C4F20003 		movt	r3, 16384
 3338 005e 9A42     		cmp	r2, r3
 3339 0060 0ED0     		beq	.L134
 3340 0062 7A68     		ldr	r2, [r7, #4]
 3341 0064 4FF4A053 		mov	r3, #5120
 3342 0068 C4F20103 		movt	r3, 16385
 3343 006c 9A42     		cmp	r2, r3
 3344 006e 07D0     		beq	.L134
 3345 0070 40F20000 		movw	r0, #:lower16:.LC0
 3346 0074 C0F20000 		movt	r0, #:upper16:.LC0
 3347 0078 4FF4AA61 		mov	r1, #1360
 3348 007c FFF7FEFF 		bl	assert_failed
 3349              	.L134:
1361:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
 3350              		.loc 1 1361 0 is_stmt 1
 3351 0080 7B88     		ldrh	r3, [r7, #2]
 3352 0082 282B     		cmp	r3, #40
 3353 0084 3AD0     		beq	.L135
 3354              		.loc 1 1361 0 is_stmt 0 discriminator 1
 3355 0086 7A88     		ldrh	r2, [r7, #2]
 3356 0088 40F22773 		movw	r3, #1831
 3357 008c 9A42     		cmp	r2, r3
 3358 008e 35D0     		beq	.L135
 3359 0090 7A88     		ldrh	r2, [r7, #2]
 3360 0092 40F22663 		movw	r3, #1574
 3361 0096 9A42     		cmp	r2, r3
 3362 0098 30D0     		beq	.L135
 3363 009a 7A88     		ldrh	r2, [r7, #2]
 3364 009c 40F22553 		movw	r3, #1317
 3365 00a0 9A42     		cmp	r2, r3
 3366 00a2 2BD0     		beq	.L135
 3367 00a4 7A88     		ldrh	r2, [r7, #2]
 3368 00a6 40F22443 		movw	r3, #1060
 3369 00aa 9A42     		cmp	r2, r3
 3370 00ac 26D0     		beq	.L135
 3371 00ae 7A88     		ldrh	r2, [r7, #2]
 3372 00b0 40F64603 		movw	r3, #2118
 3373 00b4 9A42     		cmp	r2, r3
 3374 00b6 21D0     		beq	.L135
 3375 00b8 7A88     		ldrh	r2, [r7, #2]
 3376 00ba 40F66A13 		movw	r3, #2410
 3377 00be 9A42     		cmp	r2, r3
 3378 00c0 1CD0     		beq	.L135
 3379 00c2 7B88     		ldrh	r3, [r7, #2]
 3380 00c4 B3F5587F 		cmp	r3, #864
 3381 00c8 18D0     		beq	.L135
 3382 00ca 7A88     		ldrh	r2, [r7, #2]
 3383 00cc 40F22533 		movw	r3, #805
 3384 00d0 9A42     		cmp	r2, r3
 3385 00d2 13D0     		beq	.L135
 3386 00d4 7B88     		ldrh	r3, [r7, #2]
 3387 00d6 B3F5587F 		cmp	r3, #864
 3388 00da 0FD0     		beq	.L135
 3389 00dc 7B88     		ldrh	r3, [r7, #2]
 3390 00de B3F5187F 		cmp	r3, #608
 3391 00e2 0BD0     		beq	.L135
 3392 00e4 7B88     		ldrh	r3, [r7, #2]
 3393 00e6 B3F5B07F 		cmp	r3, #352
 3394 00ea 07D0     		beq	.L135
 3395 00ec 40F20000 		movw	r0, #:lower16:.LC0
 3396 00f0 C0F20000 		movt	r0, #:upper16:.LC0
 3397 00f4 40F25151 		movw	r1, #1361
 3398 00f8 FFF7FEFF 		bl	assert_failed
 3399              	.L135:
1362:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1363:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1364:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
 3400              		.loc 1 1364 0 is_stmt 1
 3401 00fc 7A88     		ldrh	r2, [r7, #2]
 3402 00fe 40F66A13 		movw	r3, #2410
 3403 0102 9A42     		cmp	r2, r3
 3404 0104 23D1     		bne	.L136
1365:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1366:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 3405              		.loc 1 1366 0
 3406 0106 7A68     		ldr	r2, [r7, #4]
 3407 0108 4FF48053 		mov	r3, #4096
 3408 010c C4F20103 		movt	r3, 16385
 3409 0110 9A42     		cmp	r2, r3
 3410 0112 1CD0     		beq	.L136
 3411              		.loc 1 1366 0 is_stmt 0 discriminator 1
 3412 0114 7A68     		ldr	r2, [r7, #4]
 3413 0116 4FF48843 		mov	r3, #17408
 3414 011a C4F20003 		movt	r3, 16384
 3415 011e 9A42     		cmp	r2, r3
 3416 0120 15D0     		beq	.L136
 3417 0122 7A68     		ldr	r2, [r7, #4]
 3418 0124 4FF49043 		mov	r3, #18432
 3419 0128 C4F20003 		movt	r3, 16384
 3420 012c 9A42     		cmp	r2, r3
 3421 012e 0ED0     		beq	.L136
 3422 0130 7A68     		ldr	r2, [r7, #4]
 3423 0132 4FF4A053 		mov	r3, #5120
 3424 0136 C4F20103 		movt	r3, 16385
 3425 013a 9A42     		cmp	r2, r3
 3426 013c 07D0     		beq	.L136
 3427 013e 40F20000 		movw	r0, #:lower16:.LC0
 3428 0142 C0F20000 		movt	r0, #:upper16:.LC0
 3429 0146 40F25651 		movw	r1, #1366
 3430 014a FFF7FEFF 		bl	assert_failed
 3431              	.L136:
1367:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1368:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1369:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1370:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 3432              		.loc 1 1370 0 is_stmt 1
 3433 014e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3434 0150 DBB2     		uxtb	r3, r3
 3435 0152 5B09     		lsrs	r3, r3, #5
 3436 0154 DBB2     		uxtb	r3, r3
 3437 0156 BB60     		str	r3, [r7, #8]
1371:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1372:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = USART_IT & IT_MASK;
 3438              		.loc 1 1372 0
 3439 0158 7B88     		ldrh	r3, [r7, #2]
 3440 015a 03F01F03 		and	r3, r3, #31
 3441 015e 7B61     		str	r3, [r7, #20]
1373:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 3442              		.loc 1 1373 0
 3443 0160 7B69     		ldr	r3, [r7, #20]
 3444 0162 0122     		movs	r2, #1
 3445 0164 02FA03F3 		lsl	r3, r2, r3
 3446 0168 7B61     		str	r3, [r7, #20]
1374:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1375:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 3447              		.loc 1 1375 0
 3448 016a BB68     		ldr	r3, [r7, #8]
 3449 016c 012B     		cmp	r3, #1
 3450 016e 06D1     		bne	.L137
1376:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1377:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR1;
 3451              		.loc 1 1377 0
 3452 0170 7B68     		ldr	r3, [r7, #4]
 3453 0172 9B89     		ldrh	r3, [r3, #12]	@ movhi
 3454 0174 9BB2     		uxth	r3, r3
 3455 0176 7A69     		ldr	r2, [r7, #20]
 3456 0178 1340     		ands	r3, r3, r2
 3457 017a 7B61     		str	r3, [r7, #20]
 3458 017c 0FE0     		b	.L138
 3459              	.L137:
1378:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1379:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 3460              		.loc 1 1379 0
 3461 017e BB68     		ldr	r3, [r7, #8]
 3462 0180 022B     		cmp	r3, #2
 3463 0182 06D1     		bne	.L139
1380:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1381:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR2;
 3464              		.loc 1 1381 0
 3465 0184 7B68     		ldr	r3, [r7, #4]
 3466 0186 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 3467 0188 9BB2     		uxth	r3, r3
 3468 018a 7A69     		ldr	r2, [r7, #20]
 3469 018c 1340     		ands	r3, r3, r2
 3470 018e 7B61     		str	r3, [r7, #20]
 3471 0190 05E0     		b	.L138
 3472              	.L139:
1382:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1383:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT  is in CR3 register */
1384:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1385:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR3;
 3473              		.loc 1 1385 0
 3474 0192 7B68     		ldr	r3, [r7, #4]
 3475 0194 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 3476 0196 9BB2     		uxth	r3, r3
 3477 0198 7A69     		ldr	r2, [r7, #20]
 3478 019a 1340     		ands	r3, r3, r2
 3479 019c 7B61     		str	r3, [r7, #20]
 3480              	.L138:
1386:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1387:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1388:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 3481              		.loc 1 1388 0
 3482 019e 7B88     		ldrh	r3, [r7, #2]
 3483 01a0 1B0A     		lsrs	r3, r3, #8
 3484 01a2 9BB2     		uxth	r3, r3
 3485 01a4 FB60     		str	r3, [r7, #12]
1389:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 3486              		.loc 1 1389 0
 3487 01a6 FB68     		ldr	r3, [r7, #12]
 3488 01a8 0122     		movs	r2, #1
 3489 01aa 02FA03F3 		lsl	r3, r2, r3
 3490 01ae FB60     		str	r3, [r7, #12]
1390:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 3491              		.loc 1 1390 0
 3492 01b0 7B68     		ldr	r3, [r7, #4]
 3493 01b2 1B88     		ldrh	r3, [r3]	@ movhi
 3494 01b4 9BB2     		uxth	r3, r3
 3495 01b6 FA68     		ldr	r2, [r7, #12]
 3496 01b8 1340     		ands	r3, r3, r2
 3497 01ba FB60     		str	r3, [r7, #12]
1391:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 3498              		.loc 1 1391 0
 3499 01bc 7B69     		ldr	r3, [r7, #20]
 3500 01be 002B     		cmp	r3, #0
 3501 01c0 05D0     		beq	.L140
 3502              		.loc 1 1391 0 is_stmt 0 discriminator 1
 3503 01c2 FB68     		ldr	r3, [r7, #12]
 3504 01c4 002B     		cmp	r3, #0
 3505 01c6 02D0     		beq	.L140
1392:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1393:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 3506              		.loc 1 1393 0 is_stmt 1
 3507 01c8 0123     		movs	r3, #1
 3508 01ca FB74     		strb	r3, [r7, #19]
 3509 01cc 01E0     		b	.L141
 3510              	.L140:
1394:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1395:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1396:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1397:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 3511              		.loc 1 1397 0
 3512 01ce 0023     		movs	r3, #0
 3513 01d0 FB74     		strb	r3, [r7, #19]
 3514              	.L141:
1398:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1399:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1400:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;  
 3515              		.loc 1 1400 0
 3516 01d2 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1401:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 3517              		.loc 1 1401 0
 3518 01d4 1846     		mov	r0, r3
 3519 01d6 1837     		adds	r7, r7, #24
 3520 01d8 BD46     		mov	sp, r7
 3521              		@ sp needed
 3522 01da 80BD     		pop	{r7, pc}
 3523              		.cfi_endproc
 3524              	.LFE137:
 3526              		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 3527              		.align	2
 3528              		.global	USART_ClearITPendingBit
 3529              		.thumb
 3530              		.thumb_func
 3532              	USART_ClearITPendingBit:
 3533              	.LFB138:
1402:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1403:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1404:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1405:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1406:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1407:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1408:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1409:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1410:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1411:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1412:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1413:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
1414:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1415:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1416:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1417:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1418:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1419:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1420:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1421:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1422:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1423:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1424:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1425:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1426:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  
1427:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1428:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1429:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1430:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 3534              		.loc 1 1430 0
 3535              		.cfi_startproc
 3536              		@ args = 0, pretend = 0, frame = 16
 3537              		@ frame_needed = 1, uses_anonymous_args = 0
 3538 0000 80B5     		push	{r7, lr}
 3539              	.LCFI84:
 3540              		.cfi_def_cfa_offset 8
 3541              		.cfi_offset 7, -8
 3542              		.cfi_offset 14, -4
 3543 0002 84B0     		sub	sp, sp, #16
 3544              	.LCFI85:
 3545              		.cfi_def_cfa_offset 24
 3546 0004 00AF     		add	r7, sp, #0
 3547              	.LCFI86:
 3548              		.cfi_def_cfa_register 7
 3549 0006 7860     		str	r0, [r7, #4]
 3550 0008 0B46     		mov	r3, r1
 3551 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1431:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
 3552              		.loc 1 1431 0
 3553 000c 0023     		movs	r3, #0
 3554 000e FB81     		strh	r3, [r7, #14]	@ movhi
 3555 0010 0023     		movs	r3, #0
 3556 0012 BB81     		strh	r3, [r7, #12]	@ movhi
1432:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1433:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 3557              		.loc 1 1433 0
 3558 0014 7A68     		ldr	r2, [r7, #4]
 3559 0016 4FF48053 		mov	r3, #4096
 3560 001a C4F20103 		movt	r3, 16385
 3561 001e 9A42     		cmp	r2, r3
 3562 0020 2AD0     		beq	.L144
 3563              		.loc 1 1433 0 is_stmt 0 discriminator 1
 3564 0022 7A68     		ldr	r2, [r7, #4]
 3565 0024 4FF48843 		mov	r3, #17408
 3566 0028 C4F20003 		movt	r3, 16384
 3567 002c 9A42     		cmp	r2, r3
 3568 002e 23D0     		beq	.L144
 3569 0030 7A68     		ldr	r2, [r7, #4]
 3570 0032 4FF49043 		mov	r3, #18432
 3571 0036 C4F20003 		movt	r3, 16384
 3572 003a 9A42     		cmp	r2, r3
 3573 003c 1CD0     		beq	.L144
 3574 003e 7A68     		ldr	r2, [r7, #4]
 3575 0040 4FF49843 		mov	r3, #19456
 3576 0044 C4F20003 		movt	r3, 16384
 3577 0048 9A42     		cmp	r2, r3
 3578 004a 15D0     		beq	.L144
 3579 004c 7A68     		ldr	r2, [r7, #4]
 3580 004e 4FF4A043 		mov	r3, #20480
 3581 0052 C4F20003 		movt	r3, 16384
 3582 0056 9A42     		cmp	r2, r3
 3583 0058 0ED0     		beq	.L144
 3584 005a 7A68     		ldr	r2, [r7, #4]
 3585 005c 4FF4A053 		mov	r3, #5120
 3586 0060 C4F20103 		movt	r3, 16385
 3587 0064 9A42     		cmp	r2, r3
 3588 0066 07D0     		beq	.L144
 3589 0068 40F20000 		movw	r0, #:lower16:.LC0
 3590 006c C0F20000 		movt	r0, #:upper16:.LC0
 3591 0070 40F29951 		movw	r1, #1433
 3592 0074 FFF7FEFF 		bl	assert_failed
 3593              	.L144:
1434:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
 3594              		.loc 1 1434 0 is_stmt 1
 3595 0078 7A88     		ldrh	r2, [r7, #2]
 3596 007a 40F22663 		movw	r3, #1574
 3597 007e 9A42     		cmp	r2, r3
 3598 0080 16D0     		beq	.L145
 3599              		.loc 1 1434 0 is_stmt 0 discriminator 1
 3600 0082 7A88     		ldrh	r2, [r7, #2]
 3601 0084 40F22553 		movw	r3, #1317
 3602 0088 9A42     		cmp	r2, r3
 3603 008a 11D0     		beq	.L145
 3604 008c 7A88     		ldrh	r2, [r7, #2]
 3605 008e 40F64603 		movw	r3, #2118
 3606 0092 9A42     		cmp	r2, r3
 3607 0094 0CD0     		beq	.L145
 3608 0096 7A88     		ldrh	r2, [r7, #2]
 3609 0098 40F66A13 		movw	r3, #2410
 3610 009c 9A42     		cmp	r2, r3
 3611 009e 07D0     		beq	.L145
 3612 00a0 40F20000 		movw	r0, #:lower16:.LC0
 3613 00a4 C0F20000 		movt	r0, #:upper16:.LC0
 3614 00a8 40F29A51 		movw	r1, #1434
 3615 00ac FFF7FEFF 		bl	assert_failed
 3616              	.L145:
1435:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1436:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1437:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
 3617              		.loc 1 1437 0 is_stmt 1
 3618 00b0 7A88     		ldrh	r2, [r7, #2]
 3619 00b2 40F66A13 		movw	r3, #2410
 3620 00b6 9A42     		cmp	r2, r3
 3621 00b8 23D1     		bne	.L146
1438:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1439:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 3622              		.loc 1 1439 0
 3623 00ba 7A68     		ldr	r2, [r7, #4]
 3624 00bc 4FF48053 		mov	r3, #4096
 3625 00c0 C4F20103 		movt	r3, 16385
 3626 00c4 9A42     		cmp	r2, r3
 3627 00c6 1CD0     		beq	.L146
 3628              		.loc 1 1439 0 is_stmt 0 discriminator 1
 3629 00c8 7A68     		ldr	r2, [r7, #4]
 3630 00ca 4FF48843 		mov	r3, #17408
 3631 00ce C4F20003 		movt	r3, 16384
 3632 00d2 9A42     		cmp	r2, r3
 3633 00d4 15D0     		beq	.L146
 3634 00d6 7A68     		ldr	r2, [r7, #4]
 3635 00d8 4FF49043 		mov	r3, #18432
 3636 00dc C4F20003 		movt	r3, 16384
 3637 00e0 9A42     		cmp	r2, r3
 3638 00e2 0ED0     		beq	.L146
 3639 00e4 7A68     		ldr	r2, [r7, #4]
 3640 00e6 4FF4A053 		mov	r3, #5120
 3641 00ea C4F20103 		movt	r3, 16385
 3642 00ee 9A42     		cmp	r2, r3
 3643 00f0 07D0     		beq	.L146
 3644 00f2 40F20000 		movw	r0, #:lower16:.LC0
 3645 00f6 C0F20000 		movt	r0, #:upper16:.LC0
 3646 00fa 40F29F51 		movw	r1, #1439
 3647 00fe FFF7FEFF 		bl	assert_failed
 3648              	.L146:
1440:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1441:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1442:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 3649              		.loc 1 1442 0 is_stmt 1
 3650 0102 7B88     		ldrh	r3, [r7, #2]
 3651 0104 1B0A     		lsrs	r3, r3, #8
 3652 0106 FB81     		strh	r3, [r7, #14]	@ movhi
1443:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 3653              		.loc 1 1443 0
 3654 0108 FB89     		ldrh	r3, [r7, #14]
 3655 010a 0122     		movs	r2, #1
 3656 010c 02FA03F3 		lsl	r3, r2, r3
 3657 0110 BB81     		strh	r3, [r7, #12]	@ movhi
1444:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 3658              		.loc 1 1444 0
 3659 0112 BB89     		ldrh	r3, [r7, #12]	@ movhi
 3660 0114 DB43     		mvns	r3, r3
 3661 0116 9AB2     		uxth	r2, r3
 3662 0118 7B68     		ldr	r3, [r7, #4]
 3663 011a 1A80     		strh	r2, [r3]	@ movhi
1445:lib/chip/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 3664              		.loc 1 1445 0
 3665 011c 1037     		adds	r7, r7, #16
 3666 011e BD46     		mov	sp, r7
 3667              		@ sp needed
 3668 0120 80BD     		pop	{r7, pc}
 3669              		.cfi_endproc
 3670              	.LFE138:
 3672 0122 00BF     		.text
 3673              	.Letext0:
 3674              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3675              		.file 3 "/usr/include/newlib/stdint.h"
 3676              		.file 4 "lib/chip/CMSIS/ST/STM32F4xx/Include/stm32f4xx.h"
 3677              		.file 5 "lib/chip/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 3678              		.file 6 "lib/chip/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h"
 3679              		.file 7 "lib/chip/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_usart.c
     /tmp/ccpeLgUC.s:20     .rodata:00000000 $d
     /tmp/ccpeLgUC.s:21     .rodata:00000000 .LC0
     /tmp/ccpeLgUC.s:25     .text.USART_DeInit:00000000 $t
     /tmp/ccpeLgUC.s:30     .text.USART_DeInit:00000000 USART_DeInit
     /tmp/ccpeLgUC.s:190    .text.USART_Init:00000000 $t
     /tmp/ccpeLgUC.s:195    .text.USART_Init:00000000 USART_Init
     /tmp/ccpeLgUC.s:610    .text.USART_StructInit:00000000 $t
     /tmp/ccpeLgUC.s:615    .text.USART_StructInit:00000000 USART_StructInit
     /tmp/ccpeLgUC.s:667    .text.USART_ClockInit:00000000 $t
     /tmp/ccpeLgUC.s:672    .text.USART_ClockInit:00000000 USART_ClockInit
     /tmp/ccpeLgUC.s:824    .text.USART_ClockStructInit:00000000 $t
     /tmp/ccpeLgUC.s:829    .text.USART_ClockStructInit:00000000 USART_ClockStructInit
     /tmp/ccpeLgUC.s:873    .text.USART_Cmd:00000000 $t
     /tmp/ccpeLgUC.s:878    .text.USART_Cmd:00000000 USART_Cmd
     /tmp/ccpeLgUC.s:980    .text.USART_SetPrescaler:00000000 $t
     /tmp/ccpeLgUC.s:985    .text.USART_SetPrescaler:00000000 USART_SetPrescaler
     /tmp/ccpeLgUC.s:1069   .text.USART_OverSampling8Cmd:00000000 $t
     /tmp/ccpeLgUC.s:1074   .text.USART_OverSampling8Cmd:00000000 USART_OverSampling8Cmd
     /tmp/ccpeLgUC.s:1177   .text.USART_OneBitMethodCmd:00000000 $t
     /tmp/ccpeLgUC.s:1182   .text.USART_OneBitMethodCmd:00000000 USART_OneBitMethodCmd
     /tmp/ccpeLgUC.s:1284   .text.USART_SendData:00000000 $t
     /tmp/ccpeLgUC.s:1289   .text.USART_SendData:00000000 USART_SendData
     /tmp/ccpeLgUC.s:1371   .text.USART_ReceiveData:00000000 $t
     /tmp/ccpeLgUC.s:1376   .text.USART_ReceiveData:00000000 USART_ReceiveData
     /tmp/ccpeLgUC.s:1447   .text.USART_SetAddress:00000000 $t
     /tmp/ccpeLgUC.s:1452   .text.USART_SetAddress:00000000 USART_SetAddress
     /tmp/ccpeLgUC.s:1546   .text.USART_ReceiverWakeUpCmd:00000000 $t
     /tmp/ccpeLgUC.s:1551   .text.USART_ReceiverWakeUpCmd:00000000 USART_ReceiverWakeUpCmd
     /tmp/ccpeLgUC.s:1653   .text.USART_WakeUpConfig:00000000 $t
     /tmp/ccpeLgUC.s:1658   .text.USART_WakeUpConfig:00000000 USART_WakeUpConfig
     /tmp/ccpeLgUC.s:1754   .text.USART_LINBreakDetectLengthConfig:00000000 $t
     /tmp/ccpeLgUC.s:1759   .text.USART_LINBreakDetectLengthConfig:00000000 USART_LINBreakDetectLengthConfig
     /tmp/ccpeLgUC.s:1855   .text.USART_LINCmd:00000000 $t
     /tmp/ccpeLgUC.s:1860   .text.USART_LINCmd:00000000 USART_LINCmd
     /tmp/ccpeLgUC.s:1962   .text.USART_SendBreak:00000000 $t
     /tmp/ccpeLgUC.s:1967   .text.USART_SendBreak:00000000 USART_SendBreak
     /tmp/ccpeLgUC.s:2039   .text.USART_HalfDuplexCmd:00000000 $t
     /tmp/ccpeLgUC.s:2044   .text.USART_HalfDuplexCmd:00000000 USART_HalfDuplexCmd
     /tmp/ccpeLgUC.s:2146   .text.USART_SetGuardTime:00000000 $t
     /tmp/ccpeLgUC.s:2151   .text.USART_SetGuardTime:00000000 USART_SetGuardTime
     /tmp/ccpeLgUC.s:2227   .text.USART_SmartCardCmd:00000000 $t
     /tmp/ccpeLgUC.s:2232   .text.USART_SmartCardCmd:00000000 USART_SmartCardCmd
     /tmp/ccpeLgUC.s:2324   .text.USART_SmartCardNACKCmd:00000000 $t
     /tmp/ccpeLgUC.s:2329   .text.USART_SmartCardNACKCmd:00000000 USART_SmartCardNACKCmd
     /tmp/ccpeLgUC.s:2421   .text.USART_IrDAConfig:00000000 $t
     /tmp/ccpeLgUC.s:2426   .text.USART_IrDAConfig:00000000 USART_IrDAConfig
     /tmp/ccpeLgUC.s:2522   .text.USART_IrDACmd:00000000 $t
     /tmp/ccpeLgUC.s:2527   .text.USART_IrDACmd:00000000 USART_IrDACmd
     /tmp/ccpeLgUC.s:2629   .text.USART_DMACmd:00000000 $t
     /tmp/ccpeLgUC.s:2634   .text.USART_DMACmd:00000000 USART_DMACmd
     /tmp/ccpeLgUC.s:2759   .text.USART_ITConfig:00000000 $t
     /tmp/ccpeLgUC.s:2764   .text.USART_ITConfig:00000000 USART_ITConfig
     /tmp/ccpeLgUC.s:2989   .text.USART_GetFlagStatus:00000000 $t
     /tmp/ccpeLgUC.s:2994   .text.USART_GetFlagStatus:00000000 USART_GetFlagStatus
     /tmp/ccpeLgUC.s:3152   .text.USART_ClearFlag:00000000 $t
     /tmp/ccpeLgUC.s:3157   .text.USART_ClearFlag:00000000 USART_ClearFlag
     /tmp/ccpeLgUC.s:3278   .text.USART_GetITStatus:00000000 $t
     /tmp/ccpeLgUC.s:3283   .text.USART_GetITStatus:00000000 USART_GetITStatus
     /tmp/ccpeLgUC.s:3527   .text.USART_ClearITPendingBit:00000000 $t
     /tmp/ccpeLgUC.s:3532   .text.USART_ClearITPendingBit:00000000 USART_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
assert_failed
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
