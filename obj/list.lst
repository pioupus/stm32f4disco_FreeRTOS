   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"list.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.vListInitialise,"ax",%progbits
  20              		.align	2
  21              		.global	vListInitialise
  22              		.thumb
  23              		.thumb_func
  25              	vListInitialise:
  26              	.LFB1:
  27              		.file 1 "lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c"
   1:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** /*
   2:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     FreeRTOS V8.1.2 - Copyright (C) 2014 Real Time Engineers Ltd.
   3:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     All rights reserved
   4:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
   5:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
   7:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     ***************************************************************************
   8:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****      *                                                                       *
   9:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****      *    platform software that has become a de facto standard.             *
  12:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****      *                                                                       *
  13:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****      *                                                                       *
  17:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****      *    Thank you!                                                         *
  18:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****      *                                                                       *
  19:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     ***************************************************************************
  20:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
  21:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     This file is part of the FreeRTOS distribution.
  22:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
  23:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
  27:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  28:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  29:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  30:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  31:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
  32:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     link: http://www.freertos.org/a00114.html
  36:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
  37:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     1 tab == 4 spaces!
  38:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
  39:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     ***************************************************************************
  40:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****      *                                                                       *
  41:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****      *    not run, what could be wrong?"                                     *
  43:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****      *                                                                       *
  44:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****      *                                                                       *
  46:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     ***************************************************************************
  47:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
  48:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     license and Real Time Engineers Ltd. contact details.
  50:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
  51:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
  55:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     licenses offer ticketed support, indemnification and middleware.
  58:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
  59:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     engineered and independently SIL3 certified version for use in safety and
  61:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     mission critical applications that require provable dependability.
  62:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
  63:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****     1 tab == 4 spaces!
  64:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** */
  65:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
  66:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
  67:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** #include <stdlib.h>
  68:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** #include "FreeRTOS.h"
  69:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** #include "list.h"
  70:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
  71:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------
  72:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****  * PUBLIC LIST API documented in list.h
  73:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c ****  *----------------------------------------------------------*/
  74:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
  75:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** void vListInitialise( List_t * const pxList )
  76:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** {
  28              		.loc 1 76 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  77:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	/* The list structure contains a list item which is used to mark the
  78:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	end of the list.  To initialise the list the list end is inserted
  79:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	as the only list entry. */
  80:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list struc
  44              		.loc 1 80 0
  45 0008 7B68     		ldr	r3, [r7, #4]
  46 000a 03F10802 		add	r2, r3, #8
  47 000e 7B68     		ldr	r3, [r7, #4]
  48 0010 5A60     		str	r2, [r3, #4]
  81:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
  82:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	/* The list end value is the highest possible value in the list to
  83:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	ensure it remains at the end of the list. */
  84:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  49              		.loc 1 84 0
  50 0012 7B68     		ldr	r3, [r7, #4]
  51 0014 4FF0FF32 		mov	r2, #-1
  52 0018 9A60     		str	r2, [r3, #8]
  85:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
  86:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	/* The list end next and previous pointers point to itself so we know
  87:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	when the list is empty. */
  88:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list
  53              		.loc 1 88 0
  54 001a 7B68     		ldr	r3, [r7, #4]
  55 001c 03F10802 		add	r2, r3, #8
  56 0020 7B68     		ldr	r3, [r7, #4]
  57 0022 DA60     		str	r2, [r3, #12]
  89:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini l
  58              		.loc 1 89 0
  59 0024 7B68     		ldr	r3, [r7, #4]
  60 0026 03F10802 		add	r2, r3, #8
  61 002a 7B68     		ldr	r3, [r7, #4]
  62 002c 1A61     		str	r2, [r3, #16]
  90:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
  91:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  63              		.loc 1 91 0
  64 002e 7B68     		ldr	r3, [r7, #4]
  65 0030 0022     		movs	r2, #0
  66 0032 1A60     		str	r2, [r3]
  92:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** }
  67              		.loc 1 92 0
  68 0034 0C37     		adds	r7, r7, #12
  69 0036 BD46     		mov	sp, r7
  70              		@ sp needed
  71 0038 5DF8047B 		ldr	r7, [sp], #4
  72 003c 7047     		bx	lr
  73              		.cfi_endproc
  74              	.LFE1:
  76 003e 00BF     		.section	.text.vListInitialiseItem,"ax",%progbits
  77              		.align	2
  78              		.global	vListInitialiseItem
  79              		.thumb
  80              		.thumb_func
  82              	vListInitialiseItem:
  83              	.LFB2:
  93:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  94:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
  95:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
  96:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** {
  84              		.loc 1 96 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 8
  87              		@ frame_needed = 1, uses_anonymous_args = 0
  88              		@ link register save eliminated.
  89 0000 80B4     		push	{r7}
  90              	.LCFI3:
  91              		.cfi_def_cfa_offset 4
  92              		.cfi_offset 7, -4
  93 0002 83B0     		sub	sp, sp, #12
  94              	.LCFI4:
  95              		.cfi_def_cfa_offset 16
  96 0004 00AF     		add	r7, sp, #0
  97              	.LCFI5:
  98              		.cfi_def_cfa_register 7
  99 0006 7860     		str	r0, [r7, #4]
  97:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
  98:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	pxItem->pvContainer = NULL;
 100              		.loc 1 98 0
 101 0008 7B68     		ldr	r3, [r7, #4]
 102 000a 0022     		movs	r2, #0
 103 000c 1A61     		str	r2, [r3, #16]
  99:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** }
 104              		.loc 1 99 0
 105 000e 0C37     		adds	r7, r7, #12
 106 0010 BD46     		mov	sp, r7
 107              		@ sp needed
 108 0012 5DF8047B 		ldr	r7, [sp], #4
 109 0016 7047     		bx	lr
 110              		.cfi_endproc
 111              	.LFE2:
 113              		.section	.text.vListInsertEnd,"ax",%progbits
 114              		.align	2
 115              		.global	vListInsertEnd
 116              		.thumb
 117              		.thumb_func
 119              	vListInsertEnd:
 120              	.LFB3:
 100:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 101:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
 102:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
 103:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** {
 121              		.loc 1 103 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 16
 124              		@ frame_needed = 1, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126 0000 80B4     		push	{r7}
 127              	.LCFI6:
 128              		.cfi_def_cfa_offset 4
 129              		.cfi_offset 7, -4
 130 0002 85B0     		sub	sp, sp, #20
 131              	.LCFI7:
 132              		.cfi_def_cfa_offset 24
 133 0004 00AF     		add	r7, sp, #0
 134              	.LCFI8:
 135              		.cfi_def_cfa_register 7
 136 0006 7860     		str	r0, [r7, #4]
 137 0008 3960     		str	r1, [r7]
 104:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** ListItem_t * const pxIndex = pxList->pxIndex;
 138              		.loc 1 104 0
 139 000a 7B68     		ldr	r3, [r7, #4]
 140 000c 5B68     		ldr	r3, [r3, #4]
 141 000e FB60     		str	r3, [r7, #12]
 105:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
 106:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
 107:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	makes the new list item the last item to be removed by a call to
 108:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	listGET_OWNER_OF_NEXT_ENTRY(). */
 109:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIndex;
 142              		.loc 1 109 0
 143 0010 3B68     		ldr	r3, [r7]
 144 0012 FA68     		ldr	r2, [r7, #12]
 145 0014 5A60     		str	r2, [r3, #4]
 110:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 146              		.loc 1 110 0
 147 0016 FB68     		ldr	r3, [r7, #12]
 148 0018 9A68     		ldr	r2, [r3, #8]
 149 001a 3B68     		ldr	r3, [r7]
 150 001c 9A60     		str	r2, [r3, #8]
 111:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	pxIndex->pxPrevious->pxNext = pxNewListItem;
 151              		.loc 1 111 0
 152 001e FB68     		ldr	r3, [r7, #12]
 153 0020 9B68     		ldr	r3, [r3, #8]
 154 0022 3A68     		ldr	r2, [r7]
 155 0024 5A60     		str	r2, [r3, #4]
 112:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	pxIndex->pxPrevious = pxNewListItem;
 156              		.loc 1 112 0
 157 0026 FB68     		ldr	r3, [r7, #12]
 158 0028 3A68     		ldr	r2, [r7]
 159 002a 9A60     		str	r2, [r3, #8]
 113:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
 114:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	/* Remember which list the item is in. */
 115:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 160              		.loc 1 115 0
 161 002c 3B68     		ldr	r3, [r7]
 162 002e 7A68     		ldr	r2, [r7, #4]
 163 0030 1A61     		str	r2, [r3, #16]
 116:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
 117:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 164              		.loc 1 117 0
 165 0032 7B68     		ldr	r3, [r7, #4]
 166 0034 1B68     		ldr	r3, [r3]
 167 0036 5A1C     		adds	r2, r3, #1
 168 0038 7B68     		ldr	r3, [r7, #4]
 169 003a 1A60     		str	r2, [r3]
 118:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** }
 170              		.loc 1 118 0
 171 003c 1437     		adds	r7, r7, #20
 172 003e BD46     		mov	sp, r7
 173              		@ sp needed
 174 0040 5DF8047B 		ldr	r7, [sp], #4
 175 0044 7047     		bx	lr
 176              		.cfi_endproc
 177              	.LFE3:
 179 0046 00BF     		.section	.text.vListInsert,"ax",%progbits
 180              		.align	2
 181              		.global	vListInsert
 182              		.thumb
 183              		.thumb_func
 185              	vListInsert:
 186              	.LFB4:
 119:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 120:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
 121:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
 122:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** {
 187              		.loc 1 122 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 16
 190              		@ frame_needed = 1, uses_anonymous_args = 0
 191              		@ link register save eliminated.
 192 0000 80B4     		push	{r7}
 193              	.LCFI9:
 194              		.cfi_def_cfa_offset 4
 195              		.cfi_offset 7, -4
 196 0002 85B0     		sub	sp, sp, #20
 197              	.LCFI10:
 198              		.cfi_def_cfa_offset 24
 199 0004 00AF     		add	r7, sp, #0
 200              	.LCFI11:
 201              		.cfi_def_cfa_register 7
 202 0006 7860     		str	r0, [r7, #4]
 203 0008 3960     		str	r1, [r7]
 123:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** ListItem_t *pxIterator;
 124:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 204              		.loc 1 124 0
 205 000a 3B68     		ldr	r3, [r7]
 206 000c 1B68     		ldr	r3, [r3]
 207 000e BB60     		str	r3, [r7, #8]
 125:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
 126:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	/* Insert the new list item into the list, sorted in xItemValue order.
 127:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
 128:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	If the list already contains a list item with the same item value then
 129:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	the new list item should be placed after it.  This ensures that TCB's which
 130:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	are stored in ready lists (all of which have the same xItemValue value)
 131:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	get an equal share of the CPU.  However, if the xItemValue is the same as
 132:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	the back marker the iteration loop below will not end.  This means we need
 133:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	to guard against this by checking the value first and modifying the
 134:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	algorithm slightly if necessary. */
 135:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 208              		.loc 1 135 0
 209 0010 BB68     		ldr	r3, [r7, #8]
 210 0012 B3F1FF3F 		cmp	r3, #-1
 211 0016 03D1     		bne	.L5
 136:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	{
 137:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 212              		.loc 1 137 0
 213 0018 7B68     		ldr	r3, [r7, #4]
 214 001a 1B69     		ldr	r3, [r3, #16]
 215 001c FB60     		str	r3, [r7, #12]
 216 001e 0CE0     		b	.L6
 217              	.L5:
 138:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	}
 139:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	else
 140:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	{
 141:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 		/* *** NOTE ***********************************************************
 142:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 		If you find your application is crashing here then likely causes are:
 143:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 			1) Stack overflow -
 144:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
 145:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M3
 146:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 			   parts where numerically high priority values denote low actual
 147:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 			   interrupt priorities, which can seem counter intuitive.  See
 148:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 			   configMAX_SYSCALL_INTERRUPT_PRIORITY on http://www.freertos.org/a00110.html
 149:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 			3) Calling an API function from within a critical section or when
 150:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 			   the scheduler is suspended, or calling an API function that does
 151:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 			   not end in "FromISR" from an interrupt.
 152:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 153:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 			   before the scheduler has been started (are interrupts firing
 154:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 			   before vTaskStartScheduler() has been called?).
 155:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
 156:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
 157:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 		**********************************************************************/
 158:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
 159:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValu
 218              		.loc 1 159 0
 219 0020 7B68     		ldr	r3, [r7, #4]
 220 0022 0833     		adds	r3, r3, #8
 221 0024 FB60     		str	r3, [r7, #12]
 222 0026 02E0     		b	.L7
 223              	.L8:
 224              		.loc 1 159 0 is_stmt 0 discriminator 2
 225 0028 FB68     		ldr	r3, [r7, #12]
 226 002a 5B68     		ldr	r3, [r3, #4]
 227 002c FB60     		str	r3, [r7, #12]
 228              	.L7:
 229              		.loc 1 159 0 discriminator 1
 230 002e FB68     		ldr	r3, [r7, #12]
 231 0030 5B68     		ldr	r3, [r3, #4]
 232 0032 1A68     		ldr	r2, [r3]
 233 0034 BB68     		ldr	r3, [r7, #8]
 234 0036 9A42     		cmp	r2, r3
 235 0038 F6D9     		bls	.L8
 236              	.L6:
 160:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 		{
 161:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 			/* There is nothing to do here, we are just iterating to the
 162:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 			wanted insertion position. */
 163:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 		}
 164:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	}
 165:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
 166:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 237              		.loc 1 166 0 is_stmt 1
 238 003a FB68     		ldr	r3, [r7, #12]
 239 003c 5A68     		ldr	r2, [r3, #4]
 240 003e 3B68     		ldr	r3, [r7]
 241 0040 5A60     		str	r2, [r3, #4]
 167:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 242              		.loc 1 167 0
 243 0042 3B68     		ldr	r3, [r7]
 244 0044 5B68     		ldr	r3, [r3, #4]
 245 0046 3A68     		ldr	r2, [r7]
 246 0048 9A60     		str	r2, [r3, #8]
 168:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 247              		.loc 1 168 0
 248 004a 3B68     		ldr	r3, [r7]
 249 004c FA68     		ldr	r2, [r7, #12]
 250 004e 9A60     		str	r2, [r3, #8]
 169:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	pxIterator->pxNext = pxNewListItem;
 251              		.loc 1 169 0
 252 0050 FB68     		ldr	r3, [r7, #12]
 253 0052 3A68     		ldr	r2, [r7]
 254 0054 5A60     		str	r2, [r3, #4]
 170:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
 171:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 172:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	item later. */
 173:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 255              		.loc 1 173 0
 256 0056 3B68     		ldr	r3, [r7]
 257 0058 7A68     		ldr	r2, [r7, #4]
 258 005a 1A61     		str	r2, [r3, #16]
 174:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
 175:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 259              		.loc 1 175 0
 260 005c 7B68     		ldr	r3, [r7, #4]
 261 005e 1B68     		ldr	r3, [r3]
 262 0060 5A1C     		adds	r2, r3, #1
 263 0062 7B68     		ldr	r3, [r7, #4]
 264 0064 1A60     		str	r2, [r3]
 176:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** }
 265              		.loc 1 176 0
 266 0066 1437     		adds	r7, r7, #20
 267 0068 BD46     		mov	sp, r7
 268              		@ sp needed
 269 006a 5DF8047B 		ldr	r7, [sp], #4
 270 006e 7047     		bx	lr
 271              		.cfi_endproc
 272              	.LFE4:
 274              		.section	.text.uxListRemove,"ax",%progbits
 275              		.align	2
 276              		.global	uxListRemove
 277              		.thumb
 278              		.thumb_func
 280              	uxListRemove:
 281              	.LFB5:
 177:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 178:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
 179:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 180:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** {
 282              		.loc 1 180 0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 16
 285              		@ frame_needed = 1, uses_anonymous_args = 0
 286              		@ link register save eliminated.
 287 0000 80B4     		push	{r7}
 288              	.LCFI12:
 289              		.cfi_def_cfa_offset 4
 290              		.cfi_offset 7, -4
 291 0002 85B0     		sub	sp, sp, #20
 292              	.LCFI13:
 293              		.cfi_def_cfa_offset 24
 294 0004 00AF     		add	r7, sp, #0
 295              	.LCFI14:
 296              		.cfi_def_cfa_register 7
 297 0006 7860     		str	r0, [r7, #4]
 181:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 182:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** item. */
 183:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 298              		.loc 1 183 0
 299 0008 7B68     		ldr	r3, [r7, #4]
 300 000a 1B69     		ldr	r3, [r3, #16]
 301 000c FB60     		str	r3, [r7, #12]
 184:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
 185:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 302              		.loc 1 185 0
 303 000e 7B68     		ldr	r3, [r7, #4]
 304 0010 5B68     		ldr	r3, [r3, #4]
 305 0012 7A68     		ldr	r2, [r7, #4]
 306 0014 9268     		ldr	r2, [r2, #8]
 307 0016 9A60     		str	r2, [r3, #8]
 186:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 308              		.loc 1 186 0
 309 0018 7B68     		ldr	r3, [r7, #4]
 310 001a 9B68     		ldr	r3, [r3, #8]
 311 001c 7A68     		ldr	r2, [r7, #4]
 312 001e 5268     		ldr	r2, [r2, #4]
 313 0020 5A60     		str	r2, [r3, #4]
 187:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
 188:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 189:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 314              		.loc 1 189 0
 315 0022 FB68     		ldr	r3, [r7, #12]
 316 0024 5A68     		ldr	r2, [r3, #4]
 317 0026 7B68     		ldr	r3, [r7, #4]
 318 0028 9A42     		cmp	r2, r3
 319 002a 03D1     		bne	.L10
 190:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	{
 191:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 320              		.loc 1 191 0
 321 002c 7B68     		ldr	r3, [r7, #4]
 322 002e 9A68     		ldr	r2, [r3, #8]
 323 0030 FB68     		ldr	r3, [r7, #12]
 324 0032 5A60     		str	r2, [r3, #4]
 325              	.L10:
 192:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	}
 193:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	else
 194:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	{
 195:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 		mtCOVERAGE_TEST_MARKER();
 196:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	}
 197:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
 198:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	pxItemToRemove->pvContainer = NULL;
 326              		.loc 1 198 0
 327 0034 7B68     		ldr	r3, [r7, #4]
 328 0036 0022     		movs	r2, #0
 329 0038 1A61     		str	r2, [r3, #16]
 199:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )--;
 330              		.loc 1 199 0
 331 003a FB68     		ldr	r3, [r7, #12]
 332 003c 1B68     		ldr	r3, [r3]
 333 003e 5A1E     		subs	r2, r3, #1
 334 0040 FB68     		ldr	r3, [r7, #12]
 335 0042 1A60     		str	r2, [r3]
 200:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 
 201:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** 	return pxList->uxNumberOfItems;
 336              		.loc 1 201 0
 337 0044 FB68     		ldr	r3, [r7, #12]
 338 0046 1B68     		ldr	r3, [r3]
 202:lib/FreeRTOSV8.1.2/FreeRTOS/Source/list.c **** }
 339              		.loc 1 202 0
 340 0048 1846     		mov	r0, r3
 341 004a 1437     		adds	r7, r7, #20
 342 004c BD46     		mov	sp, r7
 343              		@ sp needed
 344 004e 5DF8047B 		ldr	r7, [sp], #4
 345 0052 7047     		bx	lr
 346              		.cfi_endproc
 347              	.LFE5:
 349              		.text
 350              	.Letext0:
 351              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 352              		.file 3 "/usr/include/newlib/stdint.h"
 353              		.file 4 "lib/FreeRTOSV8.1.2/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 354              		.file 5 "lib/FreeRTOSV8.1.2/FreeRTOS/Source/include/list.h"
DEFINED SYMBOLS
                            *ABS*:00000000 list.c
     /tmp/ccEdXQFs.s:20     .text.vListInitialise:00000000 $t
     /tmp/ccEdXQFs.s:25     .text.vListInitialise:00000000 vListInitialise
     /tmp/ccEdXQFs.s:77     .text.vListInitialiseItem:00000000 $t
     /tmp/ccEdXQFs.s:82     .text.vListInitialiseItem:00000000 vListInitialiseItem
     /tmp/ccEdXQFs.s:114    .text.vListInsertEnd:00000000 $t
     /tmp/ccEdXQFs.s:119    .text.vListInsertEnd:00000000 vListInsertEnd
     /tmp/ccEdXQFs.s:180    .text.vListInsert:00000000 $t
     /tmp/ccEdXQFs.s:185    .text.vListInsert:00000000 vListInsert
     /tmp/ccEdXQFs.s:275    .text.uxListRemove:00000000 $t
     /tmp/ccEdXQFs.s:280    .text.uxListRemove:00000000 uxListRemove
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
